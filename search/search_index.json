{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#backend-language","title":"Backend Language","text":"<ul> <li> <p> Python</p> </li> <li> <p> Laravel</p> </li> <li> <p> Go</p> </li> <li> <p> Java</p> </li> </ul> Note <p>Given the increasing prominence of artificial intelligence (AI) and its integration into backend systems, two languages with significant potential for the future of backend development in the AI domain are Python and Golang (Go).</p> <p>Python:</p> <p>Python has already established itself as a dominant language in AI and machine learning (ML) development due to its simplicity, versatility, and extensive libraries like <code>TensorFlow</code>, <code>PyTorch</code>, and <code>scikit-learn</code>. Its ease of use makes it ideal for rapid prototyping and experimentation, while its performance can be enhanced through libraries like <code>NumPy</code> and <code>Cython</code>.</p> <p>Golang (Go):</p> <p>Go is gaining traction in the AI and backend development communities due to its speed, concurrency support, and strong built-in standard library. Go's simplicity and efficiency make it well-suited for building scalable backend systems that handle AI workloads efficiently. Additionally, frameworks like <code>TensorFlow</code> and <code>gorgonia</code> provide Go bindings for AI development.</p> <p>By learning Python and Golang, you'll be well-equipped to tackle backend development tasks in the evolving landscape of AI-driven applications and systems. These languages offer complementary strengths and are likely to remain relevant in the future of AI-powered backend development.</p>"},{"location":"tags/","title":"Tools","text":""},{"location":"tags/#tools","title":"Tools","text":"<ul> <li>Tmux</li> <li>Django</li> <li>Python</li> </ul>"},{"location":"tags/#django","title":"Django","text":"<ul> <li>Active link in django</li> <li>Ensuring Admin Access Control in Django Models</li> <li>Strengthening Your Django Applications with Defensive Programming</li> <li>Difference between TemplateView, ListView, and View</li> <li>Django Model Fields with TextChoices</li> <li>Django cors</li> <li>A Guide to CSRF Cookie Settings</li> <li>Django easy-thumbnails package</li> <li>Using Elasticsearch with Django and DRF</li> <li>Intro to Elasticsearch</li> <li>Managing development .env in Django</li> <li>Django in production</li> <li>Internationalization and Localization in Django: A Quick Guide</li> <li>Django Images not showing in the Cpanel or Shared Hosting</li> <li>Splitting django models.py into multiple files</li> <li>Django Admin Forms with formfield_overrides</li> <li>Customizing how models are displayed</li> <li>Get related blogs using django-taggit</li> <li>Django with ajax</li> <li>Django with Tailwind</li> <li>Enhancing Django Development with Model help_text</li> <li>Managing settings for multiple environments in django</li> <li>How to handle nullable &amp; non-nullable fields in django</li> <li>Preventing Unintended Form Resubmission in Web Applications</li> <li>A peek into str method in django</li> <li>Understanding Django Query Methods: objects.all() vs get_object_or_404()</li> </ul>"},{"location":"tags/#drf","title":"Drf","text":"<ul> <li>Viewset vs APIView</li> <li>Using Elasticsearch with Django and DRF</li> <li>Intro to Elasticsearch</li> <li>drf-yasg: Swagger</li> <li>Blog CRUD Application Using DRF \u2014 Viewsets</li> </ul>"},{"location":"tags/#production","title":"Production","text":"<ul> <li>Django in production</li> </ul>"},{"location":"tags/#programming","title":"Programming","text":"<ul> <li>Managing settings for multiple environments in django</li> <li>Exploring Static and Dynamic Model Choices in Django</li> </ul>"},{"location":"tags/#python","title":"Python","text":"<ul> <li>Active link in django</li> <li>Ensuring Admin Access Control in Django Models</li> <li>Understanding args and *kwargs in Python Functions</li> <li>Strengthening Your Django Applications with Defensive Programming</li> <li>Django Model Fields with TextChoices</li> <li>Django easy-thumbnails package</li> <li>Splitting django models.py into multiple files</li> <li>Django Admin Forms with formfield_overrides</li> <li>Customizing how models are displayed</li> <li>drf-yasg: Swagger</li> <li>Get related blogs using django-taggit</li> <li>Blog CRUD Application Using DRF \u2014 Viewsets</li> <li>Enhancing Django Development with Model help_text</li> <li>How to Set Up a Virtual Environment in Python</li> </ul>"},{"location":"tags/#simplejwt","title":"SimpleJWT","text":"<ul> <li>How to Implement Tokenization using JWT and Django</li> </ul>"},{"location":"tags/#elasticsearch","title":"elasticsearch","text":"<ul> <li>Using Elasticsearch with Django and DRF</li> <li>Intro to Elasticsearch</li> </ul>"},{"location":"tags/#tailwindcss","title":"tailwindcss","text":"<ul> <li>Django with Tailwind</li> </ul>"},{"location":"backend/celery/","title":"celery","text":""},{"location":"backend/celery/#installing-celery","title":"Installing Celery","text":"<p>Success</p> <pre><code>pip install celery==5.2.7\n</code></pre>"},{"location":"backend/celery/#using-django-with-celery-and-rabbitmq","title":"Using Django with <code>Celery</code> and <code>RabbitMQ</code>","text":"<p>Celery is a distributed task queue that can process vast amounts of messages. We will use Celery to define asynchronous tasks as Python functions within our Django applications. We will run Celery workers that will listen to the message broker to get new messages to process asynchronous tasks.</p> <p>Using Celery, not only can you create asynchronous tasks easily and let them be executed by workers as soon as possible, but you can also schedule them to run at a specific time. You can find the Celery documentation at <code>https://docs.celeryq.dev/en/stable/index.html</code>.</p> <p>Celery communicates via messages and requires a message broker to mediate between clients and workers. There are several options for a message broker for Celery, including key/value stores such as <code>Redis</code>, or an actual message broker such as <code>RabbitMQ</code>.</p> <p>RabbitMQ is the most widely deployed message broker. It supports multiple messaging protocols, such as the Advanced Message Queuing Protocol (AMQP), and it is the recommended message worker for Celery. RabbitMQ is lightweight, easy to deploy, and can be configured for scalability and high availability.</p> <p></p>"},{"location":"backend/celery/#monitoring-celery-with-flower","title":"Monitoring Celery with Flower","text":"<p>Besides the RabbitMQ management UI, you can use other tools to monitor the asynchronous tasks that are executed with Celery. Flower is a useful web-based tool for monitoring Celery. Install Flower using the following command:</p> <p>Success</p> <pre><code>pip install flower==1.1.0\n\ncelery -A myshop flower\n</code></pre>"},{"location":"backend/draft/","title":"draft","text":"<p>Django Folder Structure</p> <p>Django Naming Convention</p> <p>Boilerplate &amp; Scaffold</p> <p>Python</p> <p>Python</p> bash<pre><code># To run a Django server on a different port\n$ python manage.py runserver &lt;port_number&gt;\n$ python manage.py runserver 8001\n\n# To bind to a specific IP address\n$ python manage.py runserver &lt;ip_address&gt;:&lt;port_number&gt;\n$ python manage.py runserver 0.0.0.0:8001\n\n# This will make your Django server accessible on all network interfaces on port 8001.\n</code></pre> <p>django best practices</p> <p>django best practices: project vs apps</p> 2002, Can't connect to local MySQL server through socket <p>Q. django.db.utils.OperationalError: (2002, \"Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)\")</p> <p>=&gt; Use \"127.0.0.1\", instead of \"localhost\"</p> <pre><code>DATABASES = {\n      'default': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'django',\n            'USER': 'root',\n            'PASSWORD': '',\n            'HOST': '127.0.0.1',\n            'PORT': '3306',\n      }\n}\n</code></pre> Django MVT Architecture <p>In the context of the Django web framework, a \"view\" is not just a \"view\" in the traditional Model-View-Controller (MVC) sense. Instead, it is more aligned with the \"controller\" part of MVC. Django follows a slightly different design pattern known as Model-View-Template (MVT), where the view acts more like a controller.</p> <p>Here's a breakdown of the responsibilities in Django's MVT pattern:</p> <ul> <li> <p>Model:</p> <p>The model represents the data structure of your application. It typically consists of Python classes that define the fields and behavior of your data, including interactions with the database.</p> </li> <li> <p>View:</p> <p>In Django, a view is a Python function or class that receives HTTP requests and returns HTTP responses. It's responsible for processing requests, fetching data from the database (via QuerySets), and passing that data to templates for rendering.</p> </li> <li> <p>Template:</p> <p>Templates are HTML files containing placeholders and template tags. They are responsible for rendering the data received from the view into a user-readable format. Templates can include dynamic content using template tags and filters.</p> </li> </ul> <p>In <code>Django's MVT pattern</code>, the view acts as a controller that handles the business logic, database interactions, and data manipulation. It receives input from the user (HTTP requests), processes that input, interacts with the database through models and QuerySets, and passes the processed data to templates for rendering.</p> <p>So, while the view in Django is similar to the controller in traditional MVC architectures, it also incorporates some aspects of the \"view\" in terms of rendering data to the user. However, the primary responsibility of the view in Django is to handle request processing and data manipulation, making it more akin to the controller in MVC.</p> Registering Models with the Admin <p>We have to register out app's <code>model</code> such as MyEvent, MyUser with the <code>admin</code>.</p> <pre><code>from django.contrib import admin\nfrom .models import MyEvent, MyUser\n\nadmin.site.register(MyEvent)\nadmin.site.register(MyUser)\n</code></pre> <p>Q. Why do we need to register a model in Djano?</p> <p>When you register a model with the admin, you can use the admin to <code>add</code>, <code>edit</code> and <code>delete</code> model records.</p> Advanced models <p>Django QuertSet API provides a comprehensive array of methods and function for working with data.</p> <p>A Django <code>QuerySet</code> is a collection of database queries used to fetch data from the database and perform various operations on it. It represents a collection of objects retrieved from your database, typically filtered, ordered, and limited. QuerySets allow you to interact with your database in a Pythonic way, providing a powerful and expressive API for retrieving, manipulating, and querying data.</p> <p>## Basic Example</p> <pre><code>from myapp.models import Book\n\n# Retrieve all books\nall_books = Book.objects.all()\n\n# Filter books by a certain condition\nrecent_books = Book.objects.filter(published_date__year=2022)\n\n# Order books by a certain field\nsorted_books = Book.objects.order_by('title')\n\n# Retrieve a single book\nbook = Book.objects.get(title='Example Book')\n\n# Count the number of books\nnum_books = Book.objects.count()\n</code></pre> <p>Advanced Example:</p> <p>Suppose you have two models, <code>Author</code> and <code>Book</code>, where <code>Book</code> has a foreign key relationship with <code>Author</code>. Here's how you can use QuerySets for more complex operations:</p> <pre><code>from myapp.models import Author, Book\n\n# Retrieve all books by a specific author\nauthor = Author.objects.get(name='John Doe')\nbooks_by_author = Book.objects.filter(author=author)\n\n# Perform a join operation to get books published in a specific year by authors with a certain nationality\nbooks_published_in_2022 = Book.objects.filter(published_date__year=2022, author__nationality='American')\n\n# Retrieve the number of books written by each author\nfrom django.db.models import Count\nbooks_per_author = Author.objects.annotate(num_books=Count('book'))\n\n# Perform a complex query combining multiple conditions\ncomplex_query = Book.objects.filter(published_date__year=2022).exclude(author__nationality='British').order_by('-published_date')[:5]\n</code></pre> uWSGI (<code>Web Server Gateway Interface</code>) <p>Installation</p> <pre><code># installtion\npip install uwsgi\n\n# checking the version\nuwsg --version\n\n# running a web server\nuwsgi --http :8080 -w &lt;file&gt;:application\n</code></pre> project-level urls <code>vs</code> app-level urls <p>In Django, URL patterns can be defined at both the project level and the app level. Here's a brief explanation of each:</p> <ol> <li> <p>Project-level URLs:</p> <p>These are defined in the urls.py file at the project's root level. This file typically resides in the same directory as your settings.py file. Project-level URLs define the main URLs for your entire Django project. They are often used to include URLs from various apps within the project.</p> </li> <li> <p>App-level URLs:</p> <p>These are defined in the urls.py file within individual Django apps. Each app can have its own set of URLs, which are specific to the functionality provided by that app. App-level URLs are useful for organizing and encapsulating related views and functionality within the app.</p> </li> </ol> <p>Whether you should use both project-level and app-level URLs depends on the structure and complexity of your Django project:</p> <p>Small projects: For small projects with a limited number of apps and URLs, you might choose to define all URLs in the project-level urls.py file. This keeps the URL configuration simple and centralized.</p> <p>Medium to large projects: In larger projects with multiple apps and complex URL configurations, it's often beneficial to use both project-level and app-level URLs. Project-level URLs can serve as an entry point, including URLs from various apps, while each app can define its own URLs for its specific functionality.</p> <p>Here's an example of how you might structure your URLs in a Django project:</p> <pre><code>  project_name/\n  |-- manage.py\n  |-- project_name/\n  |   |-- __init__.py\n  |   |-- settings.py\n  |   |-- urls.py           # Project-level URLs\n  |   |-- wsgi.py\n  |-- app1/\n  |   |-- __init__.py\n  |   |-- models.py\n  |   |-- urls.py           # App-level URLs for app1\n  |   |-- views.py\n  |-- app2/\n  |   |-- __init__.py\n  |   |-- models.py\n  |   |-- urls.py           # App-level URLs for app2\n  |   |-- views.py\n</code></pre> <p>In this structure, the project-level urls.py file might include URLs from <code>app1.urls</code> and <code>app2.urls</code>, while each app (app1 and app2) has its own urls.py file defining URLs specific to that app's functionality. This approach allows for better organization and separation of concerns in larger projects.</p> <p>Programming</p> JS Functional Programming <p>The idea is not to throw away everything you\u2019ve learned and use and adopt a 100% functional way; rather, the guiding idea is evolution, not revolution.</p> <p>It\u2019s easy to apply a given function from some package or the other, but by coding everything out (<code>vanilla FP</code>, if you wish), it\u2019s my belief that you get to understand things more deeply.</p> OO design patterns Functional design patterns <ul> <li>Mastering JavaScript Functional Programming by Federico Kereki, 3rd Edition</li> </ul> What Is DevOps? <p>The term <code>DevOps</code> is derived from the combination of <code>two words</code>: developer and operations.</p> <p><code>DevOps</code> is used to define a movement born of the need for reducing barriers between the development and operations teams of a company. The goal of DevOps is to reduce time to market. This means adopting DevOps practices, to reduce the time needed, from the identification of a new requirement to the time it goes live for customers.</p> <p>The <code>DevOps</code> journey introduces such practices as continuous integration and continuous   delivery, which help to reduce time to market and produce better quality software.</p> <p>Common menus on websites often include:</p> <ol> <li>Home: The homepage of the website, typically linked to the logo in the header.</li> <li>About: Information about the company, organization, or website.</li> <li>Products/Services: If applicable, a menu item leading to a page showcasing the products or services offered.</li> <li>Blog/News: A section for articles, updates, or news related to the website's topic or industry.</li> <li>Contact: Contact information or a contact form for users to reach out.</li> <li>Portfolio/Projects: For showcasing past work or projects, often seen on agency or freelancer websites.</li> <li>FAQ: Frequently Asked Questions, if applicable.</li> <li>Testimonials: Customer testimonials or reviews, typically found on business websites.</li> <li>Events/Calendar: For listing upcoming events, conferences, or important dates.</li> <li>Resources: Links to downloadable resources, documents, or helpful tools.</li> <li>Search: A search bar to help users find specific content on the website.</li> <li>Login/Register: If the website requires user authentication, links to login or register for an account.</li> <li>Terms of Service/Privacy Policy: Legal pages outlining terms of use and privacy policies.</li> <li>Sitemap: A structured layout of the website's content, helpful for navigation and SEO.</li> <li>Social Media Links: Icons linking to the website's social media profiles.</li> </ol> <p>The specific menu items will vary depending on the purpose and content of the website. It's important to consider the needs of your audience and the goals of your website when determining which menu items to include. Additionally, the menu structure should be intuitive and easy to navigate for users.</p>"},{"location":"backend/draft/#making-fields-optional","title":"Making Fields Optional","text":"models.py<pre><code>class MyUserModal:\n  name = models.URLField(\"Web Address\", blank=True)\n</code></pre> <p>I have set the <code>blank</code> field to <code>True</code>. The default is <code>False</code>, which makes the field required.</p>"},{"location":"backend/intro/","title":"Intro","text":"<p>Backend</p> <ul> <li> <p> Django</p> </li> <li> <p> FastAPI</p> </li> </ul> <p>Solved Error in Ubuntu while instaling <code>mysqlclient</code></p> <pre><code>sudo apt-get install python3-dev default-libmysqlclient-dev build-essential\n\n# or\n\n# pkg-config: not found is a major hint at the problem and the solution - \n# you're missing build # tools and you need to install them.\n\napt-get install pkg-config build-essential libmysqlclient-dev\n</code></pre> <ul> <li> <p>Mysqlclient cannot install via pip, cannot find pkg-config name in Ubuntu</p> </li> <li> <p>Can not install apache-airflow-providers-mysql: pkg-config error</p> </li> </ul> <p>2002, \"Can't connect to local MySQL server through socket</p> <p>Use \"127.0.0.1\", instead of \"localhost\"</p> <ul> <li>2002, \"Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)\"</li> </ul>"},{"location":"backend/web-server/","title":"Web Server","text":""},{"location":"backend/web-server/#gunicorn-green-unicorn","title":"Gunicorn <code>(Green Unicorn)</code>","text":"<p>Gunicorn is a WSGI server for Python applications, well known for its advanced process management features.</p> <p></p> <p>If you have Python 3.5 and later, you can install Gunicorn using pip:</p> <p>Tip</p> bash<pre><code>$ pip install gunicorn\n</code></pre>"},{"location":"backend/web-server/#uvicorn","title":"Uvicorn","text":"<p>Uvicorn is an ASGI server implementation for Python.</p> <p>Tip</p> bash<pre><code>$ pip install uvicorn[standard] \n# includes installation of optional and Cython-based dependencies\n</code></pre>"},{"location":"backend/web-server/#daphne","title":"Daphne","text":"<p>Daphne is one of the first ASGI server implementations used as a reference for ASGI server implementations.</p> <p>Tip</p> bash<pre><code>$ pip install daphne\n</code></pre>"},{"location":"backend/web-server/#reference","title":"Reference","text":"<ul> <li>9 Python Web Servers to Try for Your Next Project </li> </ul>"},{"location":"backend/designpatterns/intro/","title":"Design Pattern","text":""},{"location":"backend/designpatterns/model-mixins-patterns/","title":"Model Mixins Pattern","text":"<p>This is under structural pattern.</p>"},{"location":"backend/designpatterns/model-mixins-patterns/#pattern-a-model-mixins","title":"Pattern a model mixins","text":"<ul> <li>Problem: Distinct models have the same fields and/or methods duplicated violating the DRY principle.</li> <li>Solution: Extract common fields and methods into various reusable model mixins.</li> </ul> <p>Model mixins</p> <p>Model mixins are abstract classes that can be added as a parent class of a model. Python supports multiple inheritances, unlike other languages such as Java. Hence, you can list any number of parent classes for a model.</p> <p>Smaller mixins are better. Whenever a mixin becomes large and violates the single responsibility principle, consider refactoring it into smaller classes. Let a mixin do one thing and do it well. </p> <p>In our previous example, the model mixin used to update DSFBUFE and NPEJGJFE time can be easily factored out, as shown in the following code:</p> models.py<pre><code>class TimeStampModel(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    modified = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        abstract = True\n\nclass Postable(TimeStampModel):\n    message = models.TextField(max_length=500)\n\n    class Meta:\n        abstract = True\n\nclass Post(Postable):\n    ...\n\nclass Comment(Postable):\n    ...\n</code></pre> <p>We have two base classes now. However, the functionality is clearly separated. The mixin can be separated into its own module and reused in other contexts.</p>"},{"location":"backend/designpatterns/template-patterns/","title":"Template Patterns","text":""},{"location":"backend/designpatterns/template-patterns/#template-patterns","title":"Template patterns","text":"<p>Django's template language is quite simple. However, you can save a lot of time by following some elegant template design patterns.</p>"},{"location":"backend/designpatterns/template-patterns/#pattern-the-active-link","title":"Pattern - <code>the active link</code>","text":"<p>Solution</p> <p>There are several solutions to determine the active link. Excluding JavaScript-based approaches, they can be mainly grouped into <code>template-only</code> and <code>custom tag-based</code> solutions.</p> A template-only SolutionCustom tags <pre><code>&lt;ul class=\"nav\"&gt;\n    &lt;li class=\"{% if request.path == '/' %}active{% endif %}\"&gt;\n        &lt;a href=\"/\"&gt;Home&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li class=\"{% if request.path == '/about/' %}active{% endif %}\"&gt;\n        &lt;a href=\"/about/\"&gt;About&lt;/a&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> nav.py<pre><code>from django.urls import resolve\nfrom django import template\n\nregister = template.Library()\n\n@register.simple_tag\ndef active_nav(request, url):\n    url_name = resolve(request.path).url_name\n\n    print(\"url :\", urls , \" , url_name: \", url_name)\n\n    if url_name == url:\n        return \"active\"\n    return \"\"\n\n# slighly advanced\n@register.simple_tag\ndef active_nav(request, *urls):\n    url_name = resolve(request.path).url_name\n\n    print(\"url :\", urls , \" , url_name: \", url_name)\n\n    if url_name in urls:\n        return \"active\"\n    return \"\"\n</code></pre> Note <p>In Django, it's standard practice to keep custom template tags within the app they belong to, usually in a templatetags directory within the app's directory structure. This convention helps maintain a clear separation of concerns and promotes modularity and reusability.</p> <p>While it's technically possible to place templatetags outside of the app, it's generally not recommended unless there's a compelling reason to do so. Placing templatetags outside of the app may lead to a less organized codebase and make it harder for developers to understand the relationships between different components.</p> <p>However, if you have templatetags that are generic and reusable across multiple apps or even across different projects, you might consider creating a separate reusable Django app specifically for those templatetags. This approach allows you to centralize reusable functionality while still maintaining modularity and encapsulation.</p>"},{"location":"backend/designpatterns/template-patterns/#reference","title":"Reference","text":"<ul> <li>Django Design Patterns and Best Practices :pg-102</li> </ul>"},{"location":"backend/designpatterns/user-profile-patterns/","title":"User Profile Pattern","text":"<p>This pattern is under structural</p>"},{"location":"backend/designpatterns/user-profile-patterns/#pattern-a-user-profiles","title":"Pattern a user profiles","text":"<p>Note</p> <ul> <li>Problem: Every website stores a different set of user profile details. However, Django's built-in user model is meant for authentication details.</li> <li>Solution: Create a user profile class with a one-to-one relation with the user model.</li> </ul>"},{"location":"backend/designpatterns/user-profile-patterns/#problem-details","title":"Problem details","text":"<p>Out of the box, Django provides a pretty decent user model. You can use it when you create a super user or login to the admin interface. It has a few basic fields, such as full name, username, and email.</p> <p>However, most real-world projects keep a lot more information about users, such as their address, favorite movies, or their superpower abilities. From Django 1.5 onwards, the default user model can be extended or replaced. However, official docs strongly recommend storing only authentication data even in a custom user model (it belongs to the BVUI app, after all).</p> <p>Certain projects need multiple types of users. For example, SuperBook can be used by superheroes and non-superheroes. There might be common fields and some distinctive fields based on the type of user.</p>"},{"location":"backend/designpatterns/user-profile-patterns/#solution-details","title":"Solution details","text":"<p>The officially recommended solution is to create a user profile model. It should have a <code>one-to-one</code> relation with your user model. All the additional user information is stored in this model:</p> <p>Tip</p> models.py<pre><code>class Profile(models.Model):\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, primary_key=True)\n</code></pre> <p>It is recommended that you set the <code>primary_key</code> explicitly to <code>True</code> to prevent concurrency issues in some database backends such as PostgreSQL. The rest of the model can contain any other user details, such as birth-date, favorite color, and so on.</p> <p>While designing the profile model, it is recommended that all the profile detail fields must be <code>nullable</code> or contain <code>default</code> values. Intuitively, we can understand that a user cannot fill out all their profile details while signing up. Additionally, we will ensure that the signal handler also doesn't pass any initial parameters while creating the profile instance.</p>"},{"location":"backend/designpatterns/user-profile-patterns/#signals","title":"Signals","text":"<p>Ideally, every time a user model instance is created, a corresponding user profile instance must be created as well. This is usually done using signals.</p> <p>For example, we can listen for the <code>post_save</code> signal from the user model using the following signal handler in <code>profiles/signals.py</code>:</p> <p>Tip</p> models.py<pre><code>from django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.conf import settings\nfrom .models\n\n@receiver(post_save, sender=settings.AUTH_USER_MODEL)\ndef create_profile_handler(sender, instance, created, **kwargs):\n    if not created:\n        return\n\n    # Create the profile object, only if it is newly created\n    profile = models.Profile(user=instance)\n    profile.save()\n</code></pre> <p>The <code>profile</code> model has passed no additional initial parameters except for the <code>user=instance</code>.</p> <p>Previously, there was no specific place for initializing the signal code. Typically, they were imported or implemented in <code>models.py</code> (which was unreliable). However, with app-loading refactor in Django 1.7, the application initialization code location is well defined.</p> <p>First, subclass the <code>ProfileConfig</code> method in <code>apps.py</code> within the profiles app and set up the signal in the ready method:</p> <p>Tip</p> apps.py<pre><code>from django.apps import AppConfig\n\nclass ProfilesConfi(AppConfig):\n    name = \"profiles\"\n    verbose_name = 'User Profiles'\n\n    def ready(self):\n        from . import signals\n</code></pre> <p>Next, change the line mentioning profiles in your <code>INSTALLED_APPS</code> to a dotted path pointing to this <code>AppConfig</code>. So your settings should look as follows:</p> settings.py<pre><code>INSTALLED_APPS = [\n    'profiles.apps.ProfilesConfig',\n    'posts',\n    ...\n]\n</code></pre> <p>With your signals set up, accessing <code>user.profile</code> should return a <code>Profile</code> object to all users, even the newly created ones.</p>"},{"location":"backend/designpatterns/user-profile-patterns/#admin","title":"Admin","text":"<p>Now, a user's details will be in two different places within the admin: the authentication details in the usual user admin page, and the same user's additional profile details in a separate profile admin page. This gets very cumbersome.</p> <p>For convenience, the profile admin can be made inline to the default user admin by defining a custom <code>UserAdmin</code> in <code>profiles/admin.py</code> as follows:</p> <p>Tip</p> admin.py<pre><code>from django.contrib import admin\nfrom django.contrib.auth.admin imort UserAdmin\nfrom .models import Profile\nfrom django.contrib.auth.models import User\n\nclass UserProfileInline(admin.StackedInline):\n    model = Profile\n\nclass NewUserAdmin(UserAdmin):\n    inlines = [UserProfileInline]\n\nadmin.site.unregister(User)\nadmin.site.register(User, NewUserAdmin)\n</code></pre>"},{"location":"backend/designpatterns/user-profile-patterns/#multiple-profile-types","title":"Multiple profile types","text":"<p>Assume that you need several kinds of users and their corresponding profiles in your application - there needs to be a field to track which type of profile the user has. The <code>Profile</code> data itself needs to be stored in separate models or a unified model.</p> <p>An aggregate <code>Profile</code> approach is recommended since it gives the flexibility to change the <code>Profile</code> types without loss of <code>Profile</code> details and minimizes complexity. In this approach, the <code>Profile</code> model contacins a superset of all profile fields from all <code>Profile</code> types.</p> <p>For example, SuperBook will need a superhero type profile and an ordinary (non-superhero) profile. It can be implemented using a single unified profile model as follows:</p> <p>Tip</p> models.py<pre><code>class BaseProfile(models.Model):\n\n    USER_TYPES = (\n        (0, 'Ordinary'),\n        (1, 'SuperHero'),\n    )\n\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, primary_key=True)\n    user_type = models.IntegerField(max_length=1, null=True, choices=USER_TYPES)\n    bio = models.CharField(max_length=200, blank=True, null=True)\n\n    def __str__(self):\n        return \"{}: {:.20\".format(self.user, self.bio or \"\")\n\n    class Meta:\n        abstract = True\n\n\nclass SuperHeroProfile(models.Model):\n    origin = models.CharField(max_length=100, blank=True, null=True)\n\n    class Meta:\n        abstract = True\n\n\nclass OrdinaryProfile(models.Model):\n    address = models.CharField(max_length=200, blank=True, null=True)\n\n    class Meta:\n        abstract = True\n\n\n\nclass Profile(SuperHeroProfile, OrdinaryProfile, BaseProfile):\n    pass\n</code></pre> <p>We grouped the profile details into several abstract base classes to separate concerns. The <code>BaseProfile</code> class contains all the common profile details irrespective of the user type. It also has a <code>user_type</code> field that keeps track of the user's active profile.</p> <p>The <code>SuperHeroProfile</code> class and <code>OrdinaryProfile</code> class contain the <code>Profile</code> details specific to superhero and non-hero users, respectively. Finally, the <code>Profile</code> class derives from all these base classes to create a superset of profile details.</p> <p>Some details to take care of while using this approach are as follows:</p> <ul> <li>All <code>Profile</code> fields that belong to the class or its abstract bases classes must be nullable or with defaults.</li> <li>This approach might consume more database space per user, but gives immense flexibility.</li> <li>The active and inactive fields for a <code>Profile</code> type need to be managed outside the model. For example, a form to edit the profile must show the appropriate fields based on the currently active user type.</li> </ul>"},{"location":"backend/django/context-processors/","title":"Context Processors","text":"<p>Context processors</p> <p>A context processor is a Python function that takes the request object as an argument and returns a dictionary that gets added to the request context. Context processors come in handy when you need to make something available globally to all templates.</p> <p>Django 4 by Example <code>pg: 363</code></p>"},{"location":"backend/django/context-processors/#other-topic","title":"Other Topic","text":"question Example 1Example 2 <p>Django mixins and context processors serve different purposes and are used in different parts of a Django application:</p> <p>For sharing common elements like headers and footers across multiple templates in Django, using context processors is typically the more appropriate approach.</p> <p>Here's why:</p> <ol> <li> <p>Scope:</p> <ul> <li>Context processors operate at the template level, meaning they affect the rendering of templates across the entire project. By using context processors, you can ensure that the header and footer data is available in every template without explicitly passing it from every view.</li> <li>Mixins, on the other hand, are used within the context of views or models. While they can encapsulate common functionality, they're not designed for injecting data into templates.</li> </ul> </li> <li> <p>Purpose:</p> <ul> <li>Context processors are specifically designed for injecting global context variables into templates. They are intended for providing data like headers, footers, site-wide settings, or user authentication status that need to be available in multiple templates.</li> <li>Mixins are used to extend the functionality of views or models. While you could potentially use mixins to share code related to rendering headers and footers, it would be less straightforward and less conventional than using context processors for this purpose.</li> </ul> </li> <li> <p>Ease of Use:</p> <ul> <li>Context processors provide a simple and consistent way to inject data into templates without requiring modification of every view function or class.</li> <li>Using mixins to achieve a similar result would involve inheritance and potentially coupling the logic for rendering headers and footers with the behavior of specific views, which can make the code less modular and harder to maintain.</li> </ul> </li> </ol> <p>Therefore, for sharing header and footer templates across all templates in your Django project, using context processors is the recommended approach. This allows you to keep your templates clean and DRY (Don't Repeat Yourself) by centralizing the header and footer logic in one place.</p>"},{"location":"backend/django/context-processors/#1-mixins","title":"1.  Mixins:","text":"<ul> <li>Mixins are classes that provide additional functionality to Django class-based views (CBVs) or models.</li> <li>They are used to encapsulate reusable pieces of code that can be mixed into multiple views or models.</li> <li>Mixins are primarily used to add common behavior, such as authentication, - permissions, or extra methods, to multiple views or models without duplicating code.</li> <li>Mixins are applied by inheriting from them in view classes or model classes.</li> <li>Mixins are typically used within the scope of handling HTTP requests and responses, allowing you to extend and customize the behavior of views or models.</li> </ul>"},{"location":"backend/django/context-processors/#2-context-processors","title":"2. Context Processors:","text":"<ul> <li>Context processors are functions that add additional data to the context of Django templates.</li> <li>They are used to inject global context variables into all templates across your Django project.</li> <li>Context processors are invoked each time a template is rendered and allow you to include dynamic data or data that is common to multiple templates without explicitly passing it from every view.</li> <li>Context processors are typically used to provide data such as user authentication status, site-wide settings, or dynamic content that needs to be available to all templates.</li> <li>Context processors operate at a higher level than mixins, influencing the rendering of templates rather than the behavior of views or models.</li> </ul> <p>In summary, mixins are used to extend the functionality of views or models by adding methods, properties, or behaviors, while context processors are used to inject additional data into the context of Django templates. Mixins are applied within the scope of views or models, while context processors affect the rendering of templates across the entire project.</p>"},{"location":"backend/django/decorator/","title":"Decorators","text":"<p>Before <code>class-based</code> views, decorators were the only way to change the behavior of <code>function-based</code> views. </p> <p>Being wrappers around a function, they cannot change the inner working of the view, and thus effectively treat them as black boxes.</p> <p>A decorator is a function that takes a function and returns the decorated function.</p> <p>Use the annotation notation <code>@</code>, as shown in the following <code>login_required</code> decorator example:</p> <pre><code>@login_required\ndef simple_view(request):\n    return HttpResponse()\n</code></pre> <p>The following code is exactly the same as the preceding:</p> <pre><code>def simple_view(request):\n    return HttpResponse()\n\nsimple_view = login_required(simple_view)\n</code></pre> <p>Decorators are less flexible than mixins. However, they are simpler. You can use both decorators and mixins in Django. In fact, many mixins are implemented with decorators.</p>"},{"location":"backend/django/django-404/","title":"django 404","text":"<p>Sure, I can guide you through how an experienced Django developer might implement a custom 404 page using class-based views. In Django, you can customize error pages like 404 (page not found), 500 (server error), etc., to match the look and feel of your website.</p> <p>Here's how you could do it using class-based views:</p> <p>Create a Custom 404 View Class: First, you'll need to create a view class for handling the 404 error. You can do this by subclassing Django's TemplateView or any other relevant class-based view. Override the get() Method: In the custom view class, override the get() method to customize what happens when the view is accessed. You can render a specific template or perform any other actions you want. Set Up URL Configuration: You'll need to wire up this custom view to the URL pattern for 404 errors in your Django project's URL configuration.</p> <p>Note</p> views.pyurls.py <pre><code>from django.views.generic import TemplateView\n\nclass Custom404View(TemplateView):\n    template_name = '404.html'  # Path to your custom 404 template\n\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        # You can add additional context data here if needed\n        return self.render_to_response(context)\n</code></pre> <pre><code>from django.urls import path\nfrom .views import Custom404View\n\n# Other URL patterns...\n\n# Define the custom 404 page URL\nurlpatterns = [\n    # Other URL patterns...\n    path('404/', Custom404View.as_view(), name='404'),\n]\n\n# or\n\nfrom django.urls import path\nfrom django.conf.urls import handler404\nfrom yourapp.views import Custom404View\n\nurlpatterns = [\n    # Your other URL patterns...\n]\n\nhandler404 = Custom404View.as_view()\n</code></pre> <p>In this configuration:</p> <ul> <li>The <code>handler404</code> setting specifies the view that Django should use when it encounters a 404 error.</li> <li>Here, we set it to <code>Custom404View.as_view()</code>, which means Django will use your custom 404 view (<code>Custom404View</code>) to render the response for 404 errors.</li> </ul>"},{"location":"backend/django/django-404/#reference","title":"Reference","text":"<ul> <li>Django 404 (page not found) :w3schools</li> </ul>"},{"location":"backend/django/django-form/","title":"django form","text":""},{"location":"backend/django/django-form/#basic","title":"Basic","text":"<p>Types of Form in Django</p> <p>1. Form</p> <p>Django Forms (<code>django.forms.Form</code>)</p> <p>2. ModelForm</p> <p>Model Forms (<code>django.forms.ModelForm</code>)</p> Django Forms library <p></p> <pre><code>#from django.forms import Form, ModelForm\n</code></pre>"},{"location":"backend/django/django-form/#the-django-forms-library","title":"The Django Forms library","text":"<p>The Django Forms library allows you to quickly define a form using a Python class. This is done by creating a <code>subclass</code> of the base <code>Django Form class</code>.</p> <ul> <li>We refer to our classes as forms, similar to how we subclass Django Models to create Model classes. </li> <li>Forms contain one or more fields of a certain type (such as text fields, number fields, or email fields). </li> <li>You\u2019ll notice this sounds like Django Models, and forms are similar to Models but use different field classes.</li> </ul> <pre><code>from django import forms\n\nclass ExampleForm(forms.Form):\n    text_input = forms.CharField()\n    password_input =\n    forms.CharField(widget=forms.PasswordInput)\n</code></pre> <p>Web Development with Django by Bharath Chandra K S - 2nd, 2023</p>"},{"location":"backend/django/django-form/#working-with-form-views","title":"Working with <code>form views</code>","text":"<p>A form view is just like any other view class, except that a form view class is designed to process and handle form objects and form submissions. </p> <p>Django offers four main form view classes, listed here:</p> <ul> <li>FormView</li> <li>CreateView</li> <li>UpdateView</li> <li>DeleteView</li> </ul> <p>These can all be found in the <code>django.views.generic.edit</code> library.</p>"},{"location":"backend/django/django-form/#advanced","title":"Advanced","text":""},{"location":"backend/django/django-form/#example","title":"Example","text":"<p>Website Contact Section</p> viewsmodelscontactcontact successurl Conf <p>In your ContactFormView in <code>form_valid()</code> method, you're trying to call <code>form.save(commit=False)</code>. But <code>commit=False</code> is used in model forms, not in regular forms. </p> <p>Since you're using a regular form, you won't have this attribute available. Here's the corrected version:</p> views.py<pre><code># contact/views.py\nfrom django.shortcuts import render, redirect\nfrom django.views.generic import FormView, TemplateView\nfrom .forms import ContactForm\nfrom .models import ContactMessage\n\nclass ContactFormView(FormView):\n    template_name = 'contacts/contact.html'\n    form_class = ContactForm\n    success_url = '/contact/success/'\n\n    def form_valid(self, form):\n        name = form.cleaned_data['name']\n        email = form.cleaned_data['email']\n        message = form.cleaned_data['message']\n\n        # Create and save ContactMessage instance\n        contact_message = ContactMessage.objects.create(name=name, email=email, message=message)\n\n        return super().form_valid(form)\n\nclass ContactSuccessView(TemplateView):\n    template_name = 'contact/contact_success.html'\n</code></pre> models.py<pre><code># contact/models.py\nfrom django.db import models\n\nclass ContactMessage(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    message = models.TextField()\n    timestamp = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n</code></pre> contact.html<pre><code>&lt;!-- contact/templates/contact/contact.html --&gt;\n&lt;form method=\"post\"&gt;\n{% csrf_token %}\n{{ form.as_p }}\n&lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> contact_success.html<pre><code>&lt;!-- contact/templates/contact/contact_success.html --&gt;\n&lt;h2&gt;Message sent successfully!&lt;/h2&gt;\n</code></pre> urls.py<pre><code># myproject/urls.py\nfrom django.urls import path\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom contact.views import ContactFormView, ContactSuccessView\n\nurlpatterns = [\n    path('contact/', ContactFormView.as_view(), name='contact'),\n    path('contact/success/', ContactSuccessView.as_view(), name='contact_success'),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</code></pre> <p>Success</p> <p>To implement the contact section in the Django admin dashboard, you need to register the <code>ContactMessage</code> model with the admin site. Here's how you can do it:</p> <pre><code>from django.contrib import admin\nfrom .models import ContactMessage\n\n@admin.register(ContactMessage)\nclass ContactMessageAdmin(admin.ModelAdmin):\n    list_display = ('name', 'email', 'message', 'timestamp')\n    search_fields = ('name', 'email', 'message')\n</code></pre> <p>In this code:</p> <ul> <li>@admin.register(ContactMessage) is a decorator that registers the <code>ContactMessage</code> model with the admin site.</li> <li><code>ContactMessageAdmin</code> is a class that inherits from <code>admin.ModelAdmin</code>, allowing you to customize the appearance and behavior of the model in the admin interface.</li> <li><code>list_display</code> specifies which fields should be displayed in the list view of contact messages in the admin interface.</li> <li><code>search_fields</code> specifies the fields by which the contact messages can be searched in the admin interface.</li> </ul> <p>With this setup, you can now access and manage contact form submissions in the Django admin dashboard. When you run your Django server and navigate to the admin site (<code>/admin</code> by default), you should see the Contact Messages section where you can view, search, and manage contact form submissions.</p>"},{"location":"backend/django/django-form/#other-topic","title":"Other Topic","text":"Registering a Model with the Django Admin Interface <p>Both admin.site.register(ContactMessage) and @admin.register(ContactMessage) are used to register a model with the Django admin interface, but they differ in syntax and usage style. Here's a breakdown of each:</p> 1. Old Approach2. Decorator Approachdecorator <p>1. admin.site.register(ContactMessage):</p> <p>This method is the traditional way of registering models with the Django admin interface. It's used by directly accessing the <code>site</code> attribute of the <code>admin</code> module. This method is still perfectly valid and widely used, especially in older Django projects or when registering multiple models.</p> python<pre><code>from django.contrib import admin\nfrom .models import ContactMessage\n\nadmin.site.register(ContactMessage)\n</code></pre> <p>2. @admin.register(ContactMessage):</p> <p>This method is a decorator-based approach introduced in Django 1.7. It provides a more convenient and readable way to register models with the admin interface. It's generally preferred for its clarity and brevity, especially for registering a single model.</p> python<pre><code>from django.contrib import admin\nfrom .models import ContactMessage\n\n@admin.register(ContactMessage)\nclass ContactMessageAdmin(admin.ModelAdmin):\n    # Customization for the admin interface\n    pass\n</code></pre> <ul> <li>@admin.register(ModelName)</li> <li>@admin.display()</li> <li>@admin.action()</li> <li>@admin.fieldsets()</li> </ul> <p>Both methods achieve the same result of registering the <code>ContactMessage</code> model with the admin interface. The choice between them often comes down to personal preference, team conventions, and the complexity of your project.</p> <p>For simple cases, where you're just registering a model without any additional customization, the @admin.register() decorator provides a concise and clear syntax. However, if you have more complex customization needs or if you're registering multiple models, using admin.site.register() might be more appropriate.</p> <p>To disable or hide the add button in admin dashboard</p> python<pre><code>from django.contrib import admin\nfrom .models import ContactMessage\n\nclass ContactMessageAdmin(admin.ModelAdmin):\n    # Customize the admin interface for ContactMessage model\n    def has_add_permission(self, request):\n        # Disable the ability to add new contacts\n        return False\n\n# Register the ContactMessage model with the customized admin interface\nadmin.site.register(ContactMessage, ContactMessageAdmin)\n</code></pre> <p>This approach ensures that users cannot add new contacts via the admin interface while still allowing them to view and manage existing contact entries. Adjust the code as needed to fit your specific requirements and project structure.</p> <p>{{ form.as_p }}</p> BasicIntermediateAdvanced <pre><code>&lt;form method=\"post\"&gt;\n    {% csrf_token %}\n    {{ form.as_p }}\n    &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>In Django templates, {{ form.as_p }} is a shortcut for rendering each form field as a paragraph (</p><p> element). Each form field label and input element pair will be wrapped in a </p><p> tag. This is a simple way to render a form in HTML.</p> <p>If you want to use Bootstrap for styling your form, you can integrate Bootstrap classes directly into your template. Here's how you can modify your template to use Bootstrap classes for layout:</p> <pre><code>&lt;div class=\"col-md-12\"&gt;\n    &lt;h5&gt;Contact&lt;/h5&gt;\n    &lt;form method=\"post\" class=\"form\"&gt;\n        {% csrf_token %}\n        &lt;div class=\"form-group\"&gt;\n            {{ form.name.label_tag }}\n            {{ form.name }}\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            {{ form.email.label_tag }}\n            {{ form.email }}\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            {{ form.message.label_tag }}\n            {{ form.message }}\n        &lt;/div&gt;\n        &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre> <p>In this modified template:</p> <ul> <li>Each form field is wrapped in a  element with the class <code>form-group</code>, which is a Bootstrap class used for styling form elements. <li>The form label (<code>{{ form.field.label_tag }}</code>) and input element (<code>{{ form.field }}</code>) are placed within the same form-group div.</li> <li>The submit button is styled using Bootstrap's <code>btn</code> and <code>btn-primary</code> classes to make it a Bootstrap-styled button.</li> <p>This layout adheres to Bootstrap's styling conventions and ensures that your form is styled consistently with the rest of your Bootstrap-based website. Adjust the classes and styling as needed to fit your specific design requirements.</p> <pre><code>&lt;form method=\"post\"&gt;\n    {% csrf_token %}\n\n    &lt;div class=\"mb-3\"&gt;\n        {{ form.name.label_tag }}\n        &lt;input type=\"{{ form.name.field.widget.input_type }}\" name=\"{{ form.name.html_name }}\" id=\"{{ form.name.id_for_label }}\" class=\"form-control\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        {{ form.email.label_tag }}\n        &lt;input type=\"{{ form.email.field.widget.input_type }}\" name=\"{{ form.email.html_name }}\" id=\"{{ form.email.id_for_label }}\" class=\"form-control\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        {{ form.message.label_tag }}\n        &lt;textarea name=\"{{ form.message.html_name }}\" id=\"{{ form.message.id_for_label }}\" class=\"form-control\"&gt;&lt;/textarea&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> </li></ul> <p>Danger</p> <p>Q: Can't save a form in Django (object has no attribute 'save')</p> <p>A: save is available only for <code>ModelForm</code> by default, not for <code>forms.Form</code></p> <p>Example</p> htmlContactForm classform_class <pre><code>&lt;!-- Render the contact form --&gt;\n&lt;form method=\"post\"&gt;\n    {% csrf_token %}\n    {{ form.as_p }}\n    &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> views.py<pre><code>from django.views.generic import TemplateView\nfrom .forms import ContactForm\n\nclass ContactIndexView(TemplateView):\n    template_name = 'index.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        # Include an instance of your form in the context\n        context['form'] = ContactForm()\n        return context\n</code></pre> views.py<pre><code>from django.views.generic import TemplateView\nfrom .forms import ContactForm\n\nclass ContactIndexView(TemplateView):\n    template_name = 'index.html'\n    # Add this line to reference the form class\n    form_class = ContactForm\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n\n        # Include an instance of your form in the context\n        context['form'] = self.form_class()\n\n        return context\n</code></pre> <p><code>TemplateView</code> and <code>FormView</code></p> <p>TemplateView and FormView are both <code>class-based views</code> provided by Django, but they serve different purposes.</p> <p>TemplateView:</p> <ul> <li>TemplateView is used when you want to display a template without any form processing involved.</li> <li>It's typically used for rendering static content or content that doesn't require any data processing or form submissions.</li> <li>It doesn't handle form submissions or provide methods for processing form data.</li> <li>You can use TemplateView to render templates and pass context data to the template, but it doesn't include any form handling logic.</li> </ul> <p>FormView:</p> <ul> <li>FormView is used when you want to display a form, process submitted form data, and handle form validation.</li> <li>It's designed to handle form submissions, validate form data, and perform actions based on the form submission, such as saving data to a database.</li> <li>It provides built-in methods for handling form submission (<code>form_valid()</code> and <code>form_invalid()</code>), which allow you to define custom logic for what happens when the form is submitted successfully or contains errors.</li> <li>FormView typically works with Django forms (<code>django.forms.Form</code> or <code>django.forms.ModelForm</code>) and is suitable for scenarios where you need to handle form submissions and perform form validation.</li> </ul> <p>In your case, if the form is displaying correctly with FormView but not with <code>TemplateView</code>, it suggests that there might be an issue with how you're setting up the TemplateView or how you're including the form in the template. Make sure that the ContactForm instance is correctly included in the context of the <code>TemplateView</code> and that the template is rendering the form properly. If the form is not displaying with <code>TemplateView</code>, it might indicate that the form instance is not being passed to the template context correctly or that there might be an issue with the template rendering logic.</p> Mixins Approach 1Approach 2 <p>To display the <code>ContactFormView</code> form in both <code>contacts/contact.html</code> and <code>index.html</code>, you have a couple of options. One common approach is to reuse the same view class (<code>ContactFormView</code>) for both URLs, but specify different template names for each URL pattern. Here's how you can achieve this:</p> viewurlscontacts/contact.htmlindex html views.py<pre><code>from django.urls import reverse_lazy\nfrom django.views.generic import FormView\nfrom .forms import ContactForm\nfrom .models import ContactMessage\n\nclass ContactFormView(FormView):\n    template_name = 'contacts/contact.html'\n    form_class = ContactForm\n    success_url = reverse_lazy('contact_success')\n\n    def form_valid(self, form):\n        name = form.cleaned_data['name']\n        email = form.cleaned_data['email']\n        message = form.cleaned_data['message']\n\n        # Create and save ContactMessage instance\n        contact_message = ContactMessage.objects.create(name=name, email=email, message=message)\n\n        self.request.session.pop('form_data', None)\n\n        return super().form_valid(form)\n</code></pre> urls.py<pre><code>from django.urls import path\nfrom .views import ContactFormView\n\nurlpatterns = [\n    path('contact/', ContactFormView.as_view(), name='contact'),\n    path('', ContactFormView.as_view(template_name='index.html'), name='index'),\n]\n</code></pre> contact.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Contact Form&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Contact Form&lt;/h1&gt;\n    &lt;form method=\"post\"&gt;\n        {% csrf_token %}\n        {{ form.as_p }}\n        &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Index&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Index Page&lt;/h1&gt;\n    &lt;p&gt;This is the index page.&lt;/p&gt;\n\n    &lt;!-- Include the same contact form here --&gt;\n    &lt;form method=\"post\"&gt;\n        {% csrf_token %}\n        {{ form.as_p }}\n        &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Another approach to displaying the same form in multiple templates while keeping your views DRY (Don't Repeat Yourself) is by using a mixin. Mixins allow you to share common functionality among different views.</p> viewsurl views.py<pre><code>from django.views.generic.edit import FormMixin\nfrom .forms import ContactForm\n\nfrom django.urls import reverse_lazy\nfrom django.views.generic import TemplateView\nfrom .models import ContactMessage\n\nclass ContactFormMixin(FormMixin):\n    form_class = ContactForm\n    success_url = reverse_lazy('contact_success')\n    template_name = 'contacts/contact.html'\n\n    def form_valid(self, form):\n        name = form.cleaned_data['name']\n        email = form.cleaned_data['email']\n        message = form.cleaned_data['message']\n\n        # Create and save ContactMessage instance\n        contact_message = ContactMessage.objects.create(name=name, email=email, message=message)\n\n        self.request.session.pop('form_data', None)\n\n        return super().form_valid(form)\n\nclass ContactFormView(ContactFormMixin, FormView):\n    pass\n\nclass ContactSuccessView(TemplateView):\n    template_name = 'contacts/contact_success.html'\n\nclass IndexView(ContactFormMixin, TemplateView):\n    template_name = 'index.html'\n</code></pre> urls.py<pre><code>from django.urls import path\nfrom .views import ContactFormView, ContactSuccessView, IndexView\n\nurlpatterns = [\n    path('', IndexView.as_view(), name='index'),\n    path('contact/', ContactFormView.as_view(), name='contact'),\n    path('contact/success/', ContactSuccessView.as_view(), name='contact_success'),\n]\n</code></pre> <p>project <code>vs</code> apps <code>guidelines</code></p> <p>Defining URL patterns in Django involves organizing them in a structured manner, both at the project level and the app level. Here are some guidelines and best practices for managing project URLs and app URLs:</p> Project URLs:App URLs: <p>1. Use <code>include()</code> for App URLs: Use Django's <code>include()</code> function to include URLs from individual apps in your project's <code>urls.py</code>. This keeps the project URLs modular and allows you to organize them by functionality.</p> python<pre><code>from django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('myapp/', include('myapp.urls')),\n    # Other app URLs included here\n]\n</code></pre> <p>2.Prefix App URLs: Prefix URLs for each app with a common path to avoid conflicts and provide clarity. For example, if you have an app for managing contacts, prefix its URLs with <code>contacts/</code>.</p> <p>1. Use Namespaced URLs: Use namespaced URLs within your app to avoid conflicts with other apps. Define a unique app_name in your app's <code>urls.py</code> and use it to namespace your URLs.</p> urls.py<pre><code>app_name = 'myapp'\n\nurlpatterns = [\n    path('some-url/', views.some_view, name='some_view'),\n    # Other URLs...\n]\n</code></pre> <p>2. Group URLs by Functionality: Organize URLs within your app's <code>urls.py</code> based on their functionality or resource. For example, group all user-related URLs together, all product-related URLs together, etc.</p> <p>3. Use Class-based Views: Prefer using <code>class-based views</code> over <code>function-based views</code> as they provide better code organization and reuse. Use as_view() to convert class-based views to callable views in your URL patterns.</p> <p>General Tips:</p> <ul> <li> <p>Comments and Documentation: Add comments and documentation to your URLs to explain their purpose, especially if the project is complex or involves multiple developers.</p> </li> <li> <p>Consistency: Maintain consistency in URL naming conventions, URL structure, and URL organization across your project. Consistency makes it easier to understand and navigate the codebase.</p> </li> <li> <p>Avoid Hardcoding URLs: Use Django's <code>reverse()</code> or <code>reverse_lazy()</code> functions to reverse-resolve URLs instead of hardcoding them. This makes your code more robust and easier to maintain if URLs change in the future.</p> </li> <li> <p>Keep URLs Concise and Descriptive: Use concise yet descriptive URLs that clearly convey the purpose of the resource or view being accessed.</p> </li> </ul> <p>By following these guidelines and best practices, you can effectively manage and organize your project URLs, making your codebase more maintainable and understandable.</p> What is Namespace URLS in <code>django</code> apps <p>Namespaced URLs in Django allow you to organize URLs within your app and avoid conflicts with URLs from other apps. Here's what it means and how to use it:</p> <p>What are Namespaced URLs?</p> <p>In Django, a namespace is a way to group a set of URL patterns under a common name. This is particularly useful when you have multiple apps in your project, each with its own set of URL patterns. By namespacing the URLs, you can ensure that URLs from different apps don't clash with each other. How to Use Namespaced URLs?</p> <p>To use namespaced URLs, you need to follow these steps:</p> <p>1. Define an app_name in <code>urls.py</code>: In your app's <code>urls.py</code> file, define an <code>app_name</code> variable to specify the namespace for the URLs in that app.</p> python<pre><code>app_name = 'myapp'\n</code></pre> <p>2. Specify Namespaced URLs: When defining URL patterns in your app's <code>urls.py</code>, use the <code>app_name</code> specified earlier as the namespace for the URLs.</p> python<pre><code>from django.urls import path\nfrom . import views\n\napp_name = 'myapp'\n\nurlpatterns = [\n    path('some-url/', views.some_view, name='some_view'),\n    # Other URLs...\n]\n</code></pre> <p>3. Referencing Namespaced URLs: When referencing URLs in templates or views, use the <code>{% url %}</code> template tag or <code>reverse()</code> function, specifying the namespace along with the URL name.</p> <ul> <li>Using the <code>{% url %}</code> template tag:</li> </ul> html<pre><code>&lt;a href=\"{% url 'myapp:some_view' %}\"&gt;Some View&lt;/a&gt;\n</code></pre> <ul> <li>Using the <code>reverse()</code> function in views:</li> </ul> python<pre><code>from django.urls import reverse\n\nurl = reverse('myapp:some_view')\n</code></pre> <p>When to Use Namespaced URLs?</p> <p>Namespaced URLs are particularly useful when:</p> <ul> <li>You have multiple apps in your Django project.</li> <li>Your project structure involves reusable apps that can be used in different projects.</li> <li>You want to organize URLs within each app and avoid conflicts between URL names.</li> </ul> <p>Namespaced URLs help keep your codebase organized, maintainable, and less error-prone, especially in larger projects with multiple apps. They also provide a clear and concise way to reference URLs within templates and views.</p> <p>Warning</p> <pre><code>from django.shortcuts import redirect\n\nclass IndexView(TemplateView):\n    template_name = 'index.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['form'] = ContactForm()\n        return context\n\n    def post(self, request, *args, **kwargs):\n        form = ContactForm(request.POST)\n        if form.is_valid():\n            name = form.cleaned_data['name']\n            email = form.cleaned_data['email']\n            message = form.cleaned_data['message']\n            contact_message = ContactMessage.objects.create(name=name, email=email, message=message)\n            # Redirect to contact success URL\n            return redirect('contact_success')\n        return render(request, self.template_name, {'form': form})\n</code></pre> <p>Bugs</p> <p>In the ContactIndexView, context['form'] = ContactForm() and context['contact_messages'] = ContactMessage.objects.all() are two separate lines that serve different purposes:</p> <ul> <li> <p>context['form'] = ContactForm(): This line creates an instance of the ContactForm class and assigns it to the key <code>form</code> in the context dictionary. This form instance will be used in the template to render the contact form.</p> </li> <li> <p>context['contact_messages'] = ContactMessage.objects.all(): This line fetches all instances of the ContactMessage model using <code>ContactMessage.objects.all()</code> and assigns them to the key <code>contact_messages</code> in the context dictionary. These contact messages will be used in the template to display the existing messages.</p> </li> </ul> <p>In summary:</p> <p><code>context['form']</code> is used to pass a form instance to the template for rendering the form.</p> <p><code>context['contact_messages']</code> is used to pass a queryset of ContactMessage instances to the template for displaying existing messages.</p> <p>Both are important for rendering the complete view in the template: the form for users to submit new messages and the existing messages for users to view.</p> <p>Danger</p> <p>Whether to use the model or the form in the context depends on what you want to achieve in your view and template.</p> <p>Here's a breakdown:</p> <p>1. Model (ContactMessage.objects.all()):</p> <ul> <li>If you want to display existing contact messages in your template, you would typically use the model queryset (ContactMessage.objects.all()). This allows you to access all instances of the <code>ContactMessage model</code> from your database.</li> <li>You would use the model queryset to iterate over existing messages and display them in your template.</li> </ul> <p>2.Form (ContactForm()):</p> <ul> <li>If you want to include a form in your template for users to submit new contact messages, you would use the form instance (<code>ContactForm()</code>).</li> <li>You would use the form instance to render the form fields in your template and handle user input (<code>submission</code>) when the form is submitted.</li> </ul> <p>In most cases, you would want to include both the model queryset and the form in your context:</p> <ul> <li>Use the model queryset to display existing messages.</li> <li>Use the form instance to render the form for users to submit new messages.</li> </ul> <p>This allows your template to provide both functionalities: displaying existing messages and enabling users to submit new messages.</p> <p>Here's how you might include both in your view:</p> <pre><code>class ContactIndexView(TemplateView):\ntemplate_name = 'index.html'\n\ndef get_context_data(self, **kwargs):\n    context = super().get_context_data(**kwargs)\n    context['form'] = ContactForm()  # Form for user submission\n    context['contact_messages'] = ContactMessage.objects.all()  # Existing messages\n    return context\n</code></pre> <p>And in your template, you would use <code>{{ form }}</code> to render the form fields and iterate over <code>{{ contact_messages }}</code> to display existing messages.</p>"},{"location":"backend/django/django-form/#reference","title":"Reference","text":""},{"location":"backend/django/django-mail/","title":"django mail","text":""},{"location":"backend/django/django-mail/#django-email-configuration","title":"Django Email Configuration","text":"<p>Django is a Python-based web framework that allows more control for sending emails using functions and expressions.</p> settings.py<pre><code>EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_USE_TLS = True\nEMAIL_PORT = 587\nEMAIL_HOST_USER = #sender's email-id\nEMAIL_HOST_PASSWORD = #password associated with above email-id\n</code></pre>"},{"location":"backend/django/django-mail/#less-secure-apps-gmail","title":"Less Secure apps gmail","text":"<ol> <li>Go to myaccount.google.com</li> <li>Go to security, ande enable 2FA</li> <li>If the App Password is not shown inside the 2FA, then</li> <li>Search App Password in the search bar</li> <li>Select the App Password and created a new app password.</li> <li>Finally you can see the App Password visible inside the Security.</li> </ol>"},{"location":"backend/django/django-mail/#reference","title":"Reference","text":"<ul> <li>setup-sending-email-in-django-project</li> <li>creating-google-app-password-for-django-project</li> </ul>"},{"location":"backend/django/django-middleware/","title":"django middleware","text":"<p>Middleware is a framework of hooks into Django\u2019s request/response processing. It\u2019s a light, low-level \u201cplugin\u201d system for globally altering Django\u2019s input or output.</p> Note"},{"location":"backend/django/django-middleware/#a-primer-on-middlewares","title":"A Primer on Middlewares","text":"<p>Middlewares are one of the core concepts of Django. Just like ogres and onions, Django also has layers that your request and response goes through when they enter and exit your application. The centerpiece of this layered system is the view function and the class based view itself. Consider Figure 2-6.</p> <p></p> <p>Here you can see that when a request comes into your application, it enters the various middleware layers that can do plenty of things with them. A couple of examples for middlewares:</p>"},{"location":"backend/django/django-middleware/#authenticationmiddleware","title":"AuthenticationMiddleware:","text":"<p>Ensures that the request.user object exists and you can access it. If the user is logged in then it will be populated with the user object. If not, then an anonymous user will be sitting on this attribute. Oftentimes it is sery convenient to subclass this middleware and extend it with other user related data, such as from the UserProfile which we mentioned earlier.</p>"},{"location":"backend/django/django-middleware/#securitymiddleware","title":"SecurityMiddleware:","text":"<p>Provides various security related features, such as HTTPS redirects, redirect blocking, xss protection.</p>"},{"location":"backend/django/django-middleware/#commonmiddleware","title":"CommonMiddleware:","text":"<p>Provides some basic functionalities that are chores to implement. Such as sending away banned user-agents and making sure that the URL ends with a slash.</p> <p>As you can see, middlewares have a wide variety of uses, be cautious with what you put in the codebase of a middleware, though. Since all requests in your service will enter that middleware, computation intensive and network operations might slow down your application significantly.</p>"},{"location":"backend/django/django-middleware/#redirect-authenticated-users","title":"Redirect Authenticated Users","text":"<p>Yes, it is generally a good practice to redirect users away from the login and signup pages if they are already authenticated (logged in). This practice ensures a better user experience and aligns with common usability patterns across web applications.</p>"},{"location":"backend/django/django-middleware/#reasons-to-redirect-authenticated-users","title":"Reasons to Redirect Authenticated Users:","text":"<ul> <li> <p>Avoid Confusion: Users who are already logged in might be confused if they land on a login or signup page again. They might wonder if they've been logged out or if there's a problem with their session.</p> </li> <li> <p>Security: Prevents authenticated users from performing unnecessary actions that don't apply to them, such as attempting to log in again or sign up for a new account.</p> </li> <li> <p>Simplifies Navigation: Keeps navigation straightforward by presenting relevant options based on the user's current authentication status. For example, redirecting them to a dashboard, profile page, or the main application interface.</p> </li> </ul>"},{"location":"backend/django/django-middleware/#how-to-implement-redirects-in-django","title":"How to Implement Redirects in Django:","text":"<p>In Django, you can handle redirection in several ways:</p> <p>Tip</p> Middleware Approach (Recommended):Views Approach: <p>Create a middleware to redirect authenticated users away from the login and signup pages.</p> middleware.py<pre><code>from django.conf import settings\nfrom django.shortcuts import redirect\nfrom django.urls import reverse\n\nclass RedirectIfAuthenticatedMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        if request.user.is_authenticated:\n            if request.path in [reverse('login'), reverse('signup')]:\n                return redirect(settings.LOGIN_REDIRECT_URL)  # Redirect to desired URL after login\n        response = self.get_response(request)\n        return response\n</code></pre> <p>Ensure to include this middleware in your Django settings:</p> settings.py<pre><code>MIDDLEWARE = [\n    # Other middleware...\n    'yourapp.middleware.RedirectIfAuthenticatedMiddleware',\n    # Other middleware...\n]\n</code></pre> views.py<pre><code>from django.shortcuts import redirect\nfrom django.urls import reverse\n\ndef login_view(request):\n    if request.user.is_authenticated:\n        return redirect(reverse('home'))  # Replace 'home' with your desired redirect URL\n    # Handle login logic...\n\ndef signup_view(request):\n    if request.user.is_authenticated:\n        return redirect(reverse('home'))  # Replace 'home' with your desired redirect URL\n    # Handle signup logic...\n</code></pre> <p>Summary:</p> <ul> <li>Middleware: Recommended for global rules and ensuring consistency across the application. Suitable for enforcing authentication-related policies universally.</li> <li>Views: Provide flexibility and granularity for specific redirection logic within individual views. Useful for scenarios where different views require unique handling based on context.</li> </ul> <p>Breakdown</p> <ol> <li> <p>Constructor (<code>__init__</code> method):</p> <ul> <li>get_response: This parameter is a function that will be called with the request to get the response. It's used to handle the request further down the middleware chain or to the view.</li> </ul> </li> <li> <p><code>__call__</code> method:</p> <ul> <li>This method allows the class instance to be callable like a function, making it a middleware. It takes <code>request</code> as an argument.</li> </ul> </li> <li> <p>Logic Explanation:</p> <ul> <li>Authenticated Check: if request.user.is_authenticated: checks if the user is logged in.</li> <li>Path Check: if request.path in [reverse('login'), reverse('signup')] checks if the current request path is either the login or signup page.</li> <li>Redirect: If both conditions are met (user is authenticated and the path is <code>login/signup</code>), <code>redirect(settings.LOGIN_REDIRECT_URL)</code> redirects the user to the URL specified in <code>settings.LOGIN_REDIRECT_URL</code>.</li> <li>Pass-through: If the user is not authenticated or is visiting a different path, self.get_response(request) allows the request to continue through the middleware chain and eventually to the view.</li> </ul> </li> </ol> <p>Package-Level Initialization</p> <p><code>__init__.py</code> indicates that the directory should be treated as a package. </p> ExamplePackage Versioning and Metadata <pre><code># mypackage/__init__.py\nfrom .module1 import ClassA\nfrom .module2 import function_b\n</code></pre> <p>This allows users to do:</p> <pre><code>from mypackage import ClassA, function_b\n</code></pre> <p>instead of:</p> <pre><code>from mypackage.module1 import ClassA\nfrom mypackage.module2 import function_b\n</code></pre> <p><code>__init__.py</code> can be used to store package metadata, such as version information. For example:</p> <pre><code># mypackage/__init__.py\n__version__ = \"1.0.0\"\n__author__ = \"Your Name\"\n</code></pre>"},{"location":"backend/django/django-middleware/#separate-logout-urls-for-admin-and-user-accounts","title":"Separate Logout URLs for Admin and User Accounts","text":"<p>Abstract</p> <ol> <li> <p>Admin Logout</p> <p>For the Django admin interface, the logout behavior is handled internally by Django's admin site. By default, the admin logout URL is <code>/admin/logout/</code>. You typically don't need to customize this unless you have specific requirements.</p> </li> <li> <p>User Accounts Logout</p> <p>For user accounts, you can define a separate logout URL (<code>/accounts/logout/</code>) and implement custom logout views for additional functionalities or redirects.</p> </li> </ol> Implementation Steps <ol> <li> <p>Define Admin Logout URL</p> <p>Django admin handles admin logout internally. Users are redirected to <code>/admin/logout/</code> by default. You generally do not need to modify this behavior unless you have specific requirements.</p> </li> <li> <p>Define User Accounts Logout URL</p> <p>Define a custom URL pattern for user logout (<code>/accounts/logout/</code>) in your Django project's urls.py:</p> myproject/urls.py<pre><code>from django.urls import path\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = [\n    # Admin URLs\n    path('admin/', admin.site.urls),\n\n    # User Accounts URLs\n    path('accounts/logout/', auth_views.LogoutView.as_view(), name='logout'),\n    path('accounts/profile/', ProfileView.as_view(), name='profile'),\n    path('accounts/signup/', SignupView.as_view(), name='signup'),\n    path('accounts/', include('django.contrib.auth.urls')),\n\n    # other app URLs\n]\n</code></pre> <ul> <li>Use LogoutView.as_view() provided by Django's authentication views (<code>django.contrib.auth.views</code>) to handle user logout. This view takes care of logging the user out and can also handle custom redirects or actions if needed.</li> </ul> </li> <li> <p>Customize User Logout Behavior (Optional)</p> <p>If you need to customize the logout behavior for user accounts (e.g., redirecting to a specific page after logout), you can subclass LogoutView and override its behavior:</p> views.py<pre><code>from django.contrib.auth.views import LogoutView\nfrom django.urls import reverse_lazy\nfrom django.shortcuts import redirect\n\nclass CustomLogoutView(LogoutView):\n    def get_next_page(self):\n        # Customize the redirect URL after logout\n        return reverse_lazy('home')  # Example: Redirect to home page after logout\n</code></pre> <p>Then, use <code>CustomLogoutView.as_view()</code> in your URL configuration:</p> urls.py<pre><code>path('accounts/logout/', CustomLogoutView.as_view(), name='logout'),\n</code></pre> </li> <li> <p>Update LOGOUT_REDIRECT_URL Setting</p> <p>In your Django project's <code>settings.py</code>, specify where users should be redirected after logging out from user accounts:</p> settings.py<pre><code>LOGOUT_REDIRECT_URL = '/accounts/login/'  # Example: Redirect to login page after logout\n</code></pre> </li> </ol> <p>Abstract</p>"},{"location":"backend/django/django-middleware/#benefits-of-separate-logout-urls","title":"Benefits of Separate Logout URLs","text":"<ul> <li> <p>Role-Based Navigation: Provides a clear distinction between logout actions for admin users and regular users, aligning with their respective roles and permissions.</p> </li> <li> <p>Customization Flexibility: Allows customization of logout behavior and redirects based on specific user roles or application requirements.</p> </li> <li> <p>Security and User Experience: Enhances security by ensuring users are redirected appropriately after logging out, improving overall user experience and system usability.</p> </li> </ul> <p>By following these practices, you can effectively manage and customize logout functionalities for admin users and regular users in your Django application, ensuring a clear and intuitive user experience tailored to different user roles.</p>"},{"location":"backend/django/django-middleware/#reference","title":"Reference","text":"<ul> <li>Django Middleware</li> <li>Designing Microservices with Django by Akos Hochrein</li> </ul>"},{"location":"backend/django/django-model/","title":"django model (orm)","text":""},{"location":"backend/django/django-model/#models-relations-inheritance","title":"Models, Relations, &amp; Inheritance","text":""},{"location":"backend/django/django-model/#django-models","title":"Django Models","text":"<p>In Django, the model is the object mapped to the database.</p> picture <p></p> <p><code>Book</code> : Mastering Django by Nigel George - 2022</p> Supported Databases <p><code>Django 3.0</code> and higher officially supports five databases:</p> <ul> <li>PostgreSQL</li> <li>MySQL</li> <li>SQLite</li> <li>Oracle</li> <li>MariaDB</li> </ul> <p>There are also several third-party applications available if you need to connect to an unofficially supported database.</p>"},{"location":"backend/django/django-model/#model","title":"Model","text":""},{"location":"backend/django/django-model/#working-with-model-field-relationships","title":"Working with model field relationships","text":"<p>Django provides three relationship types for linking tables:</p> <ul> <li>Many\u2013to\u2013one</li> <li>Many\u2013to\u2013many</li> <li>One\u2013to\u2013one</li> </ul> <p>A <code>many-to-one</code> relationship is defined by using a <code>ForeignKey</code> field, and the other two relationship types are defined using the self-explanatory <code>ManyToManyField</code> and <code>OneToOneField</code>. These fields are named appropriately after the relationship type that they represent.</p> <p>The three field types \u2014 <code>ForeignKey</code>, <code>ManyToManyField</code>, and <code>OneToOneField</code>.</p> ForeignKeyForeignKeyManyToManyField <pre><code># /becoming_a_django_entdev/chapter_3/models.py\n...\nclass Vehicle(models.Model):\n    ...\n    vehicle_model = models.ForeignKey(\n        VehicleModel,\n        on_delete = models.CASCADE,\n        verbose_name = 'Model',\n        related_name = 'model_vehicle',\n        blank = True,\n        null = True,\n    )\n    engine = models.ForeignKey(\n        Engine,\n        on_delete = models.CASCADE,\n        verbose_name = 'Engine',\n        related_name = 'engine_vehicle',\n        blank = True,\n        null = True,\n    )\n</code></pre> <pre><code># /becoming_a_django_entdev/chapter_3/models.py\n...\nclass Engine(models.Model):\n    ...\n    vehicle_model = models.ForeignKey(\n        VehicleModel,\n        on_delete = models.CASCADE,\n        verbose_name = 'Model',\n        related_name = 'model_engine',\n        blank = True,\n        null = True,\n    )\n</code></pre> <pre><code># /becoming_a_django_entdev/chapter_3/models.py\n...\nclass Seller(models.Model):\n    name = models.CharField(\n        verbose_name = 'Seller Name',\n        max_length = 150,\n        blank = True,\n        null = True,\n    )\n    vehicle = models.ManyToManyField(\n        Vehicle,\n        verbose_name = 'Vehicles',\n        related_name = 'vehicle_sellers',\n        related_query_name = 'vehicle_seller',\n        blank = True,\n    )\n</code></pre>"},{"location":"backend/django/django-model/#customizing-models","title":"Customizing models","text":"<p>Writing methods</p> <p>Writing a model method is similar to writing a Meta subclass, except instead of writing a class, we are now writing a function inside that class using the <code>def</code> keyword.</p> <p>The four most helpful and most used methods are defined here:</p> <ul> <li><code>def save(self, *args, **kwargs)</code></li> <li><code>def delete(self, *args, **kwargs)</code></li> <li><code>def get_absolute_url(self)</code></li> <li><code>def __str__(self)</code></li> </ul>"},{"location":"backend/django/django-model/#decorators","title":"Decorators","text":"<p>A decorator is a standard Python design pattern that allows developers to extend the functionality of an object without permanently changing the behavior of that object. The concept of decorators can be applied to virtually any class or method that exists in a project.</p> <ul> <li> <p><code>@property</code></p> <p>A @property decorator allows us to write a method to act as a regular property of a model instance, rather than act as a function. </p> </li> </ul>"},{"location":"backend/django/django-model/#extending-models","title":"Extending models","text":"<p>Extending a model is a way to write a set of fields and methods that can be shared in many different classes. This is also known as inheritance, which is a fundamental principle of the Python language, letting us write code once and reuse it over and over again. It is also a way to reuse or modify a class provided by Django itself, such as the built-in User model, which is a very common model to extend.</p>"},{"location":"backend/django/django-model/#using-the-django-shell","title":"Using the Django shell","text":""},{"location":"backend/django/django-model/#generating-a-secret_key-variable","title":"Generating a SECRET_KEY variable","text":"<p>A <code>SECRET_KEY</code> variable in Django is used as a hash to secure things, such as your <code>sessions</code>, <code>cookie storage</code>, <code>password tokenization</code>, and all other methods of cryptographic signing that act to secure your site. Instead of using an online tool to generate this key, where the transmission either to or from that source could be compromised, you could generate your own using the Django shell.</p> <pre><code>$ python3 manage.py shell\n$ from secret_key_generator import secret_key_generator\n$ print(secret_key_generator.generate())\n</code></pre>"},{"location":"backend/django/django-model/#using-the-meta-subclass","title":"Using the Meta subclass","text":"<p>Model metadata is an inner class of a model called Meta. </p> <p>It is not required and completely optional but it does make using Django much more useful when it is included in your models. Metadata provides all of the \"other\" information that is not defined in model field arguments. The settings that are defined inside this class are called meta options, and there are quite a lot to choose from.</p> <pre><code>from django.db import models\n\nclass MyModel(models.Model):\n    # Model fields here\n\n    class Meta:\n        verbose_name = \"Custom Singular Name\"\n        verbose_name_plural = \"Custom Plural Name\"\n        ordering = ['field1', '-field2']\n        unique_together = ['field1', 'field2']\n        indexes = [\n            models.Index(fields=['field1'], name='field1_idx'),\n            models.Index(fields=['field2'], name='field2_idx'),\n        ]\n        permissions = [\n            ('can_view', 'Can view records'),\n            ('can_edit', 'Can edit records'),\n        ]\n</code></pre> <p>Django <code>auto_now</code> vs <code>auto_now_add</code></p> <p>In Django, auto_now and auto_now_add are options for DateTimeField and DateField fields in models. They are used to automatically set the field to the current date and time when an object is created or updated. Here's the difference between the two:</p> <p>1. auto_now: When this option is set to <code>True</code>, the field will be updated with the current date and time every time the model's save() method is called. This means that the field will always reflect the most recent time the object was saved to the database.</p> <p>2. auto_now_add: When this option is set to <code>True</code>, the field will be set to the current date and time when the object is first created, and it will not be updated subsequently. This is useful for fields that should have a fixed creation timestamp.</p> <p>Here's an example of how they can be used in a Django model:</p> <pre><code>from django.db import models\n\nclass MyModel(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    # Other fields...\n</code></pre> <p>In this example, <code>created_at</code> will be set to the current timestamp when an instance of MyModel is created, and <code>updated_at</code> will be updated with the current timestamp every time the instance is saved.</p> <p>When to use <code>auto_now</code> and <code>auto_now_add</code> depends on the specific requirements of your application:</p> <ul> <li> <p>Use auto_now_add when you want to record the time when an object was created and you don't want this field to be updated later.</p> </li> <li> <p>Use auto_now when you want to keep track of the last time an object was updated.</p> </li> </ul> <p>However, there are situations where you might not want to use these options:</p> <ul> <li> <p>Avoid using <code>auto_now</code> and <code>auto_now_add</code> if you need to manually set these fields in some cases. For example, if you're importing data and need to set specific creation or update timestamps, using these options will override your manual settings.</p> </li> <li> <p>Avoid using <code>auto_now</code> if you have cases where you want to update other fields without updating the timestamp field.</p> </li> </ul> <p>In summary, <code>auto_now</code> and <code>auto_now_add</code> are useful shortcuts for handling timestamp fields in Django models, but you should consider your application's specific requirements and potential edge cases when deciding whether to use them.</p> Example of auto_now and auto_add_now <p>In a typical blog model scenario, you would want to record both the creation date of the blog post and the last modification date. For this purpose, you can use both auto_now_add and auto_now options for DateTimeField.</p> <p>Here's how you might implement it:</p> <pre><code>from django.db import models\n\nclass Blog(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n</code></pre> <p>In this model:</p> <ul> <li><code>created_at</code> will automatically store the date and time when the blog post is first created.</li> <li><code>updated_at</code> will automatically update to the current date and time whenever the blog post is saved.</li> </ul> <p>This setup ensures that you have both the creation date and the last modification date stored for each blog post. It's a common and efficient approach for most blog applications.</p> <p>If you only need the creation date and don't care about the last modification date, you can just use <code>auto_now_add=True</code> for the <code>created_at</code> field:</p> <pre><code>class Blog(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n</code></pre> <p>This simplifies the model, but you lose the ability to track when the post was last updated.</p> <p>Ultimately, the best option depends on your specific requirements. If you need both creation and modification dates, the first approach is appropriate. If you only need the creation date, you can use the simplified version.</p>"},{"location":"backend/django/django-model/#modeladmin-class","title":"ModelAdmin class","text":"<p>In Django admin, readonly_fields and fields are attributes of the ModelAdmin class that allow you to customize which fields are displayed and whether they are editable in the admin interface.</p> <p>attributes</p> <ol> <li>fields</li> <li>readonly_fields</li> <li>list_display</li> <li>ordering</li> <li>list_per_page</li> </ol> <p>Django Category</p> <p>Static choices</p> <pre><code>from django.db import models\n\nclass YourModel(models.Model):\n    CHOICES = (\n        ('option1', 'Option 1'),\n        ('option2', 'Option 2'),\n        ('option3', 'Option 3'),\n    )\n\n    your_field = models.CharField(max_length=20, choices=CHOICES)\n</code></pre>"},{"location":"backend/django/django-model/#advanced-model","title":"Advanced Model","text":"<p><code>Mastering Django by Nigel George 2022, chapter 9</code></p> <p>Django\u2019s QuerySet API provides a comprehensive array of methods and functions for working with data.</p>"},{"location":"backend/django/django-model/#methods-that-return-querysets","title":"Methods that return QuerySets","text":""},{"location":"backend/django/django-model/#methods-that-dont-return-querysets","title":"Methods that Don't return QuerySets","text":""},{"location":"backend/django/django-model/#model-managers","title":"Model Managers","text":"<p>A Manager is a Django class that provides the interface between database query operations and a Django model. Each Django model is provided with a default Manager named <code>objects</code>.</p> <p>Tips</p> <pre><code>newevent = Event.objects.get(name=\"Xmas Barbeque\")\njoneses = MyClubUser.objects.filter(last_name='Jones')\n</code></pre> <p>In each example, <code>objects</code> is the default <code>Manager</code> for the model instance.</p>"},{"location":"backend/django/django-model/#model-methods","title":"Model Methods","text":"<p>Django\u2019s Model class comes with many built-in methods. We have already used some of them \u2014 <code>save()</code>, <code>delete()</code>, <code>__str__()</code> and others. Where manager methods add table-level functionality to Django\u2019s models, model methods add row-level functions that act on individual instances of the model.</p> <p>There are two common cases where you want to play with model methods:</p> <ol> <li>When you want to add business logic to the model by adding custom model methods; and</li> <li>When you want to override the default behavior of a built-in model method.</li> </ol>"},{"location":"backend/django/django-model/#reference","title":"Reference","text":"<p>Becoming an Enterprise Django Developer by Michael Dinder (pg-122)</p> <ul> <li>Blog</li> <li>Working with Django Models in Python: Best Practices </li> <li>Best practices working with Django models in python</li> <li>Django Tips #22 Designing Better Models</li> </ul>"},{"location":"backend/django/django-reset-password/","title":"django reset password","text":""},{"location":"backend/django/django-reset-password/#django-reset-admin-password","title":"Django Reset Admin Password","text":"<p>The admin\u2019s recommended use is limited to an organization\u2019s internal management tool. It\u2019s not intended for building your entire front end around.</p>"},{"location":"backend/django/django-reset-password/#adding-a-password-reset-feature-in-django","title":"Adding a password reset feature in django","text":"<p>note</p> reset <p>You can add a password reset feature to the admin site by adding a few lines to your URLconf. Specifically, add these four patterns:</p> <pre><code>from django.contrib import admin\nfrom django.contrib.auth import views as auth_views\n\npath(\n    \"password_reset/\",\n    auth_views.PasswordResetView.as_view(\n        extra_context={\"site_header\": admin.site.site_header}\n    ),\n    name=\"admin_password_reset\",\n),\npath(\n    \"password_reset/done/\",\n    auth_views.PasswordResetDoneView.as_view(\n        extra_context={\"site_header\": admin.site.site_header}\n    ),\n    name=\"password_reset_done\",\n),\npath(\n    \"reset/&lt;uidb64&gt;/&lt;token&gt;/\",\n    auth_views.PasswordResetConfirmView.as_view(\n        extra_context={\"site_header\": admin.site.site_header}\n    ),\n    name=\"password_reset_confirm\",\n),\npath(\n    \"reset/done/\",\n    auth_views.PasswordResetCompleteView.as_view(\n        extra_context={\"site_header\": admin.site.site_header}\n    ),\n    name=\"password_reset_complete\",\n),\n</code></pre> <p>(This assumes you\u2019ve added the admin at <code>admin/</code> and requires that you put the URLs starting with <code>^admin/</code> before the line that includes the admin app itself).</p> <p>The presence of the <code>admin_password_reset</code> named URL will cause a \u201cforgotten your password?\u201d link to appear on the default admin log-in page under the password box.</p>"},{"location":"backend/django/django-reset-password/#django-hardening","title":"Django Hardening","text":"<p>To dynamically adjust the admin URL based on the <code>DEBUG</code> setting and include the password reset URLs with dynamic admin URLs, you can structure your urlpatterns as follows:</p> <p>settings.py</p> BasicAdvanced <pre><code>from django.conf import settings\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = []\n\n# Check if DEBUG mode is enabled\nif settings.DEBUG:\n    admin_url = 'admin/'  # Use 'admin/' in DEBUG mode\nelse:\n    admin_url = 'utd-admin/'  # Use 'utd-admin/' in production\n\n# Admin URLs\nurlpatterns += [\n    path(admin_url, admin.site.urls),\n]\n\n# Password reset URLs\nurlpatterns += [\n    path(\n        'password_reset/',\n        auth_views.PasswordResetView.as_view(\n            extra_context={\"site_header\": admin.site.site_header}\n        ),\n        name=\"admin_password_reset\",\n    ),\n    path(\n        'password_reset/done/',\n        auth_views.PasswordResetDoneView.as_view(\n            extra_context={\"site_header\": admin.site.site_header}\n        ),\n        name=\"password_reset_done\",\n    ),\n    path(\n        'reset/&lt;uidb64&gt;/&lt;token&gt;/',\n        auth_views.PasswordResetConfirmView.as_view(\n            extra_context={\"site_header\": admin.site.site_header}\n        ),\n        name=\"password_reset_confirm\",\n    ),\n    path(\n        'reset/done/',\n        auth_views.PasswordResetCompleteView.as_view(\n            extra_context={\"site_header\": admin.site.site_header}\n        ),\n        name=\"password_reset_complete\",\n    ),\n]\n\n# Include Django auth URLs if needed\n# urlpatterns += [\n#     path('accounts/', include('django.contrib.auth.urls')),\n# ]\n\n# Your other urlpatterns...\n</code></pre> <pre><code>from django.conf import settings\nfrom django.contrib import admin\nfrom django.urls import path, include, re_path\nfrom django.views.static import serve\nfrom django.contrib.auth import views as auth_views\nfrom django.conf.urls.static import static\nfrom views.home_views import HomeView\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('about/', include('myapps.abouts.urls')),\n    path('fixture/', include('myapps.fixtures.urls')),\n    path('news/', include('myapps.news.urls')),\n    path('gallery/', include('myapps.galleries.urls')),\n    path('contact/', include('myapps.contacts.urls')),\n    path('tinymce/', include('tinymce.urls')),\n]\n\n# Check if DEBUG mode is enabled\nif settings.DEBUG:\n    admin_url = 'utd-admin/'  # Use 'utd-admin/' in DEBUG mode\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    urlpatterns += [path('__debug__/', include('debug_toolbar.urls'))]\nelse:\n    admin_url = 'admin/'  # Use 'admin/' in production\n    urlpatterns += [\n        re_path(r'^static/(?P&lt;path&gt;.*)$', serve, {'document_root': settings.STATIC_ROOT}),\n        re_path(r'^media/(?P&lt;path&gt;.*)$', serve, {'document_root': settings.MEDIA_ROOT}),\n    ]\n\n# Admin URLs\nurlpatterns += [\n    path(admin_url, admin.site.urls),\n    path(\n        'password_reset/',\n        auth_views.PasswordResetView.as_view(\n            extra_context={\"site_header\": admin.site.site_header}\n        ),\n        name=\"admin_password_reset\",\n    ),\n    path(\n        'password_reset/done/',\n        auth_views.PasswordResetDoneView.as_view(\n            extra_context={\"site_header\": admin.site.site_header}\n        ),\n        name=\"password_reset_done\",\n    ),\n    path(\n        'reset/&lt;uidb64&gt;/&lt;token&gt;/',\n        auth_views.PasswordResetConfirmView.as_view(\n            extra_context={\"site_header\": admin.site.site_header}\n        ),\n        name=\"password_reset_confirm\",\n    ),\n    path(\n        'reset/done/',\n        auth_views.PasswordResetCompleteView.as_view(\n            extra_context={\"site_header\": admin.site.site_header}\n        ),\n        name=\"password_reset_complete\",\n    ),\n]\n</code></pre> <p>In this setup:</p> <ul> <li>If <code>DEBUG</code> mode is enabled, the admin URLs will be under '<code>admin/</code>'.</li> <li>If <code>DEBUG</code> mode is disabled, the admin URLs will be under '<code>utd-admin/</code>'.</li> <li>The <code>password</code> reset URLs are constructed dynamically based on the admin URL chosen.</li> </ul> <p>This setup provides flexibility in defining the admin URL based on the deployment environment while keeping the password reset URLs consistent with the chosen admin URL.</p>"},{"location":"backend/django/django-reset-password/#reference","title":"Reference","text":"<ul> <li>django reset password only in admin: stackoverflow</li> <li>password reset: django 3.2</li> <li>password reset: django 5.0</li> </ul>"},{"location":"backend/django/django-secretkey/","title":"Generate Secretkey","text":"<p>In Django, there isn't a built-in <code>secret_key_generator</code> function. The typical way to generate a secret key in Django is to use the <code>django.core.management.utils.get_random_secret_key()</code> function.</p> <p>Generate secret key for django project</p> Python<pre><code>python3 manage.py shell\n</code></pre> bash<pre><code>&gt;&gt;&gt; from  django.core.management.utils  import  get_random_secret_key\n&gt;&gt;&gt; print(get_random_secret_key())\n</code></pre> <p>This will generate a random secret key for you. You don't need to import secret_key_generator because it's not a part of Django. </p> <p>Tip</p> <p>In Django, the <code>get_random_secret_key()</code> function generates a random secret key of 50 characters in length by default. However, you can customize the length of the generated key by passing an integer argument to the function specifying the desired length. For example:</p> <pre><code>from django.core.management.utils import get_random_secret_key\n\n# Generate a random secret key of length 64\nprint(get_random_secret_key(64))\n</code></pre> <p>This will print a random secret key of 64 characters in length. You can adjust the length as needed for your application.</p>"},{"location":"backend/django/django-template/","title":"django template (view)","text":""},{"location":"backend/django/django-template/#basic","title":"Basic","text":"<p>Django Template System Basic</p> template tagtemplate variabledelimiters <p>A template tag is surrounded by {% and %}. This is because Django\u2019s tags are so flexible. Some examples performed by template tags are as follows:</p> <ol> <li>Display Logic: E.g., <code>{% if %}</code> Add <code>{% endif %}</code></li> <li>Loop Control: E.g., <code>{% for x in y %}</code>...<code>{% endfor %}</code></li> <li>Block Declaration: E.g., <code>{% block content %}</code>...<code>{% endblock %}</code></li> <li>Content Import: E.g., <code>{% include \u201cheader\u200b.ht\u200bml\u201d %}</code></li> <li>Inheritance: E.g., <code>{% extends \u201cbase\u200b.ht\u200bml\u201d %}</code></li> </ol> <p>A template variable is surrounded by {{ and }}. These template variables are passed to the template at runtime in the Context.</p> <ol> <li>Simple Variables: E.g., <code>{{ name }}</code></li> <li>Object Attributes: E.g., <code>{{ page.heading }}</code></li> <li>Dictionary Lookups: E.g., <code>{{ dict\u200b.it\u200bem }}</code></li> <li>List Indexes: E.g., <code>{{ list_items.2 }}</code></li> <li>Method Calls: E.g., <code>{{ var\u200b.low\u200ber }}</code>, <code>{{ mydict\u200b.pu\u200bsh }}</code></li> </ol> <ul> <li> <p>Display Logic - <code>{% ... %}</code> (for Statements )</p> <pre><code>&lt;h1&gt;Favorite Color&lt;/h1&gt;\n&lt;ul&gt;\n    {% for user in colors %}\n        &lt;li&gt;{{ user\u200b.col\u200bor }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</code></pre> </li> <li> <p>If: </p> <p>In Jinja, it is easiest to use if as a variable that is defined and then returns some values, not empty and not false.</p> <pre><code>{% if users %}\n    &lt;ul&gt;\n        {% for user in users %}\n            &lt;li&gt;{{ user.username}}&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n{% endif %}\n</code></pre> </li> <li> <p>If Expression:</p> <p>It is also used as an inline expression. For example, you can add this to extend your code logic.</p> <pre><code>{% extends condition if the condition is defined else 'default\u200b.ht\u200bml' %}\n</code></pre> </li> </ul> <p>Mastering Django A Beginner\u2019s Guide Edited by Sufyan bin Uzayr <code>pg-124</code> </p>"},{"location":"backend/django/django-template/#adding-templates","title":"Adding Templates","text":"<p>Adding Templates</p> <p>The first thing to learn is where to put templates in a Django project. By default, Django's template loader looks inside each app for templates that go with it.</p> <p>Now, let us create a templates folder.</p> <p><code>mkdir templates</code></p> <p>Next, we have to add the new template to the settings.py file inside the django project so that Django knows where our new templates directory is. Add the following to the TEMPLATES setting under \"DIRS.\"</p> <pre><code>TEMPLATES = [\n    {\n        ...\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        ...\n    }\n]\n</code></pre> <p><code>Book</code>: Python Flask and Django by emenwa global</p> <p>Example</p> class &amp; viewsproject urlsapp urls <p>We will use the built-in TemplateView to show our template in our view. Edit the <code>views.py</code> file.</p> <pre><code>from django.views.generic import TemplateView\n\nclass HomePageView(TemplateView):\n    template_name = \"home.html\"\n</code></pre> <p>Since <code>HomePageView</code> is now a Python class, we had to capitalize it. Unlike functions, classes should always start with a capital letter. The logic for showing our template is already built into the TemplateView. All we need to do is tell it the name of the template.</p> <pre><code>from django.contrib import admin\nfrom django.urls import path\nfrom django.urls import include\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"page.urls\")),\n]\n</code></pre> <p>one big difference: when using Class-Based Views, you always add as view() to the end of the view name.</p> <pre><code>from django.urls import path\nfrom .views import HomePageView\n\nurlpatterns = [\n    path(\"\", HomePageView.as_view(), name=\"home\"),\n]\n</code></pre>"},{"location":"backend/django/django-template/#extending-templates","title":"Extending Templates","text":"<p>The best thing about templates is how you can extend them. Most websites have <code>headers</code> or <code>footers</code> that you see on every page. How can you do that?</p> <p>First, we make a file called base.html within the templates folder.</p> <p>Info</p> base.htmlhome.html <pre><code>&lt;header&gt;\n    &lt;a href=\"{% url 'home' %}\"&gt;Home&lt;/a&gt;\n    &lt;a href=\"{% url 'about' %}\"&gt;About&lt;/a&gt;\n&lt;/header&gt;\n\n{% block content %}\n{% endblock content %}\n</code></pre> <pre><code>{% extends \"base.html\" %}\n\n{% block content %}\n    &lt;h1&gt;Welcome to my website&lt;/h1&gt;\n{% endblock content %}\n</code></pre>"},{"location":"backend/django/django-template/#static-dir","title":"Static <code>dir</code>","text":"<pre><code>mkdir static\n\n# to create a CSS subfolder:\nmkdir static/css\n</code></pre> <pre><code># settings.py\nSTATIC_URL = \"static/\"\n\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\n</code></pre>"},{"location":"backend/django/django-template/#advanced","title":"Advanced","text":""},{"location":"backend/django/django-template/#other-topic","title":"Other Topic","text":"<p>Example</p> <p>The difference between the two declarations lies in the method used to construct the path to the <code>static</code> directory:</p> <p>1. Using the / Operator:</p> <pre><code>STATICFILES_DIRS = [\n    BASE_DIR / \"static\"\n]\n</code></pre> <p>This approach uses the <code>/</code> operator for path concatenation. However, this syntax is not standard in Python and may cause an error unless you have overridden the behavior of the <code>/</code> operator to handle path concatenation.</p> <p>2. Using os.path.join():</p> <pre><code>STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static')\n]\n</code></pre> <p>This approach uses the <code>os.path.join()</code> function to construct the path to the static directory. It is the standard and recommended way to join path components in Python, ensuring compatibility across different operating systems.</p> <p>In summary, the second declaration that uses <code>os.path.join(BASE_DIR, 'static')</code> is correct and standard. It ensures that the path is constructed correctly regardless of the operating system being used. The first declaration using the / operator may not work as expected and is not a common practice in Python for constructing paths.</p> static folder <p>Yes, that's correct. STATICFILES_DIRS and STATIC_ROOT serve different purposes, so they typically point to different directories.</p> <p>1. STATICFILES_DIRS:</p> <p>STATICFILES_DIRS is used during development to specify additional directories where Django should look for static files. These directories can contain static files that are not tied to specific apps or are shared across multiple apps. This setting allows you to include third-party static files, custom project-wide static files, or override static files provided by apps or libraries.</p> <p>For example:</p> <pre><code>STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n    #   '/path/to/external/static/files/',\n]\n</code></pre> <p>2. STATIC_ROOT:</p> <p>STATIC_ROOT is used for deployment purposes. It specifies the directory where Django collects all the static files from your project during the deployment process. These collected static files are meant to be served directly by a web server like Nginx or Apache in a production environment.</p> <p>For example:</p> <pre><code>STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n</code></pre> <p>After running collectstatic, Django gathers static files from both the app-specific static directories and the additional directories specified in STATICFILES_DIRS, and places them into the directory specified by STATIC_ROOT.</p> <p>In summary, STATICFILES_DIRS and STATIC_ROOT should point to different directories. STATICFILES_DIRS is for specifying additional directories where Django should look for static files during development, while STATIC_ROOT is for specifying the directory where Django should collect all static files for deployment.</p> <p>STATIC_URL is a setting in Django used to specify the base URL from which static files will be served. It defines the URL prefix to access static files in your web application.</p> <p>By default, STATIC_URL is set to '/static/' in Django projects, but you can customize it to fit your application's requirements. For example, if you want to serve static files from a different URL or path, you can modify STATIC_URL accordingly in your project's settings.</p>"},{"location":"backend/django/django-template/#templates","title":"Templates","text":"<p>Choosing Between Direct Slug Usage and Named URL Patterns in Django Templates</p> <p>Both approaches have their advantages and use cases:</p> <p>1. <code>&lt;a href=\"{{ blog.slug }}\"&gt;{{ blog.title }}&lt;/a&gt;</code>:</p> <ul> <li>This approach directly uses the value stored in the slug field of your BlogItem model to generate the URL.</li> <li>It's simpler and more straightforward.</li> <li>You don't need to define URL patterns or use the <code>{% url %}</code> template tag.</li> <li>However, it's less flexible if you ever need to change the URL structure or if you want to handle URLs differently in different parts of your website.</li> </ul> <p>2. <code>&lt;a href=\"{% url 'blog:inner' slug=blog.slug %}\"&gt;{{ blog.title }}&lt;/a&gt;</code>:</p> <ul> <li>This approach uses the <code>{% url %}</code> template tag to generate the URL based on the specified view name (<code>'blog:inner'</code>) and the provided parameters (<code>slug=blog.slug</code>).</li> <li>It's more flexible and maintainable. If you ever need to change the URL structure or if you want to reuse the same URL pattern in different parts of your website, you only need to update the URL pattern in your urls.py file.</li> <li>It ensures consistency and helps prevent errors in URL generation.</li> <li>However, it requires you to define URL patterns in your <code>urls.py</code> file and use the <code>{% url %}</code> template tag, which adds some complexity.</li> </ul> <p>In general, if your URL structure is simple and unlikely to change, and if you don't need the flexibility provided by named URL patterns and the <code>{% url %}</code> template tag, you can use the first approach (<code>&lt;a href=\"{{ blog.slug }}\"&gt;{{ blog.title }}&lt;/a&gt;</code>). Otherwise, if you want more flexibility and maintainability, especially for larger or more complex projects, the second approach (<code>&lt;a href=\"{% url 'blog:inner' slug=blog.slug %}\"&gt;{{ blog.title }}&lt;/a&gt;</code>) is recommended.</p>"},{"location":"backend/django/django-template/#rendering-html-content","title":"Rendering HTML Content","text":"<p>To display content from a TinyMCE field in HTML, you can directly render the HTML content using the <code>safe</code> filter provided by Django templates. This filter ensures that the HTML content is rendered as HTML and not escaped as text. Here's how you can do it:</p> <pre><code>&lt;div class=\"col-md-12\"&gt;\n    &lt;p&gt;{{ about.description | safe }}&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>By using the <code>safe</code> filter, Django will render the HTML content stored in the <code>description</code> field without escaping it. Make sure to sanitize the HTML content before storing it in the database to prevent security vulnerabilities such as cross-site scripting (XSS) attacks. Django's <code>safe</code> filter does not perform any sanitization on the content; it merely marks it as safe for rendering.</p>"},{"location":"backend/django/django-template/#active-in-navigation-website","title":"active in navigation website","text":"<p>Tip</p> BasicAdvanced <p>To change the active state of the navigation links based on the current page, you can use the <code>request.path</code> in your template to compare it with the URL of each navigation link. Here's how you can do it:</p> <pre><code>&lt;ul class=\"navbar-nav mb-2 mb-lg-0\"&gt;\n    &lt;li class=\"nav-item {% if request.path == '/' %}active{% endif %}\"&gt;\n        &lt;a class=\"nav-link\" href=\"{% url 'home' %}\"&gt;Home&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li class=\"nav-item {% if request.path == '/about/' %}active{% endif %}\"&gt;\n        &lt;a class=\"nav-link\" href=\"{% url 'about' %}\"&gt;About&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li class=\"nav-item {% if request.path == '/service/' %}active{% endif %}\"&gt;\n        &lt;a class=\"nav-link\" href=\"{% url 'service' %}\"&gt;Service&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li class=\"nav-item {% if request.path == '/project/' %}active{% endif %}\"&gt;\n        &lt;a class=\"nav-link\" href=\"{% url 'project' %}\"&gt;Project&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li class=\"nav-item {% if request.path == '/blog/' %}active{% endif %}\"&gt;\n        &lt;a class=\"nav-link\" href=\"{% url 'blog:blog' %}\"&gt;Blog&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li class=\"nav-item {% if request.path == '/contact/' %}active{% endif %}\"&gt;\n        &lt;a class=\"nav-link\" href=\"{% url 'contact' %}\"&gt;Contact&lt;/a&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>In this example:</p> <ul> <li><code>{% if request.path == '/' %}</code> checks if the current page is the home page. If it is, it adds the <code>active</code> class to the corresponding <code>&lt;li&gt;</code> element.</li> <li>Similarly, you can check the <code>request.path</code> against each URL and add the <code>active</code> class accordingly.</li> </ul> <p>Make sure that <code>request</code> is available in your template context. In Django, <code>request</code> is typically available by default in the template context if you've enabled the <code>django.template.context_processors.request</code> context processor in your settings. If not, you need to pass request explicitly to your template context.</p> <p>To highlight the \"Blog\" navigation item when you're on a blog item page, you need to modify the logic to check if the current page URL contains <code>/blog/</code>. Here's how you can do it:</p> <pre><code>&lt;ul class=\"navbar-nav mb-2 mb-lg-0\"&gt;\n    &lt;li class=\"nav-item {% if '/blog/' in request.path %}active{% endif %}\"&gt;\n        &lt;a class=\"nav-link\" href=\"{% url 'blog:blog' %}\"&gt;Blog&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;!-- Add other navigation items --&gt;\n&lt;/ul&gt;\n</code></pre> <p>In this modification:</p> <ul> <li><code>{% if '/blog/' in request.path %}</code> checks if the current page URL contains <code>/blog/</code>. If it does, it adds the <code>active</code> class to the corresponding <code>&lt;li&gt;</code> element.</li> <li>By using <code>in</code>, we're checking if <code>/blog/</code> is part of the current URL. This way, any URL that includes <code>/blog/</code>, like <code>/blog/ktm-bazar</code>, <code>/blog/some-other-blog-post</code>, etc., will highlight the \"Blog\" navigation item.</li> </ul> <p>Make sure that request is available in your template context as explained in the previous response. If not, ensure that you pass request explicitly to your template context in your views.</p> <ul> <li>highlight active links in your django website</li> <li>django-active-link package</li> </ul>"},{"location":"backend/django/django-template/#templates_1","title":"templates","text":"Argument Outputs <code>openblock</code> <code>{%</code> <code>closeblock</code> <code>%}</code> <code>openvariable</code> <code>{{</code> <code>closevariable</code> <code>}}</code> <code>openbrace</code> <code>{</code> <code>closebrace</code> <code>}</code> <code>opencomment</code> <code>{#</code> <code>closecomment</code> <code>#}</code> <p>url template tag</p> <p>Yes, that's correct. When using the <code>{% url %}</code> template tag in Django templates, you specify the name of the URL pattern, not the name of the view function or class-based view.</p> <p>The name parameter you provide in the URL pattern definition (<code>name='...'</code>) is what you use to refer to that URL pattern in the <code>{% url %}</code> template tag.</p> <p>Here's an example to clarify:</p> urls.py<pre><code>from django.urls import path\nfrom .views import my_view_function, MyViewClass\n\nurlpatterns = [\n    path('home/', my_view_function, name='home_view_function'),  # Function-Based View\n    path('about/', MyViewClass.as_view(), name='about_view_class'),  # Class-Based View\n]\n</code></pre> <p>In the above <code>urls.py</code> example:</p> <ul> <li><code>home_view_function</code> is the name of the URL pattern associated with the function-based view <code>my_view_function</code>.</li> <li><code>about_view_class</code> is the name of the URL pattern associated with the class-based view <code>MyViewClass</code>.</li> </ul> <p>Now, when referencing these URL patterns in your templates using the <code>{% url %}</code> template tag, you would use their respective names:</p> html<pre><code>&lt;a href=\"{% url 'home_view_function' %}\"&gt;Link to Home (Function)&lt;/a&gt;\n&lt;a href=\"{% url 'about_view_class' %}\"&gt;Link to About (Class)&lt;/a&gt;\n</code></pre> <p>So, you specify the name of the URL pattern, not the name of the view function or <code>class-based view</code>.</p>"},{"location":"backend/django/django-template/#reference","title":"Reference","text":"<ul> <li>Working with Static and Media Files in Django</li> <li>Managing Media Files in Django </li> <li>Django Media Files</li> <li>Storing Django Static and Media Files on Amazon S3</li> <li>Handling Media Files in Django</li> <li>Static files and Media files: django forum</li> <li>Set up Static and Media files in Django: A Quick and Easy Guide</li> <li>Adding Media Directory In Django </li> </ul>"},{"location":"backend/django/django-urlconf/","title":"django URLconf","text":"<p>django urls</p>"},{"location":"backend/django/django-utility-functions/","title":"Django Utility Function","text":"<p>In Django, utility functions are predefined functions provided by the Django framework to perform common tasks efficiently and effectively. These functions are built-in and can be directly used within Django projects without the need for additional implementation. Some of the utility functions provided by Django include:</p> <p>utility function</p> <ul> <li>slugify: As mentioned earlier, slugify is used to generate URL-friendly versions of strings.</li> <li>gettext and ngettext: These functions are used for internationalization and localization of text strings, allowing developers to make their Django applications multilingual.</li> <li>timezone.now: This function returns the current datetime in the time zone specified by Django's settings.</li> <li>reverse: This function is used to reverse-resolve URLs, meaning it generates a URL from the provided view name and optional parameters.</li> <li>json.dumps and json.loads: These functions are used to serialize Python objects into JSON format and deserialize JSON strings into Python objects, respectively.</li> <li>urlencode: This function is used to encode URL parameters into a query string.</li> <li>format_html: This function is used to safely format HTML strings with placeholders, helping to prevent XSS (Cross-Site Scripting) attacks.</li> <li>get_object_or_404: This function retrieves an object from the database based on given parameters or raises a 404 error if the object does not exist.</li> </ul> <p>These are just a few examples of utility functions provided by Django. There are many more available for various purposes, ranging from string manipulation to database querying and from form handling to file management. These utility functions contribute to Django's power and flexibility, enabling developers to build robust web applications efficiently.</p>"},{"location":"backend/django/django-view/","title":"django view (controller)","text":""},{"location":"backend/django/django-view/#basic","title":"Basic","text":""},{"location":"backend/django/django-view/#django-views","title":"Django Views","text":"<p>Django\u2019s views are the information brokers of a Django application. A view sources data from your database (or an external data source or service) and delivers it to a template. </p> <ul> <li>For a web application, the view delivers web page content and templates; </li> <li>for a RESTful API this content could be formatted JSON data.</li> </ul> <p>Example</p> <p>So, technically, there are three ways to write a view in Django:</p> <ul> <li>function-based views (FBVs), </li> <li>class-based views (CBVs), &amp;</li> <li>generic class-based views (GCBVs).</li> </ul> <p><code>Book</code>: Python Flask and Django by emenwa global,part2-django </p> <p>As per Django Documentation,</p> <p>A view function is a Python function that takes a Web request and returns a Web response. This response can be the HTML contents of a Web page, or a redirect, or a 404 error, or an XML document, or an image, anything that a web browser can display.</p> <p></p> <p>Django views roughly correspond to controllers in MVC, and Django templates to views in MVC.</p> <p></p>"},{"location":"backend/django/django-view/#advanced","title":"Advanced","text":""},{"location":"backend/django/django-view/#example","title":"Example","text":"<p>Example</p> views.pyapp: <code>urls.py</code>about.html views.py<pre><code>from django.shortcuts import render\nfrom django.views.generic import TemplateView\nfrom .models import About, Project, ProjectCategory, ProjectItem, Service, ServiceItem\n\n# Create your views here.\n\nclass IndexView(TemplateView):\n    template_name = 'index.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n\n        # Retrieve the first About instance\n        abouts = About.objects.first()\n        context['abouts'] = abouts\n\n        # Retrieve all projects\n        projects = Project.objects.first()\n        context['projects'] = projects\n\n        # Retrieve all project categories\n        project_categories = ProjectCategory.objects.all()\n        context['project_categories'] = project_categories\n\n        # Retrieve all project items\n        project_items = ProjectItem.objects.all()\n        context['project_items'] = project_items\n\n        # Retrieve all services\n        services = Service.objects.first()\n        context['services'] = services\n\n        # Retrieve all service items\n        service_items = ServiceItem.objects.all()\n        context['service_items'] = service_items\n\n        return context\n\nclass AboutView(TemplateView):\n    template_name = 'about.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n\n        # Retrieve the About instance\n        about = About.objects.first()\n        context['about'] = about\n\n        return context\n</code></pre> <pre><code>from django.urls import path\nfrom .views import IndexView, AboutView\n\nurlpatterns = [\n    path('', IndexView.as_view(), name='index'),\n    path('about/', AboutView.as_view(), name='about'),\n    # Other URL patterns\n]\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;About Us&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;h1&gt;About Us&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;section&gt;\n            {% if about %}\n                &lt;h2&gt;{{ about.title }}&lt;/h2&gt;\n                &lt;p&gt;{{ about.description }}&lt;/p&gt;\n                &lt;!-- You can display other fields of the About model here --&gt;\n            {% else %}\n                &lt;p&gt;No information available.&lt;/p&gt;\n            {% endif %}\n        &lt;/section&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\n        &lt;!-- Footer content --&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"backend/django/django-view/#other-topic","title":"Other Topic","text":"get_context_data() IntroductionIn Depth<code>**kwargs</code> <p>Yes, <code>get_context_data()</code> is a built-in method provided by Django for class-based views. It's a method that you can override in your own view classes to customize the context data that is passed to the template when rendering.</p> <p>When you subclass a Django class-based view, such as TemplateView, you have the option to override <code>get_context_data()</code> to provide additional context data or modify existing context data before it is passed to the template for rendering.</p> <p>Here's the general structure of <code>get_context_data()</code> in a Django class-based view:</p> python<pre><code>class YourViewClass(View):\n    # other methods and attributes...\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        # Add or modify context data here\n        return context\n</code></pre> <p>By overriding <code>get_context_data()</code>, you can customize the context data for your views, allowing you to pass any additional information to your templates that may be necessary for rendering.</p> <p>In Django, when you're working with class-based views, get_context_data() is a method used to populate the context dictionary that will be passed to the template rendering engine.</p> <p><code>super().get_context_data(**kwargs)</code> calls the <code>get_context_data()</code> method of the parent class in the method resolution order (MRO). In this case, since your view class (IndexView) inherits from TemplateView, <code>super().get_context_data(**kwargs)</code> calls the <code>get_context_data()</code> method of the TemplateView class.</p> <p>The purpose of <code>super().get_context_data(**kwargs)</code> is to ensure that any context data added by the parent class (TemplateView in this case) is included in the context dictionary. This allows you to extend the context data provided by the parent class while adding your own custom context data in the IndexView.</p> <p>By doing this, you can maintain any default behavior or context data provided by the parent class while adding or modifying context data specific to your IndexView.</p> <p>In Python, <code>**kwargs</code> is a special syntax used in function definitions to collect any keyword arguments that are not explicitly defined. The <code>**kwargs</code> syntax allows you to pass a variable number of keyword arguments to a function. Here's how it works:</p> python<pre><code>def example_function(**kwargs):\n    print(kwargs)\n\nexample_function(a=1, b=2, c=3)\n</code></pre> <p>In this example, <code>**kwargs</code> collects the keyword arguments a, b, and c into a dictionary within the function. When you call <code>example_function(a=1, b=2, c=3)</code>, it prints:</p> <pre><code>{'a': 1, 'b': 2, 'c': 3}\n</code></pre> <p>The <code>**kwargs</code> syntax allows you to pass any number of keyword arguments to the function, and the function will receive them as a dictionary with the keyword names as keys and the corresponding values as values.</p> <p>In the context of Django views, <code>**kwargs</code> is often used in the <code>get_context_data()</code> method to accept any additional keyword arguments that might be passed when calling the method. This allows for flexibility when extending or customizing views, as additional keyword arguments can be passed to <code>get_context_data()</code> without modifying its signature.</p> <p>templates <code>folder structure</code></p> ExampleTheory <p>The structure of the templates folder in a Django project can vary based on developer preferences, project requirements, and the scale of the project. However, there are some common practices that senior developers may follow to organize the templates folder effectively:</p> <p>1.App-Named Subfolders:</p> <ul> <li>One common approach is to create a subfolder within the templates directory for each Django app in your project.</li> <li>For example, if you have apps named <code>app1</code>, <code>app2</code>, and <code>app3</code>, you might have subfolders like <code>templates/app1</code>, <code>templates/app2</code>, and <code>templates/app3</code>.</li> <li>This structure keeps templates organized and helps avoid naming conflicts between templates from different apps.</li> </ul> <p>2. Shared Templates:</p> <ul> <li>Alongside app-specific templates, there might be templates that are shared  across multiple apps or are used globally within the project.</li> <li>These shared templates can be placed directly within the templates directory or within a separate subfolder like <code>templates/shared</code>.</li> </ul> <p>3. Include and Extend Patterns:</p> <ul> <li>Senior developers might use Django's template inheritance features to create a hierarchy of templates.</li> <li>Common elements such as headers, footers, and navigation menus might be placed in base templates, which are then extended by more specific templates for each page or section of the site.</li> <li>These base templates are often stored in a separate subfolder like <code>templates/base</code>.</li> </ul> <p>4. Static Files:</p> <ul> <li>If your project includes static files such as CSS, JavaScript, or images that are specific to templates, they are typically stored within each app's static folder rather than the templates folder.</li> <li>However, sometimes there might be template-specific static files, such as images used only in certain templates, which can be organized similarly within the templates directory.</li> </ul> <p>5. Project-Level Templates:</p> <ul> <li>In some cases, there might be <code>templates</code> that are used across the entire project but don't belong to any specific app.</li> <li>These templates can be stored directly within the templates directory or within a subfolder like <code>templates/project</code>.</li> </ul> <p>Here's an example of what the structure might look like:</p> <pre><code>project_name/\n\u251c\u2500\u2500 project_name/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2514\u2500\u2500 wsgi.py\n\u251c\u2500\u2500 app1/\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u2502   \u251c\u2500\u2500 app1/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 template1.html\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 template2.html\n\u2502   \u2502   \u2514\u2500\u2500 base/\n\u2502   \u2502       \u2514\u2500\u2500 base.html\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 app2/\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u2502   \u251c\u2500\u2500 app2/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 template3.html\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 template4.html\n\u2502   \u2502   \u2514\u2500\u2500 base/\n\u2502   \u2502       \u2514\u2500\u2500 base.html\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 templates/\n    \u251c\u2500\u2500 shared/\n    \u2502   \u251c\u2500\u2500 navbar.html\n    \u2502   \u2514\u2500\u2500 footer.html\n    \u2514\u2500\u2500 project/\n        \u2514\u2500\u2500 homepage.html\n</code></pre> <p>This structure keeps the templates organized, making it easier to maintain and understand the project's structure, especially as it grows.</p> <p>The decision of whether to keep template HTML files within the app or solely in the templates folder is influenced by several factors, and different senior programmers may have varying preferences based on project requirements and best practices. Here are some considerations:</p> <p>The decision of whether to keep template HTML files within the app or solely in the templates folder is influenced by several factors, and different senior programmers may have varying preferences based on project requirements and best practices. Here are some considerations:</p> <p>1. Separation of Concerns:</p> <ul> <li>Keeping templates within each app's directory maintains a clear separation of concerns. Each app encapsulates its templates along with its models, views, and other related files. This can make it easier to understand and maintain the codebase, especially for larger projects with many apps.</li> </ul> <p>2. Reusability:</p> <ul> <li>Placing templates within the templates folder allows for better reuse across multiple apps. Templates that are shared between apps can be easily accessed from a central location.</li> <li>However, if templates are tightly coupled with the functionality of a specific app and are unlikely to be reused elsewhere, keeping them within the app's directory may be more appropriate.</li> </ul> <p>3. Project Structure:</p> <ul> <li>Some developers prefer a flatter directory structure to make it easier to locate and manage templates. In such cases, keeping all templates within the templates folder may be preferred.</li> <li>Others prefer a more hierarchical structure, where templates are organized within each app's directory. This can help maintain a clear structure, especially in larger projects with many apps.</li> </ul> <p>4. Project Preferences and Guidelines:</p> <ul> <li>Senior programmers may follow existing project conventions or guidelines established by the team or organization. Consistency within the project codebase is often prioritized over individual preferences.</li> <li>If the project already has a convention in place, it's generally best to adhere to that convention for consistency and maintainability.</li> </ul> <p>5. Integration with Third-party Apps:</p> <p>If your project relies heavily on third-party apps or packages that provide their own templates, keeping app-specific templates separate can help avoid conflicts and make it easier to manage dependencies.</p> <p>In conclusion, there isn't a one-size-fits-all answer, and the decision ultimately depends on factors such as project size, complexity, reuse potential, and team preferences. Both approaches have their advantages, and it's important to weigh these considerations when deciding where to place template files. It's common for senior programmers to consider these factors and make informed decisions based on project requirements and best practices.</p>"},{"location":"backend/django/django-view/#reference","title":"Reference","text":"<ul> <li>Django Tutorial - geeksforgeeks</li> <li>Django w3schools</li> <li>Django javatpoint</li> <li>Django crud: function based views</li> <li>Django crud: class based views</li> <li>Django project MVT structure</li> <li>Django Tutorial: realPython</li> <li>What are Django class based views &amp; should you use them?</li> </ul>"},{"location":"backend/django/intro/","title":"Intro","text":"<p>Django really is the <code>framework for perfectionists with deadlines</code>.</p> <p>Django is an opinionated, full-stack web application framework. It comes with many batteries that you can use to build a fully functional web application, including static and media file management.</p> <p>What Python version can I use with Django?</p> Django version Python versions <code>3.2</code> 3.6, 3.7, 3.8, 3.9, 3.10 (added in 3.2.9) <code>4.0</code> 3.8, 3.9, 3.10 <code>4.1</code> 3.8, 3.9, 3.10, 3.11 (added in 4.1.3) <code>4.2</code> 3.8, 3.9, 3.10, 3.11, 3.12 (added in 4.2.8) <code>5.0</code> 3.10, 3.11, 3.12 <p>For each version of Python, only the latest micro release (A.B.C) is officially supported. You can find the latest micro version for each series on the Python download page.</p> <p>Typically, we will support a Python version up to and including the first Django LTS release whose security support ends after security support for that version of Python ends. For example, Python <code>3.9</code> security support ends in October 2025 and Django <code>4.2</code> LTS security support ends in April 2026. Therefore Django <code>4.2</code> is the last version to support Python 3.9.</p> <p></p>"},{"location":"backend/django/intro/#basic","title":"Basic","text":""},{"location":"backend/django/intro/#django-3-core-parts","title":"Django <code>3</code> core parts","text":"<p>Django\u2019s Parts</p> <p>Django is built on three core parts:</p> <ol> <li>A mapper between URLs and view code</li> <li>An abstraction for interacting with a database</li> <li>A templating system to manage your HTML like code</li> </ol>"},{"location":"backend/django/intro/#big-picture","title":"Big Picture","text":"A Django View is Not a Controller <p>Check out <code>Figure 3-1</code> on the next page, does it look familiar?</p> <p>This is one of my diagrams, but there are plenty of similar versions out there. A common way of explaining Django\u2019s architecture in terms of MVC is to describe it as a Model-Template-View (MTV) or Model-View-Template (MVT). </p> <p>There\u2019s no difference between MTV and MVT\u2014they\u2019re two different ways to describe the same thing, which adds to the confusion.</p> <p></p> <p>The misleading part of this diagram is the view. The view in Django is most often described as being equivalent to the controller in MVC, but it\u2019s not\u2014it\u2019s still the <code>view</code>.</p> <p></p> <p>Note how I have drawn a line between the client- and server-side. Like all client/server architectures, Django uses request and response objects to communicate between the client and the server. As Django is a web framework, we\u2019re talking about HTTP request and response objects.</p> <p></p> <p>The next point to note is that the Django framework encapsulates the model, view logic and business logic. </p> <p>In some tutorials, it\u2019s said that the Django framework is the controller, but that isn\u2019t true either\u2014the <code>Django framework</code> can do much more than respond to user input and interact with data.</p> <p>A perfect example of this extra power is Django\u2019s middleware, which sits between the view and the client-side. Django\u2019s middleware performs critical security and authentication checks before sending the response to the browser.</p> HTTP Request/Response Cycle <p>A network protocol is a set of rules for formatting and processing data. It's like a common language for computers that lets them talk to each other even if they are on opposite sides of the world and have very different hardware and software.</p> <p>HTTP is a protocol that works with a client-server model of computing. When you go to a website, your computer, or \"client,\" sends a \"request,\" and a \"server\" sends back a \"response.\" The client doesn't have to be a computer, though. It could be a cell phone or any other device that can connect to the internet. But the process is the same: a client sends an HTTP request to a URL, and the server sends an HTTP response back.</p> <p>In the end, a web framework like Django takes HTTP requests to a given URL and sends back an HTTP response with the information needed to render a webpage. All done. Usually, this process involves finding the correct URL, connecting to a server, logic, styling with HTML, CSS, JavaScript, or static assets, and then sending the HTTP response.</p> <p>This is what the abstract flow looks like:</p> <p>HTTP Request -&gt; URL -&gt; Django combines database, logic, styling -&gt; HTTP Response</p> <p><code>Book</code>: Python Flask and Django by emenwa global</p> Model-View-Controller (MVC) and Model-View-Template (MVT) <p>Model-View-Controller (MVC) and Model-View-Template (MVT)</p> <p>The Model-View-Controller (MVC) sequence has become a popular way to split up an application's data, logic, and display into separate parts over time. This makes it easier for a programmer to figure out what the code means. The MVC pattern is used by many web frameworks, such as Ruby on Rails, Spring (Java), Laravel (PHP), ASP.NET (C#), and many others.</p> <p>There are three main parts to the traditional MVC pattern:</p> <ul> <li>Model: Takes care of data and the primary project logic</li> <li>View: Gives the model's data in a specific format.</li> <li>Controller: Takes input from the user and does application-specific logic.</li> </ul> <p>Django's method, often called Model-View-Template, only loosely follows the traditional MVC method (MVT). Developers who have worked with web frameworks before might find this confusing at first. In reality, Django's approach is a 4-part pattern that also includes URL Configuration. A better way to describe it would be something like MVTU.</p> <p>Here's how the Django MVT pattern works:</p> <ul> <li>Model: Manages data and core business logic</li> <li>View: Tells the user what data is sent to them, but not how it is shown.</li> <li>Template: Shows the information in HTML, with CSS, JavaScript, and Static Assets as options.</li> <li>URL Configuration: Regular-expression components set up for a View</li> </ul> <p>This interaction is a crucial part of Django, but it can be hard to understand for new users, so let's draw a diagram of how an HTTP request and response cycle works. When a URL like https://djangoproject.com is typed in, the first thing that happens in our Django project is that a URL pattern (contained in urls.py) that matches it is found. The URL pattern is linked to a single view (in views.py) that combines the data from the model (in models.py) and the styling from a template (any file ending in .html). After that, the view gives the user an HTTP response.</p> <p>The flow looks like below:</p> <p>HTTP Request -&gt; URL -&gt; View -&gt; Model and Template -&gt; HTTP Response</p> <p><code>Book</code>: Python Flask and Django by emenwa global</p> <p></p>"},{"location":"backend/django/intro/#concept","title":"Concept","text":""},{"location":"backend/django/intro/#dir-vs-help","title":"<code>dir()</code> vs <code>help()</code>","text":"<p>Koncept HolyGrail</p> <p><code>dir()</code> lists attributes and methods of an object, while <code>help()</code> provides detailed documentation about specific objects, including classes, functions, and modules.</p> <p>Django</p> <pre><code>$ django-admin shell\n\n$ import django\n$ dir(django)\n$ help(django)\n</code></pre> <p><code>djangorestframework</code> rest_framework</p> <pre><code>$ py manage.py shell\n\n$ import rest_framework\n$ dir(rest_framework)\n$ help(rest_framework)\n\n$ import rest_framework.generics\n$ dir(rest_framework.generics)\n$ help(rest_framework.generics) \n</code></pre>"},{"location":"backend/django/intro/#managepy-vs-django-admin","title":"<code>manage.py</code> vs <code>django-admin</code>","text":"<p>manage.py shell vs django shell</p> <p>python manage.py shell loads the Django project's environment, while django-admin shell provides a general Python shell without Django-specific setup.</p> <pre><code># django-admin shell provides a general Python shell without Django-specific setup.\ndjango-admin shell\n\n# python manage.py shell loads the Django project's environment.\npy manage.py shell\n</code></pre>"},{"location":"backend/django/intro/#other-topic","title":"Other Topic","text":"<p>Django Run Server</p> <pre><code>$ python manage.py runserver 127.0.0.1:7000\n\n$ python manage.py runserver 7000\n\n$ python manage.py runserver 0:7000\n</code></pre> <p>mutable &amp; immutable objects</p> <p>Mutability is a fundamental concept of the Python language and is broken down into mutable and immutable objects. </p> <p>An object is said to be mutable if its values can change over time. If an object's value will not change, then that object is said to be immutable. In Python, an object's mutability is also defined by the data type that it is. For example, mutable objects are represented using a <code>list</code>, <code>dictionary</code>, <code>set</code>, or <code>QuerySet</code>. </p> <p>Immutable objects are defined by using the <code>bool</code>, <code>decimal</code>, <code>float</code>, <code>int</code>, <code>range</code>, <code>string</code>, and <code>tuple</code> data types. Queries will perform better if the object being searched is immutable rather than mutable. </p> <p>Most of the time, the difference is miniscule, literally in nano-or milliseconds. When your project goes live and your database starts to collect thousands, if not millions, of records, the time it takes to query something will then be noticed when it takes seconds, if not minutes or tens of minutes, to complete a single query.</p> <p>Becomming Enterprise Developer (pg-122)</p> how to master Django framework <p>To master the Django framework, it's essential to gain proficiency in several key areas. Here are some of the most important topics to learn:</p> <p>1. Understanding Models:</p> <p>Django's ORM (Object-Relational Mapping) allows you to interact with your database using Python objects. Learn how to define models to represent your application's data, work with relationships between models, and use Django's querysets for database operations.</p> <p>2. Views and URLs:</p> <p>Understand how views process HTTP requests and generate responses. Learn how to map URLs to views using URL patterns, and explore Django's function-based views and class-based views.</p> <p>3. Templates and Template Language:</p> <p>Django uses a powerful templating engine to generate dynamic HTML content. Learn how to create templates, use template inheritance and inclusion, and leverage Django's template language for data rendering and logic.</p> <p>4. Forms:</p> <p>Django provides tools for working with HTML forms and handling form submissions. Learn how to create forms using Django's form classes, validate user input, and process form submissions in views.</p> <p>5. Authentication and Authorization:</p> <p>Understand how to implement user authentication and authorization in Django. Learn about Django's built-in authentication system, including user authentication views, user models, and permissions.</p> <p>6. Admin Interface:</p> <p>Django includes a customizable admin interface for managing site content. Learn how to register models with the admin interface, customize admin views, and implement custom admin actions and filters.</p> <p>7. Middleware:</p> <p>Middleware components are a key part of Django's request/response processing pipeline. Learn how to write custom middleware to perform tasks such as request/response modification, authentication, or logging.</p> <p>8. Class-Based Views (CBVs):</p> <p>While Django supports function-based views, class-based views offer a more organized and reusable approach to view development. Mastering CBVs can help you create more modular and maintainable code.</p> <p>9. RESTful APIs with Django REST Framework:</p> <p>If your application needs to expose a RESTful API, learn how to use Django REST Framework (DRF) to build APIs quickly and efficiently. DRF provides tools for serialization, authentication, pagination, and more.</p> <p>10. Testing:</p> <p>Writing tests is crucial for ensuring the reliability and correctness of your Django applications. Learn how to write unit tests, integration tests, and functional tests using Django's testing framework.</p> <p>11. Security Best Practices:</p> <p>Understand common security vulnerabilities and best practices for securing Django applications. Topics include protecting against CSRF attacks, XSS attacks, SQL injection, and ensuring secure user authentication.</p> <p>12. Deployment:</p> <p>Learn how to deploy Django applications to production environments. Understand deployment options such as using WSGI servers like Gunicorn, configuring web servers like Nginx or Apache, and setting up databases and caching solutions.</p> <p>By focusing on these key topics and building projects that utilize these concepts, you'll develop a strong foundation in Django development and be well-equipped to create robust and scalable web applications. Additionally, staying up-to-date with the latest developments in the Django ecosystem and exploring advanced topics as you gain experience will further enhance your mastery of the framework.</p> Basic of CBVs in Django <p>Certainly! Class-Based Views (CBVs) in Django provide a more structured and reusable way to handle HTTP requests compared to function-based views. Here's a comprehensive list of commonly used CBVs that you should learn:</p> <p>1. View:</p> <p>The base class for all views. It doesn't perform any actions itself but serves as the superclass for other views.</p> <p>2. TemplateView:</p> <p>Renders a template in response to a GET request. This is useful for rendering simple static pages or pages that don't require data manipulation.</p> <p>3. RedirectView:</p> <p>Redirects the user to a different URL. It's useful for implementing redirects in response to specific conditions or actions.</p> <p>4. ListView:</p> <p>Renders a list of objects from a queryset. It's often used to display a list of items from a database table or any other iterable data source.</p> <p>5. DetailView:</p> <p>Renders a detail page for a single object retrieved from a queryset. It's used to display detailed information about a specific object, typically identified by a unique identifier such as a primary key.</p> <p>6. CreateView:</p> <p>Handles the creation of new objects. It renders a form for creating a new object and processes the submitted data.</p> <p>7. UpdateView:</p> <p>Handles the updating of existing objects. It renders a form pre-filled with the data of an existing object and processes the submitted data to update the object.</p> <p>8. DeleteView:</p> <p>Handles the deletion of existing objects. It renders a confirmation page before deleting the object and then performs the deletion upon confirmation.</p> <p>9. FormView:</p> <p>Renders a form and handles its submission. It's useful for scenarios where you need custom logic for form processing.</p> <p>10. DetailView:</p> <p>Renders a detail page for a single object retrieved from a queryset. It's used to display detailed information about a specific object, typically identified by a unique identifier such as a primary key.</p> <p>11. ArchiveIndexView:</p> <p>Renders a list of objects grouped by date. It's useful for displaying archives of objects, such as blog posts grouped by publication date.</p> <p>12. YearArchiveView:</p> <p>Renders a list of objects for a specific year. It's typically used in conjunction with ArchiveIndexView to navigate through archives by year.</p> <p>13. MonthArchiveView:</p> <p>Renders a list of objects for a specific month within a year. It's used to display archives filtered by month.</p> <p>14. DayArchiveView:</p> <p>Renders a list of objects for a specific day within a month and year. It's used to display archives filtered by day.</p> <p>15. TodayArchiveView:</p> <p>Renders a list of objects for the current day. It's a shortcut for DayArchiveView with today's date.</p> <p>16. DateDetailView:</p> <p>Renders a detail page for a single object for a specific date. It's useful for displaying detailed information about an object based on its date.</p> <p>These are the core CBVs provided by Django. Mastering these classes will enable you to efficiently handle common web development tasks and build robust applications using Django's class-based views architecture.</p> Mastering CBVs in Django <p>Mastering Class-Based Views (CBVs) in Django requires a combination of understanding the underlying concepts and practical application. Here's a structured approach to mastering CBVs:</p> <p>1. Understand the Basics:</p> <ul> <li>Familiarize yourself with the different types of CBVs provided by Django, such as ListView, DetailView, CreateView, UpdateView, DeleteView, etc.</li> <li>Read the Django documentation thoroughly to understand the purpose and usage of each CBV.</li> <li>Review the source code of Django's built-in CBVs to gain insights into how they are implemented.</li> </ul> <p>2. Hands-on Practice:</p> <ul> <li>Start by creating simple projects or applications where you can apply CBVs.</li> <li>Implement basic functionalities such as displaying lists of objects, viewing details, creating, updating, and deleting objects using CBVs.</li> <li>Experiment with different CBVs and observe how they behave in different scenarios.</li> <li>Refactor existing function-based views to class-based views to understand the differences and benefits.</li> </ul> <p>3. Explore Customization:</p> <ul> <li>Dive deeper into customization options provided by CBVs. Learn how to override methods and attributes to tailor the behavior of CBVs to your specific requirements.</li> <li>Practice extending built-in CBVs to add additional functionality or modify existing behavior without rewriting the entire view.</li> </ul> <p>4. Advanced Topics:</p> <ul> <li>Explore more advanced topics related to CBVs, such as mixin classes, multiple inheritance, and view composition.</li> <li>Learn about best practices for structuring CBVs in large-scale applications to maintain code readability and reusability.</li> <li>Experiment with integrating third-party libraries or frameworks with CBVs, such as Django REST Framework for building RESTful APIs.</li> </ul> <p>5. Review and Refine:</p> <ul> <li>Regularly review your code and seek feedback from peers or mentors to identify areas for improvement.</li> <li>Refactor your codebase to incorporate best practices and design patterns related to CBVs.</li> <li>Stay updated with the latest developments in the Django ecosystem, including new features and improvements related to CBVs.</li> </ul> <p>6. Build Real Projects:</p> <ul> <li>Work on real-world projects that require complex functionality and utilize CBVs extensively.</li> <li>Apply your knowledge of CBVs to solve practical problems and implement features efficiently.</li> <li> <p>Reflect on your project experiences and identify lessons learned to improve your understanding and mastery of CBVs.</p> </li> <li> <p>Contribute to Open Source:</p> </li> <li> <p>Consider contributing to open-source projects that use CBVs. This allows you to collaborate with experienced developers, gain exposure to different coding styles, and contribute to the Django community.</p> </li> </ul> <p>By following this structured approach and combining theoretical understanding with practical application, you can gradually master Class-Based Views in Django and become proficient in building robust web applications. Remember that mastery comes with continuous learning, practice, and experimentation.</p> Example of Class-Based View (CBV) in Django: modelsviewshtmlurlsquestions <p>Let's consider a scenario where you want to display a list of books using a ListView. First, you'll define a model for the books in your models.py:</p> models.py<pre><code># models.py\nfrom django.db import models\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.CharField(max_length=100)\n    publication_date = models.DateField()\n\n    def __str__(self):\n        return self.title\n</code></pre> <p>Then, you'll create a ListView to display a list of books in your views.py:</p> views.py<pre><code># views.py\n\nfrom django.views.generic import ListView\nfrom .models import Book\n\nclass BookListView(ListView):\n    model = Book\n    template_name = 'book_list.html'  # specify the template name\n    context_object_name = 'books'     # specify the context variable name for the list of objects\n    ordering = ['-publication_date']  # specify the default ordering of the queryset\n</code></pre> <p>Next, you'll create a template to render the list of books. Create a file named book_list.html in your templates directory:</p> book_list.html<pre><code>&lt;!-- book_list.html --&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Book List&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Book List&lt;/h1&gt;\n    &lt;ul&gt;\n        {% for book in books %}\n            &lt;li&gt;{{ book.title }} - {{ book.author }} ({{ book.publication_date }})&lt;/li&gt;\n        {% empty %}\n            &lt;li&gt;No books available.&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Finally, you'll set up the URL mapping in your urls.py to associate the ListView with a URL:</p> urls.py<pre><code># urls.py\n\nfrom django.urls import path\nfrom .views import BookListView\n\nurlpatterns = [\n    path('books/', BookListView.as_view(), name='book-list'),\n]\n</code></pre> <p>Now, when a user navigates to <code>/books/</code> in the browser, Django will use the BookListView to fetch the list of books from the database and render them using the book_list.html template.</p> <p>is the context_object_name random variable name or ?</p> <p>No, context_object_name is not a random variable name. It's a specific attribute of Django's ListView class-based view (CBV) that allows you to specify the name of the variable that will be used to pass the list of objects to the template context.</p> <p>When you define a ListView in Django, it automatically retrieves a list of objects from the specified model and passes them to the template context. By default, this list is passed using the variable name object_list. However, you can customize this variable name using the context_object_name attribute.</p> <p>For example, in the following code snippet:</p> <pre><code>class BookListView(ListView):\n    model = Book\n    template_name = 'book_list.html'\n    context_object_name = 'books'\n</code></pre> <p>The context_object_name is set to 'books', which means that in the book_list.html template, the list of books will be available as the variable books.</p> <p>So, in the template:</p> <pre><code>{% for book in books %}\n    {{ book.title }}\n{% endfor %}\n</code></pre> <p>Here, books is the name specified by context_object_name, and it represents the list of books retrieved by the ListView. You can choose any meaningful name for context_object_name based on your application's context.</p> <p>This is just one example of how you can use a CBV in Django. CBVs provide a flexible and reusable way to handle different types of views in your web application, allowing you to write clean and maintainable code.</p> Question about CBVs in django <p>In Django's Class-Based Views (CBVs), the as_view() method is a crucial part of the view setup process. It's used to convert a class-based view into a view function that Django can use to handle HTTP requests.</p> <p>When you define a CBV, you're essentially defining a Python class that encapsulates the logic for processing a particular type of HTTP request. However, Django's URL routing system expects to work with functions rather than classes. So, to make your CBV compatible with Django's URL routing mechanism, you use the as_view() method.</p> <p>Here's how it works:</p> <p>1. Defining the CBV:</p> <p>First, you define your CBV by creating a subclass of one of Django's built-in CBV classes, such as ListView, DetailView, CreateView, etc. For example:</p> <pre><code>from django.views.generic import ListView\nfrom .models import MyModel\n\nclass MyListView(ListView):\n    model = MyModel\n    template_name = 'myapp/my_model_list.html'\n</code></pre> <p>2. Using as_view() in URL Configuration:</p> <p>When you include your CBV in your URL configuration (usually in urls.py), you use the as_view() method to convert the CBV into a view function that Django's URL dispatcher can work with. For example:</p> <pre><code>from django.urls import path\nfrom .views import MyListView\n\nurlpatterns = [\n    path('my-list/', MyListView.as_view(), name='my-list'),\n]\n</code></pre> <p>3. Instantiating the CBV:</p> <p>When Django's URL dispatcher matches a URL pattern to a view function, it will instantiate the CBV using the as_view() method and call the appropriate method (such as get() or post()) to handle the HTTP request.</p> <p>Behind the scenes, the as_view() method creates a function that:</p> <ul> <li>Instantiates the CBV class.</li> <li>Calls the appropriate method (dispatch()) on the instance to handle the HTTP request.</li> <li>Returns the HTTP response generated by the CBV.</li> </ul> <p>This process allows Django's URL routing system to seamlessly work with CBVs, providing a more object-oriented and modular approach to handling HTTP requests compared to traditional function-based views.</p> Detail on routers <p>In traditional Django applications that serve HTML content using Django's built-in views and templates, routers are not typically used. Routers are primarily associated with Django REST Framework (DRF), which is an additional library used for building RESTful APIs in Django.</p> <p>In traditional Django applications:</p> <p>1. URL Configuration:</p> <p>URL patterns are typically defined in the urls.py module of your Django application. You manually specify the URL patterns and map them to corresponding views or view functions.</p> <p>2. Views:</p> <p>Views in traditional Django applications are typically implemented as functions or class-based views (CBVs) within your Django application. These views are responsible for processing HTTP requests and returning HTTP responses, usually in the form of HTML content generated with Django's template engine.</p> <p>3. Templates:</p> <p>HTML templates are used to generate the content that is returned to the user's browser. Django's template engine allows you to define dynamic HTML content by embedding Python-like code within HTML templates.</p> <p>In summary, if you are building a traditional Django application that serves HTML content, you won't typically use routers. Routers are specifically designed for building RESTful APIs with Django REST Framework, where URL routing and resource management are different from traditional Django applications.</p> <p>However, if you are building a RESTful API using Django REST Framework, routers provide a convenient and efficient way to define URL patterns for your API endpoints, organize your API resources, and manage URL configurations.</p>"},{"location":"backend/django/intro/#others","title":"Others","text":"<p>pip freeze</p> <p>If you want to freeze a newly installed package only to your <code>prod-requirements.txt</code> file and not the <code>dev-requirements.txt</code>, you can manually add it to <code>prod-requirements.txt</code> after installation. Here's how you can do it:</p> <ol> <li> <p>First, install the package using pip install <code>&lt;package_name&gt;</code>.</p> </li> <li> <p>After installation, run pip freeze to see the list of installed packages.</p> </li> <li> <p>Identify the newly installed package in the output of pip freeze.</p> </li> <li> <p>Copy the line corresponding to the newly installed package, including its version, from the output of pip freeze.</p> </li> <li> <p>Open your <code>prod-requirements.txt</code> file in a text editor.</p> </li> <li> <p>Paste the copied line into your <code>prod-requirements.txt</code> file.</p> </li> <li> <p>Save the <code>prod-requirements.txt</code> file.</p> </li> </ol> <p>By following these steps, you're ensuring that the newly installed package is frozen only in your <code>prod-requirements.txt</code> file and not in your <code>dev-requirements.txt</code> file. This keeps the development and production environments separate and ensures that only production dependencies are specified in the <code>prod-requirements.txt</code>.</p> <p>Best WYSIWYG editor for website</p> <p>1. TinyMCE</p> <p>2. CKEditor</p> <ul> <li>Best WYSIWYG Editors</li> <li>20 Best WYSIWYG HTML Editors for 2024</li> <li>What is your goto WYSIWYG Editor? </li> </ul>"},{"location":"backend/django/intro/#paginator","title":"Paginator","text":"<p>pagination</p> <ul> <li> <p>What is the difference between TemplateView <code>vs</code> ListView</p> </li> <li> <p>list view vs tempate view</p> </li> </ul> <p>Warning</p> Defensive String Representation for About Model <p>A senior programmer might write the <code>__str__</code> method in a slightly more defensive and robust way.</p> <p>Here's an example of how they might do it(<code>shown in fig-1</code>):</p> <p>In this version, a few improvements have been made:</p> <ul> <li> <p>Conditional Concatenation: It checks if about_descrip is not empty before concatenating it with about_title. If <code>about_descrip</code> is empty, it simply returns <code>about_title</code>. This avoids potential errors if <code>about_descrip</code> is None or an empty string.</p> </li> <li> <p>Limiting Description Length: It limits the length of about_descrip to the first 50 characters. This helps to prevent excessively long strings from cluttering up output (you can adjust this number to fit your needs).</p> </li> <li> <p>Formatted String: It uses an f-string for string interpolation, which is more concise and readable.</p> </li> </ul> <p>By incorporating these practices, the code becomes more robust and easier to understand and maintain.</p> <p></p> How to view all app code in index.html admin.py<pre><code>@admin.register(About)\nclass AboutAdmin(admin.ModelAdmin):\n    list_display = ['title', 'description', 'image_preview']\n\n    def image_preview(self, obj):\n        if obj.image:\n            return mark_safe('&lt;img src=\"{url}\" width=\"100\" height=\"100\" /&gt;'.format(url=obj.image.url))\n        else:\n            return 'No Image'\n\n    image_preview.short_description = 'Image Preview'\n</code></pre> views.py<pre><code>from django.views.generic import TemplateView\nfrom .models import About, Contact\n\nclass IndexView(TemplateView):\n    template_name = 'index.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['about'] = About.objects.first()  # Assuming you have only one About instance\n        context['contact'] = Contact.objects.first()  # Assuming you have only one Contact instance\n        return context\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Index&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome to Our Website&lt;/h1&gt;\n    &lt;h2&gt;About Us&lt;/h2&gt;\n    &lt;p&gt;{{ about.description }}&lt;/p&gt;\n\n    &lt;h2&gt;Contact Us&lt;/h2&gt;\n    &lt;p&gt;{{ contact.description }}&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Example</p> <p>To add a nullable image field in Django, you can use the ImageField from django.db.models. By default, ImageField allows null values, so you just need to set null=True and blank=True attributes. Here's how you can do it:</p> <p>1. First, ensure you have Pillow installed. Pillow is a required dependency for handling images in Django.</p> <pre><code>pip install Pillow\n</code></pre> <p>2. In your Django model, define an ImageField and set null=True and blank=True attributes.</p> <pre><code>from django.db import models\n\nclass YourModel(models.Model):\n    image = models.ImageField(null=True, blank=True, upload_to='your_upload_path/')\n</code></pre> django nullable field <p>In Django models, null=True and blank=True are <code>two parameters</code> that can be set for a field to allow it to be optional.</p> <p>1. null=True: This parameter specifies that the database column associated with the field can store NULL values. It's a database-level option. If null=True is set, Django will store empty values as NULL in the database.</p> <p>2. blank=True: This parameter is used for form validation. When blank=True is set, the field is allowed to be left blank in forms. It's a validation-related option. Without blank=True, the field would be required in forms.</p> <p>Here's a breakdown of their roles:</p> <ul> <li>null=True: Affects database schema, allowing NULL values in the database column.</li> <li>blank=True: Affects form validation, allowing the field to be left blank in forms.</li> </ul> <p>Using null=True, blank=True together is common when you want a field to be optional both at the database level and in forms. For example, in the context of an image field, null=True allows the database to store records without images, and blank=True allows users to submit forms without uploading an image.</p> <ul> <li>Sort Apps in the Django Admin</li> </ul> <p>Reuse HasAddPermissionMixin in Django Admin for Blogs App</p> <p>Yes, you can reuse the <code>HasAddPermissionMixin</code> class in your <code>blogs</code> app's <code>admin.py</code> file, provided that you have access to it. You can either import it directly or place it in a module that both apps can access.</p> <p>Here's how you can reuse the <code>HasAddPermissionMixin</code> class in your <code>blogs</code> app's <code>admin.py</code> file:</p> <pre><code>from django.contrib import admin\nfrom .models import YourModel\nfrom websites.apps.admin import HasAddPermissionMixin\n\nclass YourModelAdmin(HasAddPermissionMixin, admin.ModelAdmin):\n    pass  # Add other admin customization as needed\n\nadmin.site.register(YourModel, YourModelAdmin)\n</code></pre> <p>In the above code, replace <code>YourModel</code> with the model you want to apply this mixin to. This will apply the <code>HasAddPermissionMixin</code> to your model admin, allowing you to control the add permission based on the existence of objects.</p> <p>Make sure that the <code>websites.apps.admin</code> module is importable from your <code>blogs</code> app. If it's not directly accessible, you may need to reorganize your code or import the mixin from a different location that both apps can access.</p> chatgpt <pre><code>django.db.models.fields\n</code></pre>"},{"location":"backend/django/intro/#ask-chatgpt","title":"ask chatgpt:","text":"<p>how does the seniort programmer writes this code:</p>"},{"location":"backend/django/intro/#static-category","title":"Static Category","text":"<p>To create a category dropdown field in a Django model, you typically use the models.CharField with choices. Here's how you can do it:</p> <pre><code>from django.db import models\n\nclass YourModel(models.Model):\n    CATEGORY_CHOICES = (\n        ('option1', 'Option 1'),\n        ('option2', 'Option 2'),\n        ('option3', 'Option 3'),\n        # Add more choices as needed\n    )\n\n    category = models.CharField(max_length=50, choices=CATEGORY_CHOICES)\n\n    # Your other fields here\n</code></pre>"},{"location":"backend/django/intro/#dynamic-category","title":"Dynamic Category","text":"<p>To create a dynamic dropdown menu where the admin can add new categories through the Django admin interface, you can utilize Django's built-in <code>ForeignKey field</code> or <code>ManyToManyField</code> if you want multiple categories per item. Here's how you can do it using <code>ForeignKey</code>:</p> <ol> <li> <p>Create a Category Model: First, create a model to represent your categories.</p> <pre><code>from django.db import models\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n</code></pre> </li> <li> <p>Register Models in admin.py: Register both models in your admin.py file to make them accessible in the Django admin interface.</p> <pre><code>from django.contrib import admin\nfrom .models import YourModel, Category\n\nadmin.site.register(YourModel)\nadmin.site.register(Category)\n</code></pre> </li> </ol>"},{"location":"backend/django/intro/#mark_safe","title":"mark_safe","text":"<pre><code>from django.utils.safestring import mark_safe\n</code></pre>"},{"location":"backend/django/intro/#pillow","title":"Pillow","text":"<p>Pillow is a Python Imaging Library (PIL) fork that provides extensive capabilities for opening, manipulating, and saving many different image file formats. It is a powerful library for image processing tasks in Python and is widely used in various applications, including web development, scientific computing, computer vision, and more.</p> <pre><code>pip install Pillow\n</code></pre> <p>In Django, Pillow is commonly used for handling image-related tasks such as uploading, processing, and serving images in web applications. Here's how Pillow is typically used in Django:</p> <ul> <li> <p><code>ImageField</code> in Models:</p> <p>Django's ImageField is used to store image files in the database. Pillow integrates seamlessly with ImageField, allowing you to handle image uploads and save them to the filesystem.</p> <pre><code>from django.db import models\n\nclass MyModel(models.Model):\n    image = models.ImageField(upload_to='images/')\n</code></pre> </li> </ul>"},{"location":"backend/django/intro/#django-built-in","title":"Django Built-in","text":"Django <code>accounts</code> IntroductionPractical <p>Django accounts typically refers to the user authentication system built using Django, a high-level Python web framework. In web development, user authentication is a common requirement where users need to register, log in, log out, and manage their accounts.</p> <p>Django provides a <code>built-in</code> authentication system that includes features such as user registration, login, logout, password management, and more. This system is highly customizable and can be extended to meet the specific requirements of different projects.</p> <p>When developers refer to \"Django accounts,\" they are often discussing the implementation and customization of these authentication features within a Django web application. This can include designing user registration forms, login views, password reset functionality, user profile pages, and other related features.</p> <p>Django accounts are an essential component of many web applications, as they allow users to securely access and interact with the application's features and data. By using Django's built-in authentication system, developers can streamline the development process and ensure that user accounts are managed securely and efficiently.</p> <p>Certainly! Below, I'll guide you through the process of setting up a basic Django project with user authentication. This will include creating a new Django project, setting up user authentication, and creating basic views and templates for user registration, login, and logout.</p> <p>Install Django: If you haven't already installed Django, you can do so using pip, Python's package manager:</p> <pre><code>pip install django\n\n# Create a new Django project:\ndjango-admin startproject myproject\n\n# Navigate to the project directory:\ncd myproject\n\n# Django's built-in authentication system is part of the django.contrib.auth module\n\n# Create a new Django app for user authentication:\npython manage.py startapp accounts\n</code></pre> <p>Create URL patterns: Define URL patterns for user authentication views in your project's urls.py file:</p> <pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('accounts/', include('accounts.urls')),\n]\n</code></pre> <p>Create URL patterns in accounts app: Create a new file called urls.py in the accounts app directory, and define URL patterns for authentication views:</p> <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login, name='login'),\n    path('logout/', views.logout, name='logout'),\n]\n</code></pre> <p>Create views: Create view functions for user registration, login, and logout in the views.py file inside the accounts app:</p> <pre><code>from django.shortcuts import render\n\ndef signup(request):\n    # Implement user registration logic here\n    return render(request, 'accounts/signup.html')\n\ndef login(request):\n    # Implement login logic here\n    return render(request, 'accounts/login.html')\n\ndef logout(request):\n    # Implement logout logic here\n    return render(request, 'accounts/logout.html')\n</code></pre> <p>Create templates: Create HTML templates for user registration, login, and logout inside a templates/accounts directory in your app. Name these templates signup.html, login.html, and logout.html, respectively. You can design these templates as per your project's requirements.</p> <pre><code># Migrate the database:\npython manage.py migrate\n\n# Run the development server:\npython manage.py runserver\n</code></pre> <p>Now, you should be able to access the user authentication views at URLs like <code>/accounts/signup/</code>, <code>/accounts/login/</code>, and <code>/accounts/logout/</code>. You can customize the views, templates, and functionality further based on your project's requirements. Additionally, you may want to implement features like password reset, user profile management, etc., as needed.</p> folder structure of accounts<pre><code>myproject/\n\u251c\u2500\u2500 accounts/\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u2502   \u251c\u2500\u2500 accounts/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 signup.html\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 login.html\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 logout.html\n\u2502   \u251c\u2500\u2500 views.py\n\u2502   \u251c\u2500\u2500 urls.py\n\u251c\u2500\u2500 myproject/\n\u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 ...\n</code></pre> <p>Efficient Data Presentation in Django Templates: Integrating Multiple Models into Your Index Page</p> <p>To display the data from the models <code>About</code>, <code>Project</code>, <code>ProjectCategory</code>, <code>ProjectItem</code>, <code>Service</code>, and <code>ServiceItem</code> in your index.html template, you'll need to pass the data from these models to the template through your view function or class-based view.</p> <p>Here's how you can modify your view to include data from all these models:</p> views.pyindex.html <pre><code>from django.shortcuts import render\nfrom django.views.generic import TemplateView\nfrom .models import About, Project, ProjectCategory, ProjectItem, Service, ServiceItem\n\nclass IndexView(TemplateView):\n    template_name = 'index.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n\n        # Retrieve the About instance\n        about_info = About.objects.first()\n        context['about_info'] = about_info\n\n        # Retrieve all projects\n        projects = Project.objects.all()\n        context['projects'] = projects\n\n        # Retrieve all project categories\n        project_categories = ProjectCategory.objects.all()\n        context['project_categories'] = project_categories\n\n        # Retrieve all service items\n        service_items = ServiceItem.objects.all()\n        context['service_items'] = service_items\n\n        return context\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Index&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;About&lt;/h1&gt;\n    &lt;p&gt;{{ about_info.title }}&lt;/p&gt;\n    &lt;p&gt;{{ about_info.description }}&lt;/p&gt;\n\n    &lt;h1&gt;Projects&lt;/h1&gt;\n    &lt;ul&gt;\n        {% for project in projects %}\n            &lt;li&gt;\n                &lt;h2&gt;{{ project.title }}&lt;/h2&gt;\n                &lt;p&gt;{{ project.description }}&lt;/p&gt;\n            &lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n\n    &lt;h1&gt;Project Categories&lt;/h1&gt;\n    &lt;ul&gt;\n        {% for category in project_categories %}\n            &lt;li&gt;{{ category.name }}&lt;/li&gt;\n            &lt;ul&gt;\n                {% for item in category.items.all %}\n                    &lt;li&gt;{{ item.title }}&lt;/li&gt;\n                    &lt;p&gt;{{ item.description }}&lt;/p&gt;\n                {% endfor %}\n            &lt;/ul&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n\n    &lt;h1&gt;Service Items&lt;/h1&gt;\n    &lt;ul&gt;\n        {% for item in service_items %}\n            &lt;li&gt;\n                &lt;h2&gt;{{ item.title }}&lt;/h2&gt;\n                &lt;p&gt;{{ item.description }}&lt;/p&gt;\n            &lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In Django, the context variable is a dictionary that is passed from the view to the template. It contains data that you want to make available to your template for rendering.</p> <p>In the provided code snippet:</p> <pre><code>projects = Project.objects.all()\ncontext['projects'] = projects\n</code></pre> <ul> <li>Project.objects.all() retrieves all instances of the Project model from the database.</li> <li>projects is a queryset containing all instances of the Project model.</li> <li>context['projects'] = projects assigns the queryset projects to the key 'projects' in the context dictionary.</li> </ul> <p>The context dictionary is then passed to the template when rendering the view. This allows you to access the data in the template using the keys of the context dictionary. For example, in your template, you would use {{ projects }} to access the list of projects retrieved from the database.</p> <p>Understanding Queryset Retrieval in Django's Model Views: all() vs first() and Looping in Templates</p> <p>The difference between <code>Project.objects.all()</code> and <code>Project.objects.first()</code> lies in the data they retrieve from the database:</p> <p>1. Project.objects.all(): This retrieves all instances of the Project model from the database. It returns a queryset, which is a list-like object containing all the instances.</p> <p>2. Project.objects.first(): This retrieves the first instance of the Project model from the database. It returns a single instance of the model, not a queryset.</p> <p>So, when you use <code>Project.objects.all()</code>, you get all instances of the Project model, and when you use <code>Project.objects.first()</code>, you get only the first instance.</p> all()first() <p>In the context of your IndexView class-based view, if you want to display all projects, you would typically use <code>Project.objects.all()</code> and iterate over them in your template using a loop. For example:</p> python<pre><code># Retrieve all projects\nprojects = Project.objects.all()\ncontext['projects'] = projects\n</code></pre> <p>Then in your template, you would loop through projects to display each project:</p> html<pre><code>{% for project in projects %}\n    &lt;h2&gt;{{ project.title }}&lt;/h2&gt;\n    &lt;p&gt;{{ project.description }}&lt;/p&gt;\n{% endfor %}\n</code></pre> <p>On the other hand, if you only need to display information about a single project (for instance, the first project), you could use <code>Project.objects.first()</code>:</p> python<pre><code># Retrieve the first project\nfirst_project = Project.objects.first()\ncontext['first_project'] = first_project\n</code></pre> <p>And then in your template, you would display information about this single project:</p> html<pre><code>&lt;h2&gt;{{ first_project.title }}&lt;/h2&gt;\n&lt;p&gt;{{ first_project.description }}&lt;/p&gt;\n</code></pre> <p>So, to summarize:</p> <ul> <li>Use <code>Project.objects.all()</code> when you want to retrieve and display all instances of the Project model.</li> <li>Use <code>Project.objects.first()</code> when you only need to retrieve and display information about the first instance of the Project model.</li> <li>If you use <code>Project.objects.all()</code>, you typically need to loop through the queryset in your template to display each project.</li> </ul>"},{"location":"backend/django/intro/#reference","title":"Reference","text":"Note <ul> <li> <p>Django in Action MEAP V01 by Christopher Trudeau - Manning publication</p> </li> <li> <p>Django Popular Apps</p> </li> <li> <p>18 Django Apps To Build And Ship a Product Quickly</p> </li> <li>Django Packages</li> <li>10 Django Packages Every Developer Must Know</li> <li>The 15 Best Django Packages for Your Application </li> <li>Top 12 Django Packages and Libraries</li> </ul> <ul> <li>django apps : github</li> <li> <p>django change default runserver port</p> </li> <li> <p>Django Best Practices: Code Structure, Naming Conventions, and Design Patterns</p> </li> </ul> <ul> <li>Books</li> <li>Mastering Django by Nigel George - 2022</li> <li>Web Development with Django - 2023</li> </ul>"},{"location":"backend/django/migration/","title":"django migrations","text":""},{"location":"backend/django/migration/#reference","title":"Reference","text":"<ul> <li>django.db.utils.IntegrityError: (1062, \"Duplicate entry '' for key 'slug'\")</li> </ul>"},{"location":"backend/django/advanced/django-celery/","title":"django celery","text":"<p>Install Celery and Redis</p> <p>Celery requires a message broker to send and receive messages. Redis is a common choice. Install Celery and Redis using pip:</p> <pre><code>pip install celery redis\n</code></pre>"},{"location":"backend/django/advanced/django-celery/#example-scenarios-for-using-celery","title":"Example Scenarios for Using <code>Celery</code>","text":"Example Example 1Example 2Monitoring Celery Tasks <p>Example 1: Sending an Email Notification</p> <p>When a user signs up on your platform, you might want to send them a welcome email. Sending the email can take some time, especially if the email server is slow or the network is congested. Using Celery, you can offload the email sending process to a background task:</p> tasks.py<pre><code>from celery import shared_task\nfrom django.core.mail import send_mail\n\n@shared_task\ndef send_welcome_email(user_id):\n    from django.contrib.auth.models import User\n    user = User.objects.get(id=user_id)\n    send_mail(\n        'Welcome!',\n        'Thank you for signing up, {}'.format(user.username),\n        'from@example.com',\n        [user.email],\n        fail_silently=False,\n    )\n</code></pre> views.py<pre><code>from django.shortcuts import render, redirect\nfrom django.contrib.auth.models import User\nfrom .tasks import send_welcome_email\n\ndef signup(request):\n    if request.method == 'POST':\n        username = request.POST['username']\n        email = request.POST['email']\n        password = request.POST['password']\n        user = User.objects.create_user(username, email, password)\n        send_welcome_email.delay(user.id)\n        return redirect('home')\n    return render(request, 'signup.html')\n</code></pre> <p>Example 2: Generating a Report</p> <p>Generating a detailed report based on user data can be time-consuming. Using Celery, you can generate the report in the background and notify the user when it's ready:</p> <p>```python \"tasks.py\" from celery import shared_task import time</p> <p>@shared_task def generate_report(user_id):     # Simulate a long-running task     time.sleep(10)     return 'Report for user {}'.format(user_id) </p><pre><code>```python title=\"views.py\"\nfrom django.shortcuts import render\nfrom django.http import JsonResponse\nfrom .tasks import generate_report\n\ndef request_report(request):\n    if request.method == 'POST':\n        user_id = request.user.id\n        result = generate_report.delay(user_id)\n        return JsonResponse({'task_id': result.id})\n    return render(request, 'request_report.html')\n</code></pre> <p>Celery provides several tools for monitoring and managing tasks:</p> <ol> <li> <p>Flower: A real-time web-based monitoring tool for Celery.</p> <ul> <li>Install Flower: <code>pip install flower</code></li> <li>Run Flower: <code>celery -A myproject flower</code></li> <li>Access Flower: Navigate to <code>http://localhost:5555/</code> in your web browser.</li> </ul> </li> <li> <p>Celery Events: Built-in command-line tool for monitoring.</p> <ul> <li>Run Celery Events: celery -A myproject events</li> </ul> </li> </ol> <p>Summary</p> <p>Celery is an essential tool for handling asynchronous tasks in Django applications. It is particularly useful for long-running tasks, I/O bound tasks, scheduled tasks, real-time updates, resource-intensive tasks, integration with external APIs, and tasks that require retry mechanisms. By offloading such tasks to Celery, you can improve the responsiveness, scalability, and maintainability of your Django applications.</p>"},{"location":"backend/django/advanced/django-channels/","title":"django channels","text":"<p>Installation</p> <pre><code>pip install django\npip install channels\npip install daphne\n\n# or\npip install django channels daphne\n\n# Start the Daphne server:\ndaphne -p 8005 myproject.asgi:application\n</code></pre> <p></p> <p>Sure, let's create a real-time example of push notifications in Django using Django Channels and Daphne. We'll set up a simple project where messages sent from one client are broadcast to all connected clients in real time.</p> <p>Guide</p>"},{"location":"backend/django/advanced/django-channels/#step-by-step-guide","title":"Step-by-Step Guide","text":"<ol> <li> <p>Install Required Packages</p> <p>First, install <code>Django</code> and <code>Django Channels</code>:</p> <p>bash</p> <pre><code>pip install django channels daphne\n</code></pre> </li> <li> <p>Create Django Project and Application</p> <p>Create a new Django project and an application within it:</p> <p>bash</p> <pre><code>django-admin startproject myproject\ncd myproject\ndjango-admin startapp myapp\n</code></pre> </li> <li> <p>Configure Django Channels</p> <p>Edit <code>myproject/settings.py</code> to include channels in your <code>INSTALLED_APPS</code> and configure the ASGI application and channel layers:</p> <p>settings.py</p> <pre><code>INSTALLED_APPS = [\n    ...\n    'channels',\n    ...\n    # Other installed apps\n    'myapp',\n]\n\nASGI_APPLICATION = 'myproject.asgi.application'\n\nCHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels.layers.InMemoryChannelLayer',\n    },\n}\n</code></pre> </li> <li> <p>Create ASGI Configuration</p> <p>Create an <code>asgi.py</code> file in your project directory:</p> myproject/asgi.py<pre><code>import os\nfrom django.core.asgi import get_asgi_application\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nfrom channels.auth import AuthMiddlewareStack\nimport myapp.routing\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = ProtocolTypeRouter({\n    \"http\": get_asgi_application(),\n    \"websocket\": AuthMiddlewareStack(\n        URLRouter(\n            myapp.routing.websocket_urlpatterns\n        )\n    ),\n})\n</code></pre> </li> <li> <p>Define WebSocket Routing</p> <p>Create a <code>routing.py</code> file in your myapp directory:</p> myapp/routing.py<pre><code>from django.urls import re_path\nfrom . import consumers\n\nwebsocket_urlpatterns = [\n    re_path(r'ws/notifications/$', consumers.NotificationConsumer.as_asgi()),\n]\n</code></pre> </li> <li> <p>Create a Consumer</p> <p>Create a <code>consumers.py</code> file in your myapp directory:</p> myapp/consumers.py<pre><code>import json\nfrom channels.generic.websocket import AsyncWebsocketConsumer\n\nclass NotificationConsumer(AsyncWebsocketConsumer):\n    async def connect(self):\n        await self.channel_layer.group_add(\"notifications\", self.channel_name)\n        await self.accept()\n\n    async def disconnect(self, close_code):\n        await self.channel_layer.group_discard(\"notifications\", self.channel_name)\n\n    async def receive(self, text_data):\n        data = json.loads(text_data)\n        message = data['message']\n\n        await self.channel_layer.group_send(\n            \"notifications\",\n            {\n                'type': 'send_notification',\n                'message': message\n            }\n        )\n\n    async def send_notification(self, event):\n        message = event['message']\n        await self.send(text_data=json.dumps({\n            'message': message\n        }))\n</code></pre> </li> <li> <p>Set Up URLs</p> <p>Create the app's <code>urls.py</code> file:</p> myapp/urls.py<pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),  # This will render the HTML page\n]\n</code></pre> <p>Update the project-level urls.py:</p> myproject/urls.py<pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),  # Include app URLs\n]\n</code></pre> </li> <li> <p>Create a View</p> <p>Create a simple view to render the <code>index.html</code>:</p> myapp/views.py<pre><code>from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'index.html')\n</code></pre> </li> <li> <p>Create a Simple Frontend</p> <p>Create an <code>index.html</code> file in a templates directory inside your myapp directory:</p> myapp/templates/index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Push Notifications&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Push Notifications Example&lt;/h1&gt;\n    &lt;div id=\"notifications\"&gt;&lt;/div&gt;\n    &lt;input type=\"text\" id=\"messageInput\" placeholder=\"Enter a message\"&gt;\n    &lt;button onclick=\"sendMessage()\"&gt;Send&lt;/button&gt;\n\n    &lt;script&gt;\n        const ws = new WebSocket('ws://' + window.location.host + '/ws/notifications/');\n\n        ws.onmessage = function(event) {\n            const data = JSON.parse(event.data);\n            const notificationsDiv = document.getElementById('notifications');\n            notificationsDiv.innerHTML += '&lt;p&gt;' + data.message + '&lt;/p&gt;';\n        };\n\n        function sendMessage() {\n            const messageInput = document.getElementById('messageInput');\n            const message = messageInput.value;\n            ws.send(JSON.stringify({ 'message': message }));\n            messageInput.value = '';\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> </ol> <p>Running the Server</p> <ol> <li> <p>Run the Daphne server: Start the Daphne server to handle HTTP and WebSocket connections:</p> bash<pre><code>daphne -p 8000 myproject.asgi:application\n</code></pre> </li> <li> <p>Navigate to the site: Open your browser and go to http://localhost:8000/. You should see the HTML page with an input box and a button.</p> </li> <li> <p>Test the real-time notifications:</p> <ul> <li>Open multiple browser tabs or windows to <code>http://localhost:8000/</code>.</li> <li>Enter a message in the input box and click the \"Send\" button.</li> <li>The message should appear in real-time on all open tabs or windows.</li> </ul> </li> </ol> <p>Summary</p> <p>This example demonstrates how to set up real-time push notifications in a Django project using Django Channels and Daphne. The steps include configuring Django Channels, setting up ASGI, defining WebSocket routing, creating a WebSocket consumer, and building a simple frontend to send and receive messages in real-time. By following these steps, you can implement real-time communication in your Django applications.</p>"},{"location":"backend/django/advanced/django-channels/#reference","title":"Reference","text":"<ul> <li>Django Channels \u2013 Introduction and Basic Setup: geeksforgeeks</li> <li>channels: readthedocs</li> <li>Introduction to Django Channels and WebSockets: medium</li> <li>Guide to Django Channels: What it is, pros and cons and use cases</li> </ul>"},{"location":"backend/django/advanced/django-hardening/","title":"Django Hardening","text":""},{"location":"backend/django/advanced/django-hardening/#django-hardening","title":"Django Hardening","text":"<p>Django is one of the most secure web frameworks out there.</p> <p>Django hardening refers to the process of securing a Django web application by implementing various measures to mitigate potential security risks and vulnerabilities. These measures aim to protect the application and its data from unauthorized access, data breaches, and other security threats.</p> <p>However, it\u2019s easy to let things slip out, especially when we are in a hurry to see our project up and running in production. Before exposing our website or our API to the world, we need to take care of some extra details to avoid surprises.</p>"},{"location":"backend/django/advanced/django-hardening/#django-settings-for-production","title":"Django Settings for Production","text":"<p>In Chapter 5, in the Splitting the Settings File section, we configured our Django project to use different settings for each environment. As of now, we have the following settings:</p> <pre><code>decoupled_dj/settings/base.py\ndecoupled_dj/settings/development.py\n</code></pre> <p>To prepare the project for production, we create another settings file in <code>decoupled_dj/settings/production.py</code>, which will hold all the production-related settings. What should go in this file? Some of the most important settings for production in Django are:</p>"},{"location":"backend/django/advanced/django-hardening/#authentication-and-cookies-in-django","title":"Authentication and Cookies in Django","text":"<p><code>decoupled_dj/settings/production.py</code> - Securing Authentication Cookies</p> <pre><code>...\nCSRF_COOKIE_SECURE = True\nSESSION_COOKIE_SECURE = True\n...\n</code></pre> <p>With <code>CSRF_COOKIE_SECURE</code> and <code>SESSION_COOKIE_SECURE</code> set to True, we ensure that session authentication related cookies are transmitted only over HTTPS.</p>"},{"location":"backend/django/advanced/django-hardening/#randomize-the-admin-url","title":"Randomize the Admin URL","text":"<p>The <code>built-in</code> admin panel is probably one of the most beloved Django features.</p> <p>However, the URL for this panel, which by default is <code>admin/</code>, can be targeted by automated brute force attacks when the website is exposed online. To mitigate the issue, we can introduce a bit of randomness in the URL, by changing it to something not easily guessable.</p> Python<pre><code>from django.urls import path, include\nfrom django.contrib import admin\nfrom django.conf import settings\n\nurlpatterns = [\n    path(\"billing/\", include(\"billing.urls\", namespace=\"billing\")),\n]\n\nif settings.DEBUG:\n    urlpatterns = [\n        path(\"admin/\", admin.site.urls),\n    ] + urlpatterns\n\nif not settings.DEBUG:\n    urlpatterns = [\n        path(\"77randomAdmin@33/\", admin.site.urls),\n    ] + urlpatterns\n</code></pre> <p>This code tells Django to change the admin URL from <code>admin/</code> to <code>77randomAdmin@33/</code> when DEBUG is False. With this little change, we add a bit more protection to the admin panel. Let\u2019s now see what we can do to improve the security of our REST API.</p>"},{"location":"backend/django/advanced/django-hardening/#reference","title":"Reference","text":"<ul> <li>Decoupled Django by Valentino Gagliardi</li> </ul>"},{"location":"backend/django/advanced/django-signals/","title":"django signals","text":"<p>Signals are a <code>built-in</code> feature of the Django framework. </p> <p></p> <p>Note</p> BasicWhen to use it?When not to use it?Best PracticesExample <p>There are three types of signals as follows:</p> <ul> <li>preserve and postsave: These signals execute before and after the <code>save()</code> method.</li> <li>predelete and postdelete: These signals execute before and after the <code>delete()</code> method.</li> <li>preinit and postinit: These signals execute before and after instantiating the model.</li> </ul> <p>Django\u2019s built-in signals let user code get notified of certain actions.</p> <p>Django Signals are useful in scenarios where you want to decouple certain behaviors from your main application logic. Here are some common scenarios where signals can be beneficial:</p> <ol> <li> <p>User Registration and Authentication:</p> <ul> <li>Welcome Emails: Automatically send a welcome email when a new user registers.</li> <li>Profile Creation: Create a user profile automatically when a new user account is created.</li> </ul> </li> <li> <p>Logging and Auditing:</p> <ul> <li>Activity Logs: Log user activities, such as login/logout events or changes to important models.</li> <li>Audit Trails: Track changes to critical data for compliance or debugging purposes.</li> </ul> </li> <li> <p>Notifications:</p> <ul> <li>Real-Time Updates: Send notifications when certain events occur, such as new messages, comments, or task assignments.</li> <li>Email/SMS Alerts: Notify administrators or users of significant events like system errors or account issues.</li> </ul> </li> <li> <p>Data Integrity and Consistency:</p> <ul> <li>Related Models: Ensure consistency between related models. For example, updating related records when a primary record changes.</li> <li>Automatic Calculations: Automatically update aggregate values, such as recalculating a user\u2019s total points when they complete a task.</li> </ul> </li> <li> <p>Background Tasks:</p> <ul> <li>Delayed Processing: Trigger background tasks using Celery or another task queue to handle resource-intensive operations without blocking the main application.</li> </ul> </li> </ol> <p>While signals are powerful, they can introduce complexity and hidden dependencies if not used carefully. Here are scenarios where it might be better to avoid signals:</p> <ol> <li> <p>Complex Business Logic:</p> <ul> <li>Readability: If the logic within your signal handlers becomes complex, it can make your code harder to understand and maintain. Consider keeping complex business logic within views or services.</li> </ul> </li> <li> <p>Performance-Critical Tasks:</p> <ul> <li>Overhead: Signals add an extra layer of function calls, which might introduce performance overhead. For high-performance applications, inline processing might be more efficient.</li> <li>Synchronous Execution: By default, signal handlers execute synchronously. For tasks that can slow down your request-response cycle, consider using Celery for asynchronous processing.</li> </ul> </li> <li> <p>Tight Coupling:</p> <ul> <li>Dependencies: Signals can lead to tight coupling between different parts of your application if overused. This can make it harder to track dependencies and debug issues.</li> <li>Testing Complexity: Signals can make unit testing more difficult because they introduce side effects. Ensure you have thorough tests for any signal-related functionality.</li> </ul> </li> <li> <p>Event-Driven Architecture:</p> <ul> <li>Event Systems: For large applications requiring extensive event-driven architecture, a dedicated event system like Apache Kafka or RabbitMQ might be more appropriate than Django\u2019s signals.</li> </ul> </li> </ol> <p>Summary: Best Practices</p> <ul> <li>Keep It Simple: Use signals for straightforward tasks like sending notifications or logging events.</li> <li>Maintain Readability: Avoid putting complex business logic in signal handlers. Keep handlers small and focused.</li> <li>Use Asynchronous Processing: Offload heavy or long-running tasks to a task queue like Celery.</li> <li>Ensure Decoupling: Be mindful of creating hidden dependencies. Ensure that the application remains easy to understand and maintain.</li> <li>Thorough Testing: Write comprehensive tests for signal handlers to ensure they work as expected and handle edge cases.</li> </ul> <p>Example Scenario: When to Use and Not Use Signals</p> <p>Use Signals:</p> <ul> <li>Automatically sending a welcome email when a new user registers.</li> <li>Logging when a user logs in or logs out.</li> </ul> <pre><code># myapp/signals.py\nfrom django.db.models.signals import post_save\nfrom django.contrib.auth.models import User\nfrom django.dispatch import receiver\nfrom django.core.mail import send_mail\n\n@receiver(post_save, sender=User)\ndef send_welcome_email(sender, instance, created, **kwargs):\n    if created:\n        send_mail(\n            'Welcome to Our Site',\n            'Thank you for registering!',\n            'from@example.com',\n            [instance.email],\n            fail_silently=False,\n        )\n</code></pre> <p>Avoid Signals:</p> <ul> <li>Complex business rules for calculating user scores based on multiple criteria.</li> <li>Performance-intensive tasks like generating large reports on data updates.</li> </ul> <p>For complex logic or performance-intensive tasks, encapsulate the logic in a service layer or use a background task queue like Celery:</p> <pre><code># Use Celery for background tasks\n# tasks.py\nfrom celery import shared_task\nfrom django.core.mail import send_mail\n\n@shared_task\ndef send_welcome_email(user_email):\n    send_mail(\n        'Welcome to Our Site',\n        'Thank you for registering!',\n        'from@example.com',\n        [user_email],\n        fail_silently=False,\n    )\n\n# Call the task from a view or another part of your application\nsend_welcome_email.delay(user.email)\n</code></pre> <p>By following these guidelines, you can effectively use Django Signals to enhance your application while avoiding common pitfalls.</p> <p></p>"},{"location":"backend/django/advanced/django-signals/#reference","title":"Reference","text":"<ul> <li>Signals Topics: Official</li> <li> <p>Signals Ref: Official</p> </li> <li> <p>Django Signals mastery </p> </li> <li>When to Use Django Signals</li> <li>Understanding Signals in Django</li> <li>Django Signals</li> <li> <p>Introduction to Django Signals: educba.com</p> </li> <li> <p>chatgpt</p> </li> </ul>"},{"location":"backend/django/advanced/django-tools/","title":"Django Tool","text":""},{"location":"backend/django/advanced/django-tools/#testing-urls","title":"Testing URLs:","text":"<p>You can test URLs using <code>Django's test client</code> to see how your views respond to different requests. For example:</p> <p>Example</p> <pre><code>&gt;&gt;&gt; from django.test import Client\n&gt;&gt;&gt; client = Client()\n&gt;&gt;&gt; response = client.get('/myapp/myurl/')\n&gt;&gt;&gt; print(response.status_code)\n</code></pre> Note <p>In your settings.py, locate the ALLOWED_HOSTS setting and add 'testserver' to the list. If you're using the wildcard '*', make sure 'testserver' is included there.</p> <pre><code># settings.py\n\nALLOWED_HOSTS = ['yourdomain.com', 'testserver']\n</code></pre> <p>By adding 'testserver' to the ALLOWED_HOSTS setting, Django will allow requests with the HTTP_HOST header set to 'testserver' during testing.</p>"},{"location":"backend/django/advanced/django-tools/#using-django-extensions","title":"Using Django Extensions:","text":"<p>Install and utilize Django Extensions, a package that adds various useful functionalities to Django, including shell_plus, which loads all models into the shell namespace to make interacting with them easier.</p> bash<pre><code>$ pip install django-extensions\n$ python manage.py shell_plus\n</code></pre> <p>To enable django_extensions in your project you need to add it to <code>INSTALLED_APPS</code> in your projects <code>settings.py</code> file:</p> <pre><code>INSTALLED_APPS = (\n    ...\n    'django_extensions',\n    ...\n)\n</code></pre>"},{"location":"backend/django/advanced/django-tools/#django-debug-toolbar","title":"Django Debug Toolbar:","text":"<p>Install and use Django Debug Toolbar to analyze and optimize your application during development.</p> bash<pre><code>$ pip install django-debug-toolbar\n</code></pre> <p>Then, add it to your <code>INSTALLED_APPS</code> and configure it properly in your settings file.</p> <pre><code>INSTALLED_APPS = [\n    # ...\n    \"debug_toolbar\",\n    # ...\n]\n</code></pre>"},{"location":"backend/django/advanced/django-tools/#reference","title":"Reference","text":"<ul> <li> <p>Documentation: Testing tools</p> </li> <li> <p>Django Extensions</p> </li> <li>django-extensions: github</li> <li>django-debug-toolbar: readthedocs.io</li> </ul>"},{"location":"backend/django/advanced/intro/","title":"Intro","text":"Django Advanced Topic <p>Django is a robust and feature-rich framework that provides many advanced features for building complex web applications. Below are some of the advanced topics in Django, including <code>signals</code> and <code>channels</code>, as well as others like <code>middleware</code>, <code>forms</code>, <code>custom model managers</code>, and more.</p>"},{"location":"backend/django/advanced/intro/#advanced-topics-in-django","title":"Advanced Topics in Django","text":"<ol> <li> <p>Django Signals</p> <ul> <li>Overview: Signals are a way to allow decoupled applications to get notified when certain events occur elsewhere in the application.</li> <li>Common Use Cases: User creation, email notifications, logging.</li> <li>Example:</li> </ul> <pre><code># signals.py\n  from django.db.models.signals import post_save\n  from django.dispatch import receiver\n  from django.contrib.auth.models import User\n  from .models import Profile\n\n  @receiver(post_save, sender=User)\n  def create_profile(sender, instance, created, **kwargs):\n      if created:\n          Profile.objects.create(user=instance)\n\n  @receiver(post_save, sender=User)\n  def save_profile(sender, instance, **kwargs):\n      instance.profile.save()\n</code></pre> </li> <li> <p>Django Channels</p> <ul> <li>Overview: Extends Django to handle WebSockets, HTTP2, and other protocols that require long-lived connections.</li> <li>Common Use Cases: Real-time chat applications, notifications, live updates.</li> <li>Example: Refer to the previous example on WebSockets for setting up real-time notifications with Django Channels.</li> </ul> </li> <li> <p>Middleware</p> <ul> <li>Overview: Middleware is a way to process requests globally before they reach the view or after the view has processed them.</li> <li>Common Use Cases: Authentication, logging, request modification.</li> <li>Example:</li> </ul> <pre><code># middleware.py\nclass SimpleMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        # Code to be executed for each request before the view (and later middleware) are called.\n        response = self.get_response(request)\n        # Code to be executed for each request/response after the view is called.\n        return response\n</code></pre> </li> <li> <p>Custom Model Managers</p> <ul> <li>Overview: Managers are the interface through which database query operations are provided to Django models.</li> <li>Common Use Cases: Adding extra manager methods, customizing queryset behavior.</li> <li>Example:</li> </ul> <pre><code>from django.db import models\n\nclass PublishedManager(models.Manager):\n    def get_queryset(self):\n        return super().get_queryset().filter(status='published')\n\nclass Post(models.Model):\n    STATUS_CHOICES = (\n        ('draft', 'Draft'),\n        ('published', 'Published'),\n    )\n    title = models.CharField(max_length=200)\n    status = models.CharField(max_length=10, choices=STATUS_CHOICES)\n\n    objects = models.Manager()  # The default manager.\n    published = PublishedManager()  # Our custom manager.\n</code></pre> </li> <li> <p>Custom Forms and Formsets</p> <ul> <li>Overview: Django forms handle user input and validation. Formsets allow handling multiple forms on a single page.</li> <li>Common Use Cases: Complex form processing, multiple related forms.</li> <li>Example:</li> </ul> <pre><code>from django import forms\nfrom .models import Post\n\nclass PostForm(forms.ModelForm):\n    class Meta:\n        model = Post\n        fields = ['title', 'content']\n\nfrom django.forms import formset_factory\nPostFormSet = formset_factory(PostForm, extra=2)\n</code></pre> </li> <li> <p>Custom Template Tags and Filters</p> <ul> <li>Overview: Template tags and filters allow custom functionalities in Django templates.</li> <li>Common Use Cases: Custom formatting, reusable template logic.</li> <li>Example:</li> </ul> <pre><code># templatetags/custom_tags.py\nfrom django import template\n\nregister = template.Library()\n\n@register.filter(name='cut')\ndef cut(value, arg):\n    return value.replace(arg, '')\n\n@register.simple_tag\ndef current_time(format_string):\n    return datetime.datetime.now().strftime(format_string)\n</code></pre> </li> </ol>"},{"location":"backend/django/advanced/intro/#reference","title":"Reference","text":"<ul> <li>The A to Z of Advanced Django</li> </ul>"},{"location":"backend/django/advanced/shortcuts/","title":"Shortcuts","text":""},{"location":"backend/django/advanced/shortcuts/#django-shortcuts","title":"Django Shortcuts","text":"<p>Django shortcuts module is a collection of helper functions that are generally used in view function/classes. There are many shortcuts available in module  <code>django.shortcuts</code>. In other words, these function/classes introduce controlled coupling for convenience's sake.</p> <p>Example</p> render()redirect()get_object_or_404()get_list_or_404() <p>It combines a given template with a dictionary and returns the HttpResponse object with that rendered text. Following is the syntax of the render() function.</p> <pre><code>from django.shortcuts import render  \ndef new_view(request):  \n    # View code here...  \n    return render(\n        request, 'newapp/index.html',\n        {  \n        'foo': 'bar',  \n        }, \n        content_type='application/xhtml+xml'\n        )\n</code></pre> <p>It is equivalent to the below code.</p> <pre><code>def new_view(request):  \n    # View code here...  \n    t = loader.get_template('newapp/index.html')  \n    c = {'foo': 'bar'}  \n    return HttpResponse(t.render(c, request), content_type='application/xhtml+xml') \n</code></pre> <p>The redirect() function is used to redirect to the specific URL. It returns an HttpResponseRedirect to the appropriate URL for the argument passed. Let's see the following syntax.</p> <p>Syntax</p> <pre><code>redirect(to, *args, permanent=False, **kwargs)  \n</code></pre> <pre><code>def blog_view(request, post_id):  \n    blog = Post.objects.get(pk=post_id)  \n    return redirect(blog)  \n    # equivalent to: return HttpResponseRedirect(blog.get_absolute_url())  \n\ndef blog_view(request, post_id):  \n    return redirect('blog_details', id=post_id)  \n    # equivalent to: return HttpResponseRedirect(reverse('blog_details', args=(post_id, )))  \n\ndef relative_url_view(request):  \n    return redirect('/blogs/archive/')  \n    # equivalent to: return HttpResponseRedirect('/blogs/archive/')  \n</code></pre> <pre><code>\n</code></pre> <p>It returns the DoesNotExist exception if the searched object is not found. On the other hand, <code>get()</code> method raise Http404.</p> <pre><code>from django.shortcuts import get_object_or_404  \ndef my_view(request):  \n    obj = get_object_or_404(MyModel, pk=1)  \n</code></pre> <p>It is equivalent to:</p> <pre><code>from django.http import Http404   \ndef my_view(request):  \n    try:  \n            obj = MyModel.objects.get(pk=1)  \n    except MyModel.DoesNotExist:  \n            raise Http404(\"No MyModel matches the given query.\")  \n</code></pre> <p>It returns the results of <code>filter()</code> on a given model manager cast to a list, raising Http404 if the resulting list is empty. The syntax is same as get_object_or_404.</p> <pre><code>from django.shortcuts import get_list_or_404  \ndef my_view(request):  \n    my_objects = get_list_or_404(MyModel, published=True)  \n</code></pre> <pre><code>from django.http import Http404  \ndef my_view(request):  \n    my_objects = list(MyModel.objects.filter(published=True))  \n    if not my_objects:  \n    raise Http404(\"No MyModel matches the given query.\")  \n</code></pre>"},{"location":"backend/django/advanced/shortcuts/#reference","title":"Reference","text":"<ul> <li>django shortcuts</li> </ul>"},{"location":"backend/django/builtin/class-based-views/","title":"generic views","text":""},{"location":"backend/django/builtin/class-based-views/#class-based-views","title":"class-based views","text":"<p>In Django, <code>View</code>, <code>TemplateView</code>, <code>ListView</code>, and <code>DetailView</code> are class-based views provided by Django's generic views framework. Each serves a specific purpose and can be used to handle different scenarios in web applications.</p> <p>Here's a brief overview of each:</p> <ol> <li> <p>View:</p> <p>The base class for all views in Django. It's a class-based approach for defining views in Django. You can subclass View and override its methods (get(), post(), etc.) to handle different HTTP methods.</p> </li> <li> <p>TemplateView:</p> <p>A generic class-based view that renders a template. It's useful for simple views that only need to render a template without any data processing. You specify the template name using the template_name attribute.</p> </li> <li> <p>ListView:</p> <p>A generic class-based view for displaying a list of objects from a queryset. It's commonly used for displaying paginated lists of objects, such as a list of blog posts or news articles. You specify the model and queryset using the model and queryset attributes.</p> </li> <li> <p>DetailView:</p> <p>A generic class-based view for displaying details of a single object. It's used for displaying detailed information about a specific object, such as a blog post or product details. You specify the model using the model attribute, and the view automatically retrieves the object based on the URL parameters.</p> </li> </ol> <p>Example</p> <pre><code>from django.views.generic import View, TemplateView, ListView, DetailView\nfrom .models import YourModel\n\nclass YourView(View):\n    def get(self, request, *args, **kwargs):\n        # Your view logic goes here\n        pass\n\nclass YourTemplateView(TemplateView):\n    template_name = 'your_template.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        # Add additional context data if needed\n        return context\n\nclass YourListView(ListView):\n    model = YourModel\n    queryset = YourModel.objects.all()  # Optionally, specify a queryset\n    template_name = 'your_list_template.html'\n    context_object_name = 'your_objects'  # Optionally, specify the context object name\n\nclass YourDetailView(DetailView):\n    model = YourModel\n    template_name = 'your_detail_template.html'\n    context_object_name = 'your_object'  # Optionally, specify the context object name\n    # Optionally, define additional context data or override other methods\n</code></pre> <p>Replace YourModel with the model you want to use, and <code>your_template.html</code>, <code>your_list_template.html</code>, and <code>your_detail_template.html</code> with the actual template names you're using.</p> <p>These are just basic examples, and you can customize each view by overriding methods or attributes as needed to fit your application's requirements.</p>"},{"location":"backend/django/builtin/class-based-views/#difference-between-view-and-templateview","title":"Difference between <code>View</code> and <code>TemplateView</code>","text":"<p>Sure, let's simplify the distinction between View and TemplateView with examples and scenarios for each:</p> <p>Example</p> ViewTemplateView <ol> <li> <p>View:</p> <p>Use Case:</p> <p>When you need to perform custom logic that doesn't directly involve rendering a template. This could include processing form submissions, interacting with external APIs, or performing complex business logic.</p> <p>Example: </p> <p>Suppose you have a contact form on your website. You might use a View to handle form submissions, validate input data, and send emails to the site administrator.</p> <pre><code>from django.views import View\nfrom django.http import HttpResponse\n\nclass ContactView(View):\n    def post(self, request):\n        # Process form submission and send email\n        return HttpResponse(\"Thank you for contacting us!\")\n</code></pre> </li> </ol> <ol> <li> <p>TemplateView:</p> <p>Use Case: </p> <p>When you simply need to render a template without any additional logic. This is useful for static pages, such as an about page, a homepage, or a contact page where you only need to display content from a template.</p> <p>Example:</p> <p>Let's say you have a simple about page on your website. You might use a TemplateView to render the about page template without any additional processing.</p> <pre><code>from django.views.generic import TemplateView\n\nclass AboutView(TemplateView):\n    template_name = 'about.html'\n</code></pre> </li> </ol> <p>In summary:</p> <ul> <li>Use <code>View</code> when you need to perform custom logic, such as handling form submissions, interacting with databases, or executing complex business logic.</li> <li>Use <code>TemplateView</code> when you only need to render a template without any additional processing or logic. This is useful for static pages or simple views that primarily serve to display content.</li> </ul> <p>In many cases, you'll use a combination of both View and TemplateView depending on the requirements of your web application. If a view involves both custom logic and rendering a template, you might start with a View and later refactor it to a TemplateView if the logic becomes simpler and you only need to render a template.</p>"},{"location":"backend/django/builtin/django-contrib-admin/","title":"django contrib admin","text":"<p>Django comes with a built-in admin interface.</p>"},{"location":"backend/django/builtin/django-contrib-admin/#touring-the-django-admin","title":"Touring the Django Admin","text":"<p>As the name implies, the Django Admin\u2019s purpose is administering your website. Its interface isn\u2019t the prettiest, and its design is focused on users who control your site. Before using the Admin, you need to understand the basics of user permissions. Django is a multi-user framework, meaning you can create websites that have user accounts, and each account can be restricted to a subset of activities. Django has fine-grained permission control, and you can get quite specific about who can do what, but it also has a high-level mechanism that is good enough for most situations.</p> <p>Note</p> <p>Django divides users into three classes:</p> <ol> <li>General User </li> <li>Staff</li> <li>Admin</li> </ol> <p>Django in Action MEAP V01</p>"},{"location":"backend/django/builtin/django-contrib-admin/#django-manager","title":"Django Manager","text":"<p>Django Manager</p> <p>In Django, a Manager is a class that provides methods for querying the database and performing <code>CRUD</code> (<code>Create</code>, <code>Read</code>, <code>Update</code>, <code>Delete</code>) operations on model instances. Every Django model has at least one Manager, and the default Manager is named objects.</p> <p>The objects Manager provides several methods to interact with the database. Here are some commonly used methods:</p> <ul> <li>YourModel.objects.all()</li> <li>YourModel.objects.get(id=1)</li> <li>YourModel.objects.filter(field=value)</li> <li>YourModel.objects.exclude(field=value)</li> <li>YourModel.objects.order_by('-field')</li> <li>YourModel.objects.first()</li> <li>YourModel.objects.last()</li> <li>YourModel.objects.values('field1', 'field2')</li> </ul> <p>In the context of <code>databases</code> or <code>models</code>, entities typically refer to the objects or items that are represented and stored within the database. In a database management system, entities are often mapped to tables, and each row in the table represents a specific instance of that entity.</p> <p>In the context of <code>Django's models</code>, entities usually refer to the objects that you define using Django's Object-Relational Mapping (ORM). In Django, you define entities using model classes, which represent tables in the database. Each instance of a model class corresponds to a row in the respective table, and each attribute of the model class typically corresponds to a column in the table.</p> <p>For example, consider a simple Django model representing a user:</p> python<pre><code>from django.db import models\n\nclass User(models.Model):\n    username = models.CharField(max_length=100)\n    email = models.EmailField()\n</code></pre> <p>In this example, User is the entity, and it's represented by the model class User. The attributes username and email define the properties of this entity, which will be stored as columns in the database table representing the User entity.</p> <p>Entities play a crucial role in database design and modeling as they represent real-world objects or concepts within the system being developed. They help in organizing and structuring data in a way that reflects the relationships and behaviors of the system's components.</p>"},{"location":"backend/django/builtin/django-contrib-admin/#rename-model-name-in-django-admin","title":"Rename model name in django admin","text":"<p>Example</p> <p>To rename the model name in the Django admin interface, you can use the verbose_name and verbose_name_plural attributes in the model's Meta class. Here's how you can do it:</p> Python<pre><code>from django.db import models\n\nclass ServiceItem(models.Model):\n    title = models.CharField(max_length=120)\n    description = models.TextField(null=True, blank=True)\n    image = models.ImageField(null=True, blank=True, upload_to=\"service/\")\n\n    class Meta:\n        db_table = \"bishow_service_item\"\n        verbose_name = \"Custom Service Item\"\n        verbose_name_plural = \"Custom Service Items\"\n</code></pre> <p>With this setup, in the Django admin interface, instead of \"Service Items\", you'll see \"Custom Service Items\" as the plural name, and instead of \"Service Item\", you'll see \"Custom Service Item\" as the singular name.</p> <code>list_display</code> attribute in a Django ModelAdmin class IntroDetail <p>The list_display attribute in a Django ModelAdmin class is used to specify which fields of the model should be displayed in the list view of the Django admin interface.</p> <p>When you register a model with the Django admin site, it provides a default list view where it shows a list of objects of that model. By default, Django admin will display a representation of each object that just says \"object\" followed by its primary key (e.g., \"<code>About object (1)</code>\").</p> <p>By specifying <code>list_display</code>, you're telling Django admin to customize this default list view by displaying specific fields from your model instead of just the default representation.</p> <p>For example, in your AboutAdmin class:</p> <pre><code>from django.contrib import admin\nfrom .models import About\n\nclass AboutAdmin(admin.ModelAdmin):\n    list_display = ('title', 'description')\n</code></pre> <p>You've specified that in the list view for the About model, Django admin should display the title and description fields of each object.</p> <p>This provides a more informative and user-friendly view of the data in the admin interface, making it easier for administrators to browse and manage the data.</p> <p>Confirm that the AboutAdmin class is correctly registered with the About model. It should look like this:</p> <pre><code>admin.site.register(About, AboutAdmin)\n</code></pre> <p>\"what is <code>list_display</code> attribute?\"</p> <p>In Django, the list_display attribute in a ModelAdmin class is a sequence (typically a tuple) of field names, specifying which fields of the model should be displayed in the list view of the Django admin interface.</p> <p>While you can use either a list or a tuple, it's a convention in Django to use a tuple for list_display. This is because list_display is not expected to be mutable; it's defining the structure of the admin interface, which should remain consistent.</p> <p>However, since Python allows both lists and tuples to be used in most contexts interchangeably, you can technically use either. Here's an example showing list_display being defined with both a list and a tuple:</p> Python<pre><code># Using a tuple\nclass MyModelAdmin(admin.ModelAdmin):\n    list_display = ('field1', 'field2', 'field3')\n\n# Using a list (not recommended, but works)\nclass MyModelAdmin(admin.ModelAdmin):\n    list_display = ['field1', 'field2', 'field3']\n</code></pre> <p>Both of the above are valid and will achieve the same result. However, using a tuple is more consistent with Django's style and intent for list_display.</p>"},{"location":"backend/django/builtin/django-contrib-admin/#preview-image-in-admin-column","title":"Preview image in admin column","text":"how to display a <code>preview</code> of the image directly in the Django admin interface <p>If you want to display a preview of the image directly in the Django admin interface without using an HTML <code>&lt;img&gt;</code> tag, you can utilize Django's built-in functionality to generate thumbnail previews of images. Django's ImageField provides a Thumbnail widget that automatically generates a thumbnail preview for images.</p> <p>Here's how you can implement it:</p> Python<pre><code>from django.contrib import admin\nfrom django.utils.safestring import mark_safe\nfrom .models import About\n\nclass AboutAdmin(admin.ModelAdmin):\n    list_display = ('title', 'description', 'display_image')\n\n    def display_image(self, obj):\n        if obj.image:\n            return mark_safe('&lt;img src=\"{}\" width=\"100\" height=\"100\" /&gt;'.format(obj.image.url))\n        else:\n            return 'No Image'\n    display_image.short_description = 'Image Preview'\n\nadmin.site.register(About, AboutAdmin)\n</code></pre> <p>In this code:</p> <ul> <li>We still define the display_image method to return an image tag.</li> <li>We use Django's mark_safe function to mark the string as safe HTML. This is necessary to prevent Django from escaping the HTML when rendering.</li> <li>If there is no image associated with the About object, we return a text saying \"No Image\".</li> <li>The <code>display_image</code> method is assigned to the list_display attribute to display the image preview along with other fields.</li> </ul> <p>With this setup, the Django admin list view for the About model will display a preview of the image (if available) directly in the interface. If there's no image, it will display \"No Image\". Adjust the width and height attributes as needed to control the size of the displayed images.</p> <p>Abstract</p> <p>To reuse the display_image method without duplicating code, you can define it as a static method and use it across multiple ModelAdmin classes. Here's how you can refactor your code:</p> Python<pre><code>from django.contrib import admin\nfrom django.utils.safestring import mark_safe\nfrom .models import About, Project, ProjectItem\n\nclass ImageDisplayMixin:\n    @staticmethod\n    def display_image(obj):\n        if obj.image:\n            return mark_safe('&lt;img src=\"{}\" width=\"100\" height=\"100\" /&gt;'.format(obj.image.url))\n        else:\n            return 'No Image'\n    display_image.short_description = 'Image Preview'\n\nclass AboutAdmin(admin.ModelAdmin, ImageDisplayMixin):\n    list_display = ('title', 'description', 'display_image')\n\nclass ProjectAdmin(admin.ModelAdmin):\n    list_display = ('title', 'description')\n\nclass ProjectItemAdmin(admin.ModelAdmin, ImageDisplayMixin):\n    list_display = ('title', 'description', 'display_image')\n\nadmin.site.register(About, AboutAdmin)\nadmin.site.register(Project, ProjectAdmin)\nadmin.site.register(ProjectItem, ProjectItemAdmin)\n</code></pre> <p>In this code:</p> <ul> <li>We've created a mixin class called ImageDisplayMixin, which contains the display_image method.</li> <li>The display_image method is decorated with @staticmethod to indicate that it doesn't require access to instance data.</li> <li>Both <code>AboutAdmin</code> and <code>ProjectItemAdmin</code> classes inherit from <code>ImageDisplayMixin</code>, allowing them to reuse the display_image method without duplicating code.</li> <li>By using this approach, you avoid redundancy and keep your code DRY (Don't Repeat Yourself).</li> </ul>"},{"location":"backend/django/builtin/django-contrib-admin/#remove-add-button-in-admin","title":"Remove add button in admin","text":"how to remove add button in admin interface BasicAdvanced <p>Yes, you can remove the \"<code>Add About</code>\" button from the Django admin interface if there is already one item present. This can be achieved by customizing the admin interface using the has_add_permission method in your ModelAdmin class.</p> <p>Here's how you can do it:</p> Python<pre><code>from django.contrib import admin\nfrom .models import About\n\nclass AboutAdmin(admin.ModelAdmin):\n    # other configurations for list_display, fields, etc.\n\n    def has_add_permission(self, request):\n        # Check if there are any existing About objects\n        if About.objects.exists():\n            # Return False to disable the \"Add About\" button\n            return False\n        # Return True to enable the \"Add About\" button\n        return True\n\nadmin.site.register(About, AboutAdmin)\n</code></pre> <p>In this code:</p> <ul> <li>We define the has_add_permission method in the AboutAdmin class.</li> <li>Inside this method, we check if there are any existing About objects in the database using About.objects.exists().</li> <li>If there are existing About objects, we return False to disable the \"<code>Add About</code>\" button.</li> <li>If there are no existing About objects, we return True to enable the \"<code>Add About</code>\" button.</li> </ul> <p>By implementing has_add_permission in this way, you can control whether the \"<code>Add About</code>\" button is displayed based on the presence of existing About objects in the database. If there is already an About object, the button will be hidden, preventing users from adding more About objects.</p> <p>The reason why HasAddPermissionMixin is not working as expected might be due to the order of inheritance in your ServiceAdmin class. In Python, the order of inheritance matters.</p> <p>When you inherit from multiple classes, Python resolves method lookups in the order specified by the inheritance list. This means that if a method is defined in both the child class and one of its parent classes, the version of the method defined in the child class will take precedence.</p> <p>In your case, HasAddPermissionMixin should come before admin.ModelAdmin in the inheritance list so that its has_add_permission method overrides the one from admin.ModelAdmin. Here's the corrected version:</p> Python<pre><code>from django.contrib import admin\nfrom django.utils.safestring import mark_safe\nfrom .models import About, Project, ProjectItem, Service, ServiceItem\n\n\nclass HasAddPermissionMixin:\n    \"\"\"\n    Mixin class to control the add permission based on the existence of objects.\n    \"\"\"\n    def has_add_permission(self, request):\n        model = self.model\n        return not model.objects.exists()\n\nclass ServiceAdmin(HasAddPermissionMixin, admin.ModelAdmin):\n    \"\"\"\n    Admin class for managing Service objects.\n    \"\"\"\n    list_display = ('title', 'description')\n</code></pre> <p>In this corrected version:</p> <ul> <li>HasAddPermissionMixin is listed before admin.ModelAdmin in the inheritance list of ServiceAdmin, ensuring that its has_add_permission method takes precedence.</li> <li>The ServiceAdmin class now inherits from HasAddPermissionMixin and admin.ModelAdmin in the correct order.</li> </ul> <p>With this setup, HasAddPermissionMixin should work as expected in the ServiceAdmin class.</p> category in django <pre><code>class ProjectItem(models.Model):\n    title = models.CharField(max_length=120)\n    description = models.TextField(null=True, blank=True)\n    image = models.ImageField(null=True, blank=True, upload_to=\"project/\")\n    link = models.CharField(null=True, blank=True, max_length=120)\n    category = models.ForeignKey('ProjectCategory', on_delete=models.CASCADE, related_name='items')\n\n    class Meta:\n        db_table = \"bishow_project_item\"\n        verbose_name = \"Project Item\"\n        verbose_name_plural = \"Project Items\"\n\nclass ProjectCategory(models.Model):\n    name = models.CharField(max_length=120)\n\n    class Meta:\n        db_table = \"bishow_project_category\"\n        verbose_name = \"Project Category\"\n        verbose_name_plural = \"Project Categories\"\n</code></pre>"},{"location":"backend/django/builtin/django-contrib-admin/#rename-app-name-in-admin","title":"Rename app name in admin","text":"<p>To rename the app name in the Django admin interface,</p> <p>you can customize the display name by providing a custom AppConfig for your app and then specifying the verbose name. Here's how you can do it:</p> <p>Create an AppConfig class in your app's apps.py file:</p> <pre><code>  # myapp/apps.py\n\n  from django.apps import AppConfig\n\n  class MyAppConfig(AppConfig):\n        name = 'myapp'\n        verbose_name = 'New Display Name'\n</code></pre> <p></p>"},{"location":"backend/django/builtin/django-contrib-admin/#customizing-django-admin-display","title":"Customizing Django Admin Display","text":"example 1:example 2: admin.py<pre><code>class BlogItemAdmin(admin.ModelAdmin):\n    list_display = ('created')\n\n    # Define a custom method to display the value of the 'created_at' field with the custom name 'created'\n    def created(self, obj):\n        return obj.created_at\n\n    # Set a custom label for the column header in the admin interface\n    created.short_description = 'Created'\n</code></pre> admin.py<pre><code>from django.contrib import admin\nfrom .models import Blog, BlogItem\n\nclass BlogItemAdmin(admin.ModelAdmin):\n    list_display = ('title', 'description', 'image', 'published', 'created_at', 'publish_status')\n\n    # Specify the order of fields in the form\n    fields = ('title', 'description', 'image', 'published', 'updated_at')\n\n    # CUSTOMIZE the Column name of model name\n    def publish_status(self, obj):\n        return \"Published\" if obj.published else \"Not Published\"\n\n    publish_status.short_description = 'Publication Status' \n    # publish_status.admin_order_field = 'published'\n\nadmin.site.register(Blog, BlogAdmin)\n</code></pre>"},{"location":"backend/django/builtin/django-contrib-admin/#model-admin","title":"Model Admin","text":"<p>Each registered admin.ModelAdmin class gets a set of CRUD pages. CRUD, besides being a very fun acronym, stands for: Create, Read, Update, and Delete, the actions you take on most pieces of data.</p> <p>The default behavior of the admin.ModelAdmin class includes all the CRUD pages, so your new class can have an empty body, using just the <code>pass</code> keyword. </p> <p>Figure 5.3. The Django Admin is an app that ships with Django giving administrators the ability to create and modify registered Model objects</p>"},{"location":"backend/django/builtin/django-contrib-admin/#reference","title":"Reference","text":"<ul> <li>Books by Agiliq - Django Books (FREE)</li> <li>Django Admin Cookbook</li> </ul>"},{"location":"backend/django/builtin/django-contrib-auth/","title":"django contrib auth","text":""},{"location":"backend/django/builtin/django-contrib-auth/#djangocontribauth","title":"django.contrib.auth","text":"<pre><code># django_project/settings.py\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\", # Yoohoo!!!!\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    # Local\n    \"accounts.apps.AccountsConfig\",\n    \"pages.apps.PagesConfig\",\n]\n</code></pre> <p>There are, in fact, 6 apps already there that Django provides for us which power the site. The first is <code>admin</code> and the second is <code>auth</code>. This is how we know the auth app is already present in our Django project.</p> <p>When we earlier ran the migrate command for the first time all of these apps were linked together in the initial database. And remember that we used the AUTH_USER_MODEL setting to tell Django to use our custom user model, not the default User model here. This is why we had to wait until that configuration was complete before running migrate for the first time.</p>"},{"location":"backend/django/builtin/django-contrib-auth/#auth-urls-and-views","title":"Auth URLs and Views","text":"<p>To use Django\u2019s built-in auth app we must explicitly add it to our <code>config/urls.py</code> file. The easiest approach is to use accounts/ as the prefix since that is commonly used in the Django community.</p> <p>Make the one line change below. Note that as our <code>urls.py</code> file grows in length, adding comments for each type of URL\u2013admin, user management, local apps, etc.\u2013helps with readability.</p> <pre><code># django_project/urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    # Django admin\n    path(\"admin/\", admin.site.urls),\n    # User management\n    path(\"accounts/\", include(\"django.contrib.auth.urls\")),\n    # new\n    # Local apps\n    path(\"\", include(\"pages.urls\")),\n]\n</code></pre> <p>What\u2019s included in the auth app? A lot it turns out. First off, there are a number of associated urls.</p> <pre><code>accounts/login/ [name=\"login\"]\naccounts/logout/ [name=\"logout\"]\naccounts/password_change/ [name=\"password_change\"]\naccounts/password_change/done/ [name=\"password_change_done\"]\naccounts/password_reset/ [name=\"password_reset\"]\naccounts/password_reset/done/ [name=\"password_reset_done\"]\naccounts/reset/&lt;uidb64&gt;/&lt;token&gt;/ [name=\"password_reset_confirm\"]\naccounts/reset/done/ [name=\"password_reset_complete\"]\n</code></pre>"},{"location":"backend/django/builtin/django-contrib-auth/#authentication-views","title":"Authentication Views","text":"<p>Django provides several views that you can use for handling login, logout, and password management. </p> <p>Django provides no default template for the authentication views. You should create your own templates for the views you want to use. The template context is documented in each view, see All authentication views.</p> <p>Using the views</p> <p>There are different methods to implement these views in your project. The easiest way is to include the provided URLconf in <code>django.contrib.auth.urls</code> in your own **URLconf, for example:</p> <pre><code>urlpatterns = [\n    path(\"accounts/\", include(\"django.contrib.auth.urls\")),\n]\n</code></pre> <p>This will include the following URL patterns:</p> <pre><code>accounts/login/ [name='login']\naccounts/logout/ [name='logout']\naccounts/password_change/ [name='password_change']\naccounts/password_change/done/ [name='password_change_done']\naccounts/password_reset/ [name='password_reset']\naccounts/password_reset/done/ [name='password_reset_done']\naccounts/reset/&lt;uidb64&gt;/&lt;token&gt;/ [name='password_reset_confirm']\naccounts/reset/done/ [name='password_reset_complete']\n</code></pre>"},{"location":"backend/django/builtin/django-contrib-auth/#create-templates-for-authentication-views","title":"Create Templates for Authentication Views","text":"<p>Django's authentication views use specific template names. You need to create these templates in your project. For example, create the following templates:</p> <p>Example</p> <pre><code>registration/login.html\nregistration/logged_out.html\nregistration/password_change_form.html\nregistration/password_change_done.html\nregistration/password_reset_form.html\nregistration/password_reset_done.html\nregistration/password_reset_confirm.html\nregistration/password_reset_complete.html\n</code></pre> login.htmlviews.pyurls.pysettings.py <p>Here's an example of a simple <code>login.html</code> template:</p> <pre><code>&lt;!-- templates/registration/login.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Login&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h2&gt;Login&lt;/h2&gt;\n    &lt;form method=\"post\"&gt;\n        {% csrf_token %}\n        {{ form.as_p }}\n        &lt;button type=\"submit\"&gt;Login&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Update <code>Views</code> in Your App</p> <p>If you want to extend the functionality or customize the behavior of the authentication views, you can create custom views in your app and update the URL configuration accordingly.</p> <p>For example, you can create a custom login view in <code>myapp/views.py</code>:</p> <pre><code># myapp/views.py\nfrom django.contrib.auth.views import LoginView\n\nclass CustomLoginView(LoginView):\n    template_name = 'registration/login.html'\n</code></pre> <p>And update the URL configuration to use this custom view:</p> <pre><code># myapp/urls.py\nfrom django.urls import path\nfrom .views import CustomLoginView\n\nurlpatterns = [\n    path('login/', CustomLoginView.as_view(), name='login'),\n    # Other URL patterns for your app\n]\n</code></pre> <pre><code># myproject/settings.py\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/accounts/login/'\n</code></pre> Question <p>In Django, django.contrib.auth.views and django.views are modules that provide various functionalities related to authentication and generic views, respectively.</p> django.contrib.auth.viewsdjango.views <p>The <code>django.contrib.auth.views</code> module specifically deals with authentication-related views and functionalities. Here are some key components it provides:</p> <ol> <li> <p>Login and Logout Views:</p> <ul> <li>LoginView: Allows users to log in to the site.</li> <li>LogoutView: Allows users to log out from the site.</li> </ul> </li> <li> <p>Password Management:</p> <ul> <li>PasswordChangeView: Allows users to change their password.</li> <li>PasswordChangeDoneView: Confirmation view after a password change.</li> <li>PasswordResetView: Allows users to request a password reset.</li> <li>PasswordResetDoneView, PasswordResetConfirmView, PasswordResetCompleteView: Views for handling password reset flow.</li> </ul> </li> <li> <p>User Management:</p> <ul> <li>UserCreationForm, UserChangeForm: Forms for creating and changing user accounts.</li> <li>UserDetailView: View for displaying user details.</li> </ul> </li> <li> <p>Permissions and Authorization:</p> <ul> <li>Views and forms related to permissions and authorization checks.</li> </ul> </li> </ol> <p>These views and functionalities provided by django.contrib.auth.views help developers quickly implement common authentication-related features in their Django applications.</p> <p>On the other hand, <code>django.views</code> is a module that provides generic views for handling common web development patterns. Some of the generic views provided by django.views include:</p> <ul> <li>View: The base class for all views. It handles HTTP request processing.</li> <li>TemplateView: Renders a given template, with the context passed through.</li> <li>RedirectView: Redirects to a specified URL.</li> <li>ListView: Renders a list of objects from a queryset.</li> <li>DetailView: Renders the details of a single object from a queryset.</li> </ul> <p>These generic views simplify the implementation of common tasks in Django web development, such as rendering data from models, handling redirects, or displaying static templates.</p> <p>Summary</p> <ul> <li><code>django.contrib.auth.views</code>: Deals with authentication-related views and functionalities like login, logout, password management, and user management.</li> <li><code>django.views</code>: Provides generic views for handling common web development patterns such as rendering templates, handling redirects, and displaying lists or details of objects.</li> </ul> <p>Both modules are essential in Django development, offering convenient abstractions and utilities to streamline the creation of robust web applications.</p>"},{"location":"backend/django/builtin/django-contrib-auth/#reference","title":"Reference","text":"<ul> <li>Django for Professionals by William S. Vincent</li> <li>Authentication Views</li> <li>learndjango auth</li> <li>Django Authentication</li> <li>Django auth: official</li> </ul>"},{"location":"backend/django/builtin/django-contrib-contenttypes/","title":"django contrib contenttypes","text":""},{"location":"backend/django/builtin/django-contrib-contenttypes/#djangocontribcontenttypes","title":"django.contrib.contenttypes","text":""},{"location":"backend/django/builtin/django-contrib-contenttypes/#the-contenttypes-framework","title":"The contenttypes framework","text":"<p>Django includes a contenttypes application that can track all of the models installed in your Django-powered project, providing a high-level, generic interface for working with your models.</p> <p><code>django.contrib.contenttypes</code> is a Django app that provides a framework for content types. It allows you to create relationships between different models without having to hardcode the model classes. Instead of directly referring to a model class, you can use the ContentType framework to get the model's metadata, such as the app label and the model's name. This is particularly useful for generic relationships where you want to associate an object with any type of model without specifying the model directly.</p> <p>For example, let's say you have a <code>Tag</code> model and you want to associate it with any other model in your project. You can use ContentType to create a generic foreign key:</p> <pre><code>from django.contrib.contenttypes.fields import GenericForeignKey\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\n\nclass TaggedItem(models.Model):\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    content_object = GenericForeignKey('content_type', 'object_id')\n    tag = models.CharField(max_length=50)\n\n    # Other fields and methods\n</code></pre> <p>With this setup, you can associate any model instance with a tag without explicitly defining a foreign key for each model.</p> <p><code>django.contrib.contenttypes</code> also provides utilities for working with content types programmatically, such as retrieving the model class for a given content type, getting all related objects for a given object, and so on. It's a powerful tool for building flexible and reusable Django applications.</p>"},{"location":"backend/django/builtin/django-contrib-contenttypes/#reference","title":"Reference","text":"<ul> <li>how does django content types work? stackoverflow</li> </ul>"},{"location":"backend/django/builtin/django-contrib-messages/","title":"django contrib messages","text":"<p>django</p>"},{"location":"backend/django/builtin/django-paginator/","title":"Django Paginator","text":""},{"location":"backend/django/builtin/django-paginator/#django-paginator","title":"django paginator","text":""},{"location":"backend/django/builtin/django-paginator/#reference","title":"Reference","text":"<ul> <li> <p>pagination: official django</p> </li> <li> <p>Pagination for a User-Friendly Django App</p> </li> </ul>"},{"location":"backend/django/builtin/intro/","title":"Intro","text":""},{"location":"backend/django/builtin/intro/#intro","title":"Intro","text":"<p><code>django.contrib</code> is a package in Django that contains a collection of optional, reusable components contributed by the Django community. These components are maintained by the Django core team but are not essential to the core functionality of Django. Instead, they provide additional features that can be integrated into Django projects as needed.</p> <p>Some of the most commonly used packages within <code>django.contrib</code> include:</p> <p>Note</p> <ol> <li>admin: Provides the Django administration site, which allows you to manage your site's data through a web interface.</li> <li>auth: Provides user authentication and authorization functionality, including user management, permissions, and groups.</li> <li>contenttypes: Provides a framework for content types, allowing you to create relationships between different models without hardcoding model classes.</li> <li>sessions: Provides session management functionality for maintaining state across HTTP requests.</li> <li>messages: Provides a way to display temporary messages (e.g., success messages, error messages) to users.</li> <li>staticfiles: Provides utilities for managing static files (e.g., CSS, JavaScript) in Django projects.</li> <li>gis: Provides geographic information system (GIS) functionality for working with spatial data.</li> </ol> <p>These packages can be included in your Django project by adding them to the <code>INSTALLED_APPS</code> setting in your project's <code>settings.py</code> file. For example:</p> <pre><code>INSTALLED_APPS = [\n    ...\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    ...\n]\n</code></pre> <p>By including these packages, you can leverage their functionality in your Django project without having to build everything from scratch.</p>"},{"location":"backend/django/builtin/intro/#packages","title":"packages","text":"<ul> <li> <p>An administration site</p> <p><code>django.contrib.admin</code></p> <p> Reference</p> </li> <li> <p>An authentication framework</p> <p><code>django.contrib.auth</code></p> <p> Reference</p> </li> <li> <p>A framework for handling content types</p> <p><code>django.contrib.contenttypes</code></p> <p> Reference</p> </li> <li> <p>A session framework</p> <p><code>django.contrib.sessions</code></p> <p> Reference</p> </li> <li> <p>A messaging framework</p> <p><code>django.contrib.messages</code></p> <p> Reference</p> </li> <li> <p>A framework for managing static files </p> <p><code>django.contrib.staticfiles</code></p> <p> Reference</p> </li> </ul>"},{"location":"backend/django/builtin/intro/#class-based-view-vs-function-based-view","title":"Class-based view vs Function-based view","text":"<p>Those are the main differences between <code>function-based views</code> and <code>class-based views</code>. Now, Django\u2019s generic <code>class-based views</code> are a different story.</p> <p>Generic Class-Based Views</p> <p>The generic <code>class-based-views was</code> introduced to address the common use cases in a Web application, such as creating new objects, form handling, list views, pagination, archive views and so on.</p> <ul> <li>They come in the Django core, and you can implement them from the module <code>django.views.generic</code>.</li> <li>They are great and can speed up the development process.</li> </ul> <p>Here is an overview of the available views:</p> <ul> <li> <p>GENERIC BASE</p> <ul> <li>View</li> <li>TemplateView</li> <li>RedirectView</li> </ul> </li> <li> <p>GENERIC DETAIL</p> <ul> <li>DetailView</li> </ul> </li> <li> <p>GENERIC LIST</p> <ul> <li>ListView</li> </ul> </li> <li> <p>GENERIC EDIT</p> <ul> <li>FormView</li> <li>CreateView</li> <li>UpdateView</li> <li>DeleteView</li> </ul> </li> <li> <p>GENERIC DATES</p> <ul> <li>ArchiveIndexView</li> <li>YearArchiveView</li> <li>MonthArchiveView</li> <li>WeekArchiveView</li> <li>DayArchiveView</li> <li>TodayArchiveView</li> <li>DateDetailView</li> </ul> </li> <li> <p>AUTH VIEWS</p> <ul> <li>LoginView</li> <li>LogoutView</li> <li>PasswordChangeDoneView</li> <li>PasswordChangeView</li> <li>PasswordResetCompleteView</li> <li>PasswordResetConfirmView</li> <li>PasswordResetDoneView</li> <li>PasswordResetView</li> </ul> </li> </ul> <ul> <li>Class-Based Views vs. Function-Based Views</li> <li>Classy Class-Based Views.</li> </ul>"},{"location":"backend/django/builtin/intro/#reference","title":"Reference","text":"<ul> <li>Django 4 By Example Fourth Edition by Antonio Mel\u00e9: pg-12</li> </ul>"},{"location":"backend/django/mixins/context-processors/","title":"context processors","text":"<p>utils/context_processors.py</p> <pre><code>from myapps.commons.models import FooterSocialMedia, Logo\n\ndef united_context(req):\n    social_media = FooterSocialMedia.objects.all()\n    logo = Logo.objects.first()\n\n    return {\n        'social_media': social_media,\n        'logo': logo,\n    }\n</code></pre>"},{"location":"backend/django/mixins/custom-char-field-widget/","title":"custom char field widget","text":"<p>utils/custom_char_field_widget.py</p> <pre><code>from django.forms import TextInput\n\nclass CustomCharFieldWidget(TextInput):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.attrs.update({'style': 'width: 100%;'})\n</code></pre>"},{"location":"backend/django/mixins/custom-char-field-widget/#usage","title":"Usage","text":"<p>admin.py</p> <pre><code>from django.contrib import admin\nfrom django.db import models\nfrom .models import Business\nfrom utils.custom_char_field_widget import CustomCharFieldWidget\n\n@admin.register(Business)\nclass BusinessAdmin(admin.ModelAdmin):\n    formfield_overrides = {\n        models.CharField: { 'widget': CustomCharFieldWidget }\n    }\n    list_display = ('title', 'content')\n</code></pre>"},{"location":"backend/django/mixins/custom-text-field-widget/","title":"custom text field widget","text":"<p>utils/custom_text_field_widget.py</p> <pre><code>from django.forms import Textarea\n\n# class CustomTextFieldWidget(Textarea):\n#     def __init__(self, *args, **kwargs):\n#         super().__init__(*args, **kwargs)\n#         self.attrs.update({'style': 'width: 100%;', 'rows': '10'})\n\nclass CustomTextFieldWidget(Textarea):\n    def __init__(self, *args, **kwargs):\n        # Default to 10 rows if not provided\n        rows = kwargs.pop('rows', '10')\n        super().__init__(*args, **kwargs)\n        self.attrs.update({'style': 'width: 100%;', 'rows': rows})\n        # CustomTextFieldWidget(rows='5')\n</code></pre>"},{"location":"backend/django/mixins/custom-text-field-widget/#usage","title":"Usage","text":"<p>admin.py</p> <pre><code>from django.contrib import admin\nfrom django.db import models\nfrom .models import About\nfrom utils.custom_text_field_widget import CustomTextFieldWidget\n\n@admin.register(About)\nclass AboutAdmin(admin.ModelAdmin):\n    formfield_overrides = {\n        models.TextField: { 'widget': CustomTextFieldWidget }\n    }\n\n    list_display = ('title', 'content')\n</code></pre>"},{"location":"backend/django/mixins/image-display-mixins/","title":"image display mixins","text":"<p>utils/image_display_mixins.py</p> <pre><code>from django.utils.safestring import mark_safe\n\nclass ImageDisplayMixin:\n    \"\"\"\n    Mixin class to display image preview in the Django admin.\n    \"\"\"\n    @staticmethod\n    def display_image(obj):\n        if obj.image:\n            return mark_safe('&lt;img src=\"{}\" width=\"100\" height=\"100\" /&gt;'.format(obj.image.url))\n        else:\n            return \"No Image\"\n\n    display_image.short_description = 'Image Preview'\n</code></pre>"},{"location":"backend/django/mixins/image-display-mixins/#usage","title":"Usage","text":"<p>admin.py</p> <pre><code>from django.contrib import admin\nfrom utils.image_display_mixins import ImageDisplayMixin\nfrom .models import Gallery\n\n@admin.register(Gallery)\nclass GalleryAdmin(ImageDisplayMixin, admin.ModelAdmin):\n    list_display = ('title', 'display_image') \n</code></pre>"},{"location":"backend/django/mixins/image-size-validators/","title":"image size validators","text":"<p>utils/image_size_validators.py</p> <pre><code>from django.core.exceptions import ValidationError\n\ndef validate_image_size(value):\n    \"\"\"\n    Validates that the uploaded image is at most 2MB.\n    \"\"\"\n    # Limit file size to 5MB\n    max_size = 2 * 1024 * 1024 \n\n    # Check if the uploaded file exceeds the maximum size\n    if value.size &gt; max_size:\n        raise ValidationError('The maximum image size allowed is 2MB.')\n</code></pre>"},{"location":"backend/django/mixins/image-size-validators/#usage","title":"Usage","text":"<p>models.py</p> <pre><code>from django.db import models\nfrom utils.image_size_validators import validate_image_size\n\nclass Gallery(models.Model):\n    title = models.CharField(max_length=120, null=True, blank=True, help_text='Optional')\n    image = models.ImageField(upload_to='gallery/',  validators=[validate_image_size])\n</code></pre>"},{"location":"backend/django/mixins/image-type-validators/","title":"image type validators","text":"<p>utils/image-type-validators.py</p> <pre><code>from PIL import Image\nfrom django.core.exceptions import ValidationError\n\ndef validate_image_type(image):\n    \"\"\"\n    Validate the uploaded image.\n    \"\"\"\n    try:\n        # Open the image file\n        img = Image.open(image)\n\n        # Ensure it's in a supported format\n        supported_formats = ('JPEG', 'PNG', 'GIF', 'WEBP')\n        if img.format not in supported_formats:\n            raise ValidationError(\"Unsupported image format. Supported formats: JPEG, PNG, GIF\")\n\n        # Additional validation checks can be added here if needed\n\n    except IOError:\n        # Unable to open image file\n        raise ValidationError(\"Invalid image file\")\n</code></pre>"},{"location":"backend/django/mixins/image-type-validators/#usage","title":"Usage","text":"<p>models.py</p> <pre><code>from django.db import models\nfrom utils.image_type_validators import validate_image_type\n\nclass YourModel(models.Model):\n    image = models.ImageField(upload_to='gallery/')\n\n    def clean(self):\n        \"\"\"\n        Validate the uploaded image before saving.\n        \"\"\"\n        if self.image:\n            validate_image_type(self.image)\n\n    def save(self, *args, **kwargs):\n        \"\"\"\n        Override the save method to perform image validation before saving.\n        \"\"\"\n        self.clean()\n        super().save(*args, **kwargs)\n</code></pre>"},{"location":"backend/django/mixins/intro/","title":"Intro","text":"<p>When you need to provide a specific behavior for several class-based views, it is recommended that you use <code>mixins</code>.</p>"},{"location":"backend/django/mixins/intro/#using-mixins-for-class-based-views","title":"Using mixins for class-based views","text":"<p>Mixins are a special kind of multiple inheritance for a class. You can use them to provide common discrete functionality that, when added to other <code>mixins</code>, allows you to define the behavior of a class.</p> <p>There are two main situations to use mixins:</p> <ul> <li>You want to provide multiple optional features for a class</li> <li>You want to use a particular feature in several classes</li> </ul> <p>Django comes with several mixins that provide additional functionality to your class-based views.</p> <p>You can learn more about mixins at <code>https://docs.djangoproject.com/en/4.1/topics/class-based-views/mixins/</code>.</p> <p>Django by Example <code>pg: 542</code></p>"},{"location":"backend/django/mixins/intro/#image-validation-in-the-django","title":"Image Validation in the django","text":"<p>Success</p> modelReusestructuremy structure<code>__init__.py</code> models.py<pre><code>from django.core.exceptions import ValidationError\n\ndef validate_image_size(value):\n    \"\"\"\n    Validates that the uploaded image is at most 2MB.\n    \"\"\"\n    # Limit file size to 2MB\n    max_size = 2 * 1024 * 1024 \n\n    # Check if the uploaded file exceeds the maximum size\n    if value.size &gt; max_size:\n        raise ValidationError('The maximum image size allowed is 2MB.')\n\n\n# Now use this in the class\nclass Contact(models.Model):\n    title = models.CharField(max_length=120)\n    description = models.TextField(null=True, blank=True)\n    image = models.ImageField(upload_to=\"contact/\", validators=[validate_image_size])\n</code></pre> <p>Note:</p> <p>In this code:</p> <ul> <li>We define a custom validator function <code>validate_image_size</code> that checks if the uploaded image size exceeds 2MB. If it does, it raises a <code>ValidationError</code>.</li> <li>We then apply this custom validator to the <code>image</code> field of the Contact model.</li> </ul> <p>With this setup, when you attempt to upload an image larger than 2MB via the Django admin interface, it will raise a validation error and prevent the image from being saved. </p> <p>To reuse the image validation code across multiple Django apps, you can create a separate module for your custom validators and import them wherever needed. Here's how you can do it:</p> validatormodelanother apps <p>First, create a new file named <code>validators.py</code> (or any name you prefer) inside your Django app directory or within a shared utilities package:</p> validators.py<pre><code>from django.core.exceptions import ValidationError\n\ndef validate_image_size(value, max_size=2 * 1024 * 1024):\n    \"\"\"\n    Validates that the uploaded image is at most the specified size.\n    \"\"\"\n    if value.size &gt; max_size:\n        raise ValidationError(f'The maximum image size allowed is {max_size/(1024*1024)}MB.')\n</code></pre> validators.py<pre><code>from django.core.exceptions import ValidationError\n\ndef validate_image_size(value):\n    \"\"\"\n    Validates that the uploaded image is at most 2MB.\n    \"\"\"\n    # Limit file size to 2MB\n    max_size = 2 * 1024 * 1024 \n\n    # Check if the uploaded file exceeds the maximum size\n    if value.size &gt; max_size:\n        raise ValidationError('The maximum image size allowed is 2MB.')\n</code></pre> <p>Now, you can import and use this validator function in any of your models across your Django project. For example, to use it in your Contact model and any other models that require image validation:</p> models.py<pre><code>from django.db import models\nfrom .validators import validate_image_size\n\nclass Contact(models.Model):\n    title = models.CharField(max_length=120)\n    description = models.TextField(null=True, blank=True)\n    image = models.ImageField(upload_to=\"contact/\", validators=[validate_image_size])\n\n    def __str__(self):\n        return self.title\n</code></pre> <p>And if you have another model in a different app that also requires image size validation, you can import and use the validator in that model as well:</p> models.py<pre><code># models.py in another app\n\nfrom django.db import models\nfrom shared_utils.validators import validate_image_size\n\nclass AnotherModel(models.Model):\n    title = models.CharField(max_length=120)\n    image = models.ImageField(upload_to=\"another_model/\", validators=[validate_image_size])\n\n    def __str__(self):\n        return self.title\n</code></pre> <p>This way, you can reuse the <code>validate_image_size</code> function across multiple apps within your Django project without duplicating code. It promotes code organization and maintainability.</p> <p>Creating a shared utilities folder is a good practice to organize reusable code in a Django project. However, the <code>templates</code> directory is typically reserved for HTML template files used by your Django views, so it's not the appropriate place for Python code.</p> <p>Instead, you can create a separate directory within your Django project structure to hold shared utilities. Here's a common structure:</p> <pre><code>project_name/\n\u2502\n\u251c\u2500\u2500 project_name/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2514\u2500\u2500 wsgi.py\n\u2502\n\u251c\u2500\u2500 app1/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 views.py\n\u2502   \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 app2/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 views.py\n\u2502   \u2514\u2500\u2500 ...\n\u2502\n\u2514\u2500\u2500 utils/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 validators.py\n    \u2514\u2500\u2500 other_utils.py\n</code></pre> <p>In the structure above:</p> <ul> <li><code>project_name/</code> is the root directory of your Django project.</li> <li><code>app1/</code> and <code>app2/</code> are Django apps within your project.</li> <li><code>utils/</code> is a directory where you can place shared utility functions and modules.</li> </ul> <p>So, you would create your <code>validators.py</code> file inside the <code>utils/</code> directory:</p> <pre><code>project_name/\n\u2502\n\u251c\u2500\u2500 utils/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 validators.py\n</code></pre> <p>Then, you can import and use these validators wherever needed in your Django project, as shown in the previous example. This structure keeps your project organized and makes it easy to locate and manage shared utility code.</p> <p>If you have an <code>apps</code> directory where you put all your Django apps, and you want to import the <code>validators.py</code> module located in a shared utilities folder from within one of those apps, you can use a relative import.</p> <p>Here's how you can organize your project structure to achieve this:</p> <pre><code>project_name/\n\u2502\n\u251c\u2500\u2500 apps/\n\u2502   \u251c\u2500\u2500 app1/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 app2/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 ...\n\u2502\n\u2514\u2500\u2500 utils/\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 validators.py\n</code></pre> <p>In this structure, your <code>validators.py</code> file is located in the utils directory alongside the <code>apps</code> directory, both at the same level within your project.</p> <p>To import the <code>validators.py</code> module from within one of your apps, you can use a relative import like this:</p> python<pre><code># Inside models.py of app1 or app2\nfrom ..utils.validators import validate_image_size\n# or\nfrom shared_utils.validators import validate_image_size\n</code></pre> <p>This import statement goes up one level (<code>..</code>) from the current directory (<code>app1</code> or <code>app2</code>) to the parent directory, where both <code>utils</code> and <code>apps</code> directories are located. Then it imports the <code>validate_image_size</code> function from the <code>validators.py</code> module within the <code>utils</code> directory.</p> <p>Using relative imports ensures that your code remains portable and independent of the absolute paths within your project structure.</p> <p>In Python, the <code>__init__.py</code> file serves as an indicator that the directory should be treated as a package. Although it can be an empty file, it has several important functions:</p> <ul> <li> <p>Package Initialization: It initializes the package when it is imported. This means any code you put in <code>__init__.py</code> will be executed when the package is imported.</p> </li> <li> <p>Namespace Organization: It helps organize the namespace. Without an <code>__init__.py</code> file, Python won't recognize the directory as a package, and you won't be able to import modules from it using dot notation.</p> </li> <li> <p>Python 3 Namespace Packages: In Python 3, <code>__init__.py</code> is not required to create a package; you can have namespace packages without them. However, it's still common practice to include <code>__init__.py</code> files for compatibility and to support older Python versions.</p> </li> <li> <p>Explicit Initialization: It makes package initialization explicit. By including an <code>__init__.py</code> file, you can add any necessary initialization code or imports, making it clear that the directory is intended to be a package.</p> </li> </ul> <p>In the context of Django projects, including an <code>__init__.py</code> file in your utils directory is not strictly required, especially for Django projects using Python 3 and above. However, it's still considered a good practice for consistency and compatibility with older Python versions. It also allows you to extend your utilities package in the future if needed, by adding initialization code or additional modules.</p>"},{"location":"backend/django/mixins/intro/#other","title":"other","text":""},{"location":"backend/django/mixins/intro/#overview","title":"Overview","text":"<p>Tip</p> <pre><code>pip install django~=4.2\n</code></pre> <pre><code>utils\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 custom_char_field_widget.py\n\u251c\u2500\u2500 custom_text_field_widget.py\n\u251c\u2500\u2500 image_display_mixins.py\n\u251c\u2500\u2500 image_validators.py\n\u2514\u2500\u2500 permission_mixins.py\n</code></pre>"},{"location":"backend/django/mixins/intro/#utils-mixins","title":"Utils Mixins","text":"<p>Success</p> char widgettext widgetimage displayimage validationpermissionincremental serial num custom_char_field_widget.py<pre><code>from django.forms import TextInput\n\nclass CustomCharFieldWidget(TextInput):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.attrs.update({'style': 'width: 100%;'})\n</code></pre> custom_text_field_widget.py<pre><code>from django.forms import Textarea\n\n# class CustomTextFieldWidget(Textarea):\n#     def __init__(self, *args, **kwargs):\n#         super().__init__(*args, **kwargs)\n#         self.attrs.update({'style': 'width: 100%;', 'rows': '10'})\n\nclass CustomTextFieldWidget(Textarea):\n    def __init__(self, *args, **kwargs):\n        # Default to 10 rows if not provided\n        rows = kwargs.pop('rows', '10')\n        super().__init__(*args, **kwargs)\n        self.attrs.update({'style': 'width: 100%;', 'rows': rows})\n        # CustomTextFieldWidget(rows='5')\n</code></pre> image_display_mixins.py<pre><code>from django.utils.safestring import mark_safe\n\nclass ImageDisplayMixin:\n    \"\"\"\n    Mixin class to display image preview in the Django admin.\n    \"\"\"\n    @staticmethod\n    def display_image(obj):\n        if obj.image:\n            return mark_safe('&lt;img src=\"{}\" width=\"100\" height=\"100\" /&gt;'.format(obj.image.url))\n        else:\n            return \"No Image\"\n\n    display_image.short_description = 'Image Preview'\n</code></pre> image_validators.py<pre><code>from django.core.exceptions import ValidationError\n\ndef validate_image_size(value):\n    \"\"\"\n    Validates that the uploaded image is at most 2MB.\n    \"\"\"\n    # Limit file size to 2MB\n    max_size = 2 * 1024 * 1024 \n\n    # Check if the uploaded file exceeds the maximum size\n    if value.size &gt; max_size:\n        raise ValidationError('The maximum image size allowed is 2MB.')\n</code></pre> permission_mixins.py<pre><code>class HasAddPermissionMixin:\n    \"\"\"\n    Mixin class to control the add permission based on the existence of objects.\n    \"\"\"\n    def has_add_permission(self, request):\n        model = self.model\n        return not model.objects.exists()\n</code></pre> Incremental_serialnum_mixins.py<pre><code># mixins.py\nclass IncrementalSerialNumberMixin:\n    def get_serial_number(self, obj):\n        # Get the position of the object in the reversed queryset and add 1 to start from 1 instead of 0\n        queryset = self.model.objects.all().order_by('-pk')  # Assuming pk is the primary key\n        # queryset = self.model.objects.all()\n        return list(queryset).index(obj) + 1\n    get_serial_number.short_description = 'S.N.'\n</code></pre> <p>Tip</p> Removing `Add` &amp; `Update`<pre><code>@admin.register(ContactModel)\nclass ContactModelAdmin(admin.ModelAdmin):\n    list_display = (\"name\", \"email\", \"service\",\"message\", \"number\", \"timestamp\")\n\n    def has_add_permission(self, request):\n        return False\n\n    def has_change_permission(self, request, obj=None):\n        return False\n</code></pre>"},{"location":"backend/django/mixins/intro/#views-mixins","title":"Views Mixins","text":"<pre><code>views\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 header_mixins.py\n</code></pre> <p>Success</p> header mixin header_mixins.py<pre><code>from django.views.generic.base import ContextMixin\nfrom industries.models import IndustriesItem\nfrom business.models import BusinessItem\n\nclass HeaderMixin(ContextMixin):\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n\n        industry_items = IndustriesItem.objects.all()\n        context['industry_items'] = industry_items\n\n        business_items = BusinessItem.objects.all()\n        context['business_items'] = business_items\n\n        return context\n</code></pre> <p>Usage</p> views.py<pre><code>from django.views.generic import TemplateView\nfrom views.header_mixins import HeaderMixin\n\nclass IndexView(HeaderMixin, TemplateView):\n    template_name = 'index.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        return context\n</code></pre>"},{"location":"backend/django/mixins/intro/#beginner-vs-senior-code","title":"Beginner <code>vs</code> Senior Code","text":"<p>Handling Nullable Fields in Django Models</p> Beginner VersionSenior Programmer Version Python<pre><code># Import necessary module\nfrom django.db import models\n\n# Define the model class\nclass YourModel(models.Model):\n    # Define the title field with maximum length and nullable option\n    title = models.CharField(max_length=100, null=True)\n\n    # Define a method to return a string representation of the object\n    def __str__(self):\n        # Check if title is not None\n        if self.title is not None:\n            # Return the title\n            return self.title\n        else:\n            # Return a default string if title is None\n            return \"Untitled\"\n</code></pre> <pre><code># Utilize a concise import statement\nfrom django.db import models\n\n# Define the model class with clear and descriptive naming\nclass YourModel(models.Model):\n    # Use descriptive variable names and specify field options clearly\n    title = models.CharField(max_length=100, null=True)\n\n    # Implement a straightforward method for string representation\n    def __str__(self):\n        # Use a ternary operator for brevity and readability\n        return self.title if self.title is not None else \"Untitled\"\n</code></pre> <p>In the senior programmer version, you'll notice more concise variable naming, clearer documentation, and the use of a ternary operator for the <code>__str__</code> method, which improves readability. Additionally, comments are used sparingly, as the code itself is self-explanatory. This version demonstrates a more efficient and professional coding style, reflecting the experience and expertise of a senior developer.</p>"},{"location":"backend/django/mixins/permission-mixins/","title":"permission mixins","text":"<p>utils/permission_mixins.py</p> <pre><code>class HasAddPermissionMixin:\n\"\"\"\nMixin class to control the add permission based on the existence of objects.\n\"\"\"\ndef has_add_permission(self, request):\n    model = self.model\n    return not model.objects.exists()\n</code></pre>"},{"location":"backend/django/mixins/permission-mixins/#usage","title":"Usage","text":"<p>admin.py</p> <pre><code>from django.contrib import admin\nfrom utils.permission_mixins import HasAddPermissionMixin\nfrom .models import Contact\n\n@admin.register(Contact)\nclass ContactAdmin(HasAddPermissionMixin, admin.ModelAdmin):\n    list_display = ('mail', )\n</code></pre>"},{"location":"backend/drf/drf-functionbasedviews/","title":"drf fbv","text":"<p>Django has two types of views;</p> <ul> <li>function-based views (FBVs), &amp;</li> <li>class-based views (CBVs)</li> </ul> <p>Django originally started out with only FBVs, but then added CBVs as a way to templatize functionality so that you didn\u2019t have to write boilerplate (i.e. the same code) code over and over again.</p>"},{"location":"backend/drf/drf-functionbasedviews/#function-based-views-fbvs","title":"Function-based views (FBVs)","text":"<p>FBVs code here:</p> <p>Todo App (using FBVs)</p> <p>Let's look at how a simple todo application that allows CRUD operations would be written using only FBVs.</p> <pre><code># todo/views.py\n\nfrom django.shortcuts import render, get_object_or_404, redirect\n\nfrom .forms import TaskForm, ConfirmForm\nfrom .models import Task\n\n\ndef task_list_view(request):\n    return render(request, 'todo/task_list.html', {\n        'tasks': Task.objects.all(),\n    })\n\n\ndef task_create_view(request):\n    if request.method == 'POST':\n        form = TaskForm(data=request.POST)\n        if form.is_valid():\n            form.save()\n            return HttpResponseRedirect(reverse('task-list'))\n\n    return render(request, 'todo/task_create.html', {\n        'form': TaskForm(),\n    })\n\n\ndef task_detail_view(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    return render(request, 'todo/task_detail.html', {\n        'task': task,\n    })\n\n\ndef task_update_view(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n\n    if request.method == 'POST':\n        form = TaskForm(instance=task, data=request.POST)\n        if form.is_valid():\n            form.save()\n            return HttpResponseRedirect(reverse('task-detail', args={pk: pk}))\n\n    return render(request, 'todo/task_update.html', {\n        'task': task,\n        'form': TaskForm(instance=task),\n    })\n\n\ndef task_delete_view(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n\n    if request.method == 'POST':\n        form = ConfirmForm(data=request.POST)\n        if form.is_valid():\n            task.delete()\n            return HttpResponseRedirect(reverse('task-list'))\n\n    return render(request, 'todo/task_delete.html', {\n        'task': task,\n        'form': ConfirmForm(),\n    })\n</code></pre> <p>You can get the full source code on GitHub.</p>"},{"location":"backend/drf/drf-functionbasedviews/#class-based-views-cbvs","title":"Class-based views (CBVs)","text":"<p>CBVs code here:</p> <p></p> <p>Todo App (using CBVs)</p> <p>Now, let's rewrite our todo application to only use CBVs:</p> <pre><code># todo/views.py\n\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.views import View\n\nfrom .forms import TaskForm, ConfirmForm\nfrom .models import Task\n\n\nclass TaskListView(View):\n\n    def get(self, request, *args, **kwargs):\n        return render(request, 'todo/task_list.html', {\n            'tasks': Task.objects.all(),\n        })\n\n\nclass TaskCreateView(View):\n\n    def get(self, request, *args, **kwargs):\n        return render(request, 'todo/task_create.html', {\n            'form': TaskForm(),\n        })\n\n    def post(self, request, *args, **kwargs):\n        form = TaskForm(data=request.POST)\n        if form.is_valid():\n            task = form.save()\n            return redirect('task-detail', pk=task.pk)\n\n        return self.get(request)\n\n\nclass TaskDetailView(View):\n\n    def get(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n\n        return render(request, 'todo/task_detail.html', {\n            'task': task,\n        })\n\n\nclass TaskUpdateView(View):\n\n    def get(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        return render(request, 'todo/task_update.html', {\n            'task': task,\n            'form': TaskForm(instance=task),\n        })\n\n    def post(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        form = TaskForm(instance=task, data=request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('task-detail', pk=task.pk)\n\n        return self.get(request, pk)\n\n\nclass TaskDeleteView(View):\n\n    def get(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        return render(request, 'todo/task_confirm_delete.html', {\n            'task': task,\n            'form': ConfirmForm(),\n        })\n\n    def post(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        form = ConfirmForm(data=request.POST)\n        if form.is_valid():\n            task.delete()\n            return redirect('task-list')\n\n        return self.get(request, pk)\n</code></pre> <p>Also, let's not forget to make our urls.py call <code>as_view()</code>:</p> <pre><code># todo/urls.py\n\nfrom django.urls import path\n\nfrom .views import TaskListView, TaskDetailView, TaskCreateView, TaskUpdateView, TaskDeleteView\n\n\nurlpatterns = [\n    path('', TaskListView.as_view(), name='task-list'),\n    path('create/', TaskCreateView.as_view(), name='task-create'),\n    path('&lt;int:pk&gt;/', TaskDetailView.as_view(), name='task-detail'),\n    path('update/&lt;int:pk&gt;/', TaskUpdateView.as_view(), name='task-update'),\n    path('delete/&lt;int:pk&gt;/', TaskDeleteView.as_view(), name='task-delete'),\n]\n</code></pre> <p>You can get the full source code on Github</p>"},{"location":"backend/drf/drf-functionbasedviews/#djangos-generic-cbvs","title":"Django's Generic CBVs","text":"<p>Django's generic CBVs are great for solving common problems like retrieving, creating, modifying, and deleting objects as well as pagination and archive views. They speed up the development process too.</p> <pre><code>from django.views.generic import CreateView\n\n\nclass TaskCreateView(CreateView):\n    model = Task\n    context_object_name = 'task'\n    fields = ('name', 'description', 'is_done')\n    template_name = 'todo/task_create.html'\n</code></pre>"},{"location":"backend/drf/drf-functionbasedviews/#djangos-built-in-cbv-types","title":"Django's Built-in CBV Types","text":""},{"location":"backend/drf/drf-functionbasedviews/#reference","title":"Reference","text":"<ul> <li>Django : Class Based Views vs Function Based Views</li> <li>Class Based vs Function Based Views \u2013 Which One is Better to Use in Django?</li> <li>Class-based vs Function-based Views in Django</li> <li>What Are Django\u2019s Class-Based Views and How to Use Them Effectively</li> </ul>"},{"location":"backend/drf/drf-viewsets/","title":"drf viewsets","text":""},{"location":"backend/drf/drf-viewsets/#djangorestframework","title":"djangorestframework","text":""},{"location":"backend/drf/drf-viewsets/#drf-views","title":"DRF Views","text":"<p>The essential component of DRF views is the <code>APIView</code> class, which subclasses Django's <code>View</code> class.</p> <p><code>APIView</code> class is a base for all the views that you might choose to use in your DRF application.</p> <p>Whether it be-</p> <ul> <li>function-based views</li> <li>class-based views</li> <li>mixins</li> <li>generic view classes</li> <li>viewsets</li> </ul> <p>they all use the <code>APIView</code> class.</p> <p></p>"},{"location":"backend/drf/drf-viewsets/#class-based-views","title":"Class-based Views","text":"<p>Class-based views extend the <code>APIView</code> class. With them, you determine how requests will be handled and which policy attributes you're going to use.</p> <pre><code>from rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass DeleteAllItems(APIView):\n    def delete(self, request):\n        Item.objects.all().delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n</code></pre>"},{"location":"backend/drf/drf-viewsets/#policy-attributes","title":"Policy Attributes","text":"<p>If you want to override the default settings for your class-based views, you can use <code>policy attributes</code>.</p> <p>In the following example, we changed the permissions and how a response is rendered with the <code>permission_classes</code> and <code>renderer_classes</code> policy attributes: </p><pre><code>from rest_framework.permissions import IsAuthenticated\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass ItemsNotDone(APIView):\n\n    permission_classes = [IsAuthenticated]  # policy attribute\n    renderer_classes = [JSONRenderer]       # policy attribute\n\n    def get(self, request):\n\n        user_count = Item.objects.filter(done=False).count()\n        content = {'not_done': user_count}\n\n        return Response(content)\n</code></pre>"},{"location":"backend/drf/drf-viewsets/#function-based-views","title":"Function-based Views","text":"<p>There are two ways to directly implement <code>APIView</code>: With a function or with a class. If you're writing a view in the form of a function, you'll need to use the <code>@api_view</code> decorator.</p> <p><code>@api_view</code> is a decorator that converts a <code>function-based</code> view into an APIView subclass (thus providing the <code>Response</code> and <code>Request</code> classes). It takes a list of allowed methods for the view as an argument.</p> <pre><code>from rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\n@api_view(['DELETE'])\ndef delete_all_items(request):\n    Item.objects.all().delete()\n    return Response(status=status.HTTP_200_OK)\n</code></pre>"},{"location":"backend/drf/drf-viewsets/#policy-decorators","title":"Policy Decorators","text":"<p>If you want to override the default settings for your function-based view, you can use policy decorators. You can use one or multiple of the following</p> <ul> <li><code>@renderer_classes</code></li> <li><code>@parser_classes</code></li> <li><code>@authentication_classes</code></li> <li><code>@throttle_classes</code></li> <li><code>@permission_classes</code></li> </ul> <p>Those decorators correspond to APIView subclasses. Because the <code>@api_view</code> decorator checks if any of the following decorators are used, they need to be added below the <code>api_view</code> decorator.</p> <pre><code>from rest_framework.decorators import api_view, permission_classes, renderer_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.response import Response\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])  # policy decorator\n@renderer_classes([JSONRenderer])       # policy decorator\ndef items_not_done(request):\n    user_count = Item.objects.filter(done=False).count()\n    content = {'not_done': user_count}\n\n    return Response(content)\n</code></pre>"},{"location":"backend/drf/drf-viewsets/#viewsets","title":"ViewSets","text":"<p>A ViewSet class is simply a type of <code>class-based View</code>.</p> <p>There are four types of ViewSets, from the most basic to the most powerful:</p> <ol> <li>ViewSet</li> <li>GenericViewSet</li> <li>ReadOnlyModelViewSet</li> <li>ModelViewSet</li> </ol>"},{"location":"backend/drf/drf-viewsets/#reference","title":"Reference","text":"<ul> <li>Django REST Framework Views - ViewSets</li> <li>viewsets - django-rest-framework.org</li> </ul>"},{"location":"backend/drf/intro/","title":"Intro","text":""},{"location":"backend/drf/intro/#installation","title":"Installation","text":"bash<pre><code>pip install djangorestframework\npip install markdown       # Markdown support for the browsable API.\npip install django-filter  # Filtering support\n</code></pre> <p>Add <code>rest_framework</code> to your INSTALLED_APPS setting.</p> <p>settings.py</p> <pre><code>INSTALLED_APPS = [\n    ...\n    'rest_framework',\n    ...\n]\n\nREST_FRAMEWORK = {\n    # Use Django's standard `django.contrib.auth` permissions,\n    # or allow read-only access for unauthenticated users.\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'\n    ]\n}\n</code></pre> <p>If you're intending to use the browsable API you'll probably also want to add REST framework's login and logout views. Add the following to your root <code>urls.py</code> file.</p> <p>urls.py</p> <pre><code>urlpatterns = [\n    ...\n    path('api-auth/', include('rest_framework.urls'))\n]\n</code></pre> <p>Note that the URL path can be whatever you want.</p>"},{"location":"backend/drf/intro/#what-is-django-rest-framework","title":"What Is Django Rest Framework?","text":"<p>Django Rest Framework (DRF) is a library which works with standard Django models to build a flexible and powerful API for your project.</p>"},{"location":"backend/drf/intro/#basic-architecture","title":"Basic Architecture","text":"<p>A DRF API is composed of 3 layers: the serializer, the viewset, and the router.</p> <ul> <li> <p>Serializer: converts the information stored in the database and defined by the Django models into a format which is more easily transmitted via an API</p> </li> <li> <p>Viewset: defines the functions (<code>read</code>, <code>create</code>, <code>update</code>, <code>delete</code>) which will be available via the API</p> </li> <li> <p>Router: defines the URLs which will provide access to each viewset</p> </li> </ul> <p></p>"},{"location":"backend/drf/intro/#serializers","title":"Serializers","text":"<p>Django models intuitively represent data stored in your database, but an API will need to transmit information in a less complex structure. While your data will be represented as instances of your Model classes in your Python code, it needs to be translated into a format like JSON in order to be communicated over an API.</p> <p>The DRF serializer handles this translation. When a user submits information (such as creating a new instance) through the API, the serializer takes the data, validates it, and converts it into something Django can slot into a Model instance. Similarly, when a user accesses information via the API the relevant instances are fed into the serializer, which parses them into a format that can easily be fed out as JSON to the user.</p> <p>The most common form that a DRF serializer will take is one that is tied directly to a Django model:</p> <p>Success</p> <pre><code>class ThingSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Thing\n        fields = (\u2018name\u2019, )\n</code></pre> <p>Setting <code>fields</code> allows you to specify exactly which fields are accessible using this serializer. Alternatively, <code>exclude</code> can be set instead of <code>fields</code>, which will include all of the model\u2019s fields except those listed in <code>exclude</code>.</p> <p>Serializers are an incredibly flexible and powerful component of DRF. While attaching a serializer to a model is the most common use, serializers can be used to make any kind of Python data structure available via the API according to defined parameters.</p>"},{"location":"backend/drf/intro/#viewsets","title":"ViewSets","text":"<p>A given serializer will parse information in both directions (reads and writes), but the ViewSet is where the available operations are defined. The most common ViewSet is the ModelViewSet, which has the following built-in operations:</p> <ul> <li>Create an instance: <code>create()</code></li> <li>Retrieve/Read an instance: <code>retrieve()</code></li> <li>Update an instance (all fields or only selected fields): <code>update()</code> or <code>partial_update()</code></li> <li>Destroy/Delete an instance: <code>destroy()</code></li> <li>List instances (paginated by default): <code>list()</code></li> </ul> <p>Each of these associated functions can be overwritten if different behavior is desired, but the standard functionality works with minimal code, as follows:</p> <p>Success</p> <pre><code>class ThingViewSet(viewsets.ModelViewSet):\n    queryset = Thing.objects.all()\n    serializer_class = ThingSerializer\n</code></pre> <p>If you need more customization, you can use generic viewsets instead of the <code>ModelViewSet</code> or even individual custom views.</p>"},{"location":"backend/drf/intro/#routers","title":"Routers","text":"<p>Finally, the router provides the surface layer of your API. To avoid creating endless \u201clist\u201d, \u201cdetail\u201d and \u201cedit\u201d URLs, the DRF routers bundle all the URLs needed for a given viewset into one line per viewset, like so:</p> <p>Success</p> <pre><code># Initialize the DRF router; only once per urls.py file from rest_framework import routers`\nrouter = routers.DefaultRouter()\n\n# Register the viewset\nrouter.register(r'thing', main_api.ThingViewSet)\n</code></pre> <p>Then, all of the viewsets you registered with the router can be added to the usual <code>url_patterns</code>:</p> Python<pre><code>url_patterns += url(r'^', include(router.urls))\n</code></pre> <p>And you\u2019re up and running! Your API can now be accessed just like any of your other django pages. Next, you\u2019ll want to make sure people can find out how to use it.</p>"},{"location":"backend/drf/intro/#documentation","title":"Documentation","text":"<p>While all code benefits from good documentation, this is even more crucial for a public-facing API, since APIs can\u2019t be browsed the same way a user interface can. Fortunately, DRF can use the logic of your API code to automatically generate an entire tree of API documentation, with just a single addition to your Django url_patterns:</p> Python<pre><code>url(r'^docs/', include_docs_urls(title='My API')),\n</code></pre>"},{"location":"backend/drf/intro/#reference","title":"Reference","text":"<ul> <li>django-rest-framework.org</li> <li> <p>basics-django-rest-framework</p> </li> <li> <p>Recommended Blog</p> </li> <li>Basics of Django Rest Framework</li> <li>Single Page Application + REST as an Abstraction:</li> <li>How to Switch to a Custom Django User Model Mid-Project</li> <li>A Guide To Creating An API Endpoint With Django Rest Framework</li> <li>How to Use Django Bulk Inserts for Greater Efficiency</li> <li>Django: Recommended Reading</li> <li>Django vs WordPress: How to Decide?</li> <li>Make ALL Your Django Forms Better</li> <li>Creating Dynamic Forms with Django</li> <li>Add Value To Your Django Project With An API</li> <li>Is Django the Right Fit for your Project?</li> </ul>"},{"location":"backend/drf/python-microservices/","title":"python microservices","text":""},{"location":"backend/drf/python-microservices/#python-questions","title":"Python Questions","text":""},{"location":"backend/drf/python-microservices/#topics","title":"Topics","text":"<ul> <li>What are Microservices?</li> <li>Project Introduction</li> <li>Django Setup</li> <li>Adding Docker Files</li> <li>Connect Django with MySQL with Docker</li> <li>Models &amp; Serializers</li> <li>Rest APIs with ViewSets</li> <li>User Endpoint with APIView</li> <li>Flask Setup with Docker</li> <li>Connect Flask with Mysql</li> <li>Models</li> <li>Flask Migrations</li> <li>RabbitMQ</li> <li>Django Producer and Consumer</li> <li>Flask Producer and Consumer</li> <li>Queue Service</li> <li>Data Consistency</li> <li>Internal Http Requests</li> <li>Finishing the python apps</li> <li>React Setup</li> <li>Products CRUD</li> <li>Completing the Main App</li> </ul> <ul> <li>Learn About Python Microservices - freecodecamp</li> <li>Python Microservices Web App - Full Course (youtube)</li> <li>Microservices in Python: Django, RabbitMQ and Pika</li> <li>Building Scalable Applications with Django, Celery, and RabbitMQ: A Step-by-Step Guide</li> </ul>"},{"location":"backend/drf/package/pyjwt/","title":"pyjwt","text":"<p>Tip</p> <pre><code>pip install pyjwt\n</code></pre>"},{"location":"backend/drf/package/pyjwt/#refernce","title":"Refernce","text":"<ul> <li>pyjwt: readthedocs</li> </ul>"},{"location":"backend/fastAPI/fast-api/","title":"Fast API","text":"<p>FastAPI targets development of web APIs. FastAPI was mainly designed to build APIs, and its default input is <code>JSON</code>. FastAPI itself does not include a web server but recommends <code>Uvicorn</code>.</p> <pre><code>$ pip install fastapi uvicorn\n</code></pre> <p>You can start <code>Uvicorn</code> and the FastAPI web application in two ways:</p> <ol> <li>externally (or)</li> <li>internally</li> </ol>"},{"location":"backend/fastAPI/fast-api/#1-to-start-uvicorn-externally-via-the-command-line","title":"1. To start Uvicorn externally, via the command line","text":"<pre><code># Start Uvicorn with the command line\n$ uvicorn hello:app --reload\n\n# The hello refers to the hello.py file, and app is the FastAPI variable name within it.\n</code></pre>"},{"location":"backend/fastAPI/fast-api/#2-to-start-uvicorn-internally-in-the-application-itself","title":"2. To start Uvicorn internally in the application itself","text":"<pre><code># Start Uvicorn internally\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/hi\")\ndef greet():\n  return \"Hello? World?\"\n\nif __name__ == \"__main__\":\n  import uvicorn\n  uvicorn.run(\"hello:app\", reload=True)\n</code></pre> <p>In either case, that reload tells Uvicorn to restart the web server if hello.py changes.</p>"},{"location":"backend/fastAPI/fast-api/#test-fastapi-after-installing","title":"Test FastAPI after Installing","text":"<p>To make sure the installation worked, we can open a Python interactive shell and try to import the <code>FastAPI</code> package:</p> <pre><code>$ python\n\n&gt;&gt;&gt; from fastapi import FastAPI\n</code></pre>"},{"location":"backend/fastAPI/fast-api/#installing-the-httpie-command-line-utility","title":"Installing the HTTPie command-line utility","text":"<ul> <li><code>FastAPI</code> automatic documentation (we'll talk about this later in the book)</li> <li><code>Postman</code>, a GUI tool to perform HTTP requests</li> <li><code>cURL</code>, the well-known and widely used command-line tool to perform   network requests</li> <li><code>HTTPie</code>, a command-line tool aimed at making HTTP   requests with an intuitive syntax, JSON support, and syntax highlighting.</li> </ul> <pre><code># GET\n$ http GET https://603cca51f4333a0017b68509.mockapi.io/todos\n\n#POST\n$ http -v POST https://603cca51f4333a0017b68509.mockapi.io/todos text=\"My new task\"\n\n#\n$ http -v GET https://603cca51f4333a0017b68509.mockapi.io/todos \"My-Header: My-Header-Value\"\n</code></pre>"},{"location":"backend/fastAPI/fast-api/#web-tools","title":"Web Tools","text":"<p>The main Python web tools (FastAPI):</p> <ul> <li><code>FastAPI</code>: The web framework itself</li> <li><code>Uvicorn</code>: An asynchronous web server</li> <li><code>HTTPie</code>: A text web client, similar to curl</li> <li><code>Requests</code>: A synchronous web client package</li> <li><code>HTTPX</code>: A synchronous/asynchronous web client package</li> </ul>"},{"location":"backend/fastAPI/fast-api/#sqlalchemy","title":"SQLAlchemy","text":"<p>SQLAlchemy is the most popular ORM library and can establish communication between any Python-based application and database platform.</p> <p>This ORM is a boilerplated interface that aims to create a database-agnostic data layer that can connect to any database engine. But compared to other ORMs, SQLAlchemy is DBA-friendly because it can generate optimized native SQL statements.</p> <pre><code>pip install SQLAlchemy\n</code></pre>"},{"location":"backend/fastAPI/fast-api/#installing-the-database-driver","title":"Installing the database driver","text":"<p>SQLAlchemy will not work without the required database driver. It is mandatory to install the <code>psycopg2</code> dialect since the database of choice is PostgreSQL:</p> <pre><code>pip install psycopg2\n</code></pre>"},{"location":"backend/fastAPI/fast-api/#reference","title":"Reference","text":"<ul> <li>FastAPI: Modern Python Web Development by Bill Lubanovic</li> </ul>"},{"location":"backend/package/0.draft/","title":"Draft Package","text":"<p>djangopackages</p> list of django packages <p>When working with Django, there are several essential packages beyond <code>django-debug-toolbar</code> that can enhance your development process, improve security, or provide additional functionality. Here's a list of some essential packages:</p> <p>1. Django Rest Framework (DRF): If you're building RESTful APIs with Django, DRF provides powerful tools for serialization, authentication, and views.</p> <p>2. Celery: Celery is a distributed task queue that can be used for running tasks asynchronously. It's commonly used for background processing, such as sending emails or processing data.</p> <p>3. django-crispy-forms: This package helps you manage Django forms. It allows you to easily control the rendering of forms in your templates.</p> <p>4. django-allauth: If you need user authentication in your Django project, django-allauth provides a flexible and customizable solution with support for social authentication.</p> <p>5. django-cors-headers: If you're building a backend that serves APIs consumed by frontend applications, CORS (Cross-Origin Resource Sharing) headers can be necessary. This package simplifies configuring CORS headers in your Django application.</p> <p>6. django-environ: It simplifies handling environment variables in your Django project, making it easier to manage settings across different environments (development, staging, production, etc.).</p> <p>7. django-filter: This package provides a simple way to filter queryset dynamically in your Django views, especially useful when dealing with RESTful APIs.</p> <p>8. django-ckeditor: If you need a rich text editor in your Django application, django-ckeditor integrates CKEditor into your forms.</p> <p>9. django-debug-toolbar-template-timings: This is an extension for django-debug-toolbar that adds template rendering times to the toolbar, helping you identify performance bottlenecks.</p> <p>10. django-extensions: This package provides various extensions for Django, including management commands, model mixins, and template tags, which can boost productivity during development.</p> <p>11. django-redis: If you're using Redis with Django (for caching, session storage, etc.), django-redis provides a simple way to integrate Redis into your Django project.</p> <p>12. django-webpack-loader: If you're using Webpack to manage your frontend assets, django-webpack-loader can help you integrate Webpack with Django's template engine.</p> <p>These are just a few examples of essential packages for Django development. Depending on your specific project requirements, you may find additional packages that suit your needs. Always remember to review a package's documentation and community support before integrating it into your project.</p>"},{"location":"backend/package/0.draft/#modules-vs-libraries-vs-packages-in-django","title":"Modules vs Libraries vs Packages in django","text":""},{"location":"backend/package/0.draft/#reference","title":"Reference","text":"<ul> <li>9 Django Packages That Every Web Development Project Needs</li> <li>10 Essential Django Packages Every Developer Should Know</li> <li>14 Django packages you should know</li> <li>Top 10 Django Packages That Every Developer Should Use </li> <li>Essential Python Packages Every Django Developer Should Know</li> <li>Top 10 Django Packages Every Developer Should Know</li> </ul>"},{"location":"backend/package/dj-rest-auth/","title":"dj rest auth","text":"<p><code>dj-rest-auth</code> package</p> <p>First we will add log in, log out, and password reset API endpoints. These come out-of-the-box with the popular <code>dj-rest-auth</code> package.</p>"},{"location":"backend/package/dj-rest-auth/#step-1-installation","title":"Step 1: Installation","text":"<pre><code>pip install dj-rest-auth==2.1.11\n</code></pre>"},{"location":"backend/package/dj-rest-auth/#step-2-updated-installed_apps","title":"Step 2: Updated <code>INSTALLED_APPS</code>","text":"<p>Add the new app to the <code>INSTALLED_APPS</code> config in our <code>django_project/settings.py</code> file.</p> settings.py<pre><code>INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n\n    # 3rd-party apps\n    \"rest_framework\",\n    \"corsheaders\",\n    \"rest_framework.authtoken\",\n    \"dj_rest_auth\", # new\n\n    # Local\n    \"accounts.apps.AccountsConfig\",\n    \"posts.apps.PostsConfig\",\n]\n</code></pre>"},{"location":"backend/package/dj-rest-auth/#step-3-update-urlspy","title":"Step 3: Update <code>urls.py</code>","text":"<p>Update our <code>django_project/urls.py</code> file with the <code>dj_rest_auth</code> package. We\u2019re setting the URL routes to <code>api/v1/dj-rest-auth</code>. Make sure to note that URLs should have a dash <code>-</code> not an underscore <code>_</code>, which is an easy mistake to make.</p> urls.py<pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/v1/\", include(\"posts.urls\")),\n    path(\"api-auth/\", include(\"rest_framework.urls\")),\n    path(\"api/v1/dj-rest-auth/\", include(\"dj_rest_auth.urls\")), # new\n]\n</code></pre> <p>And we\u2019re done! If you have ever tried to implement your own user authentication endpoints, it is truly amazing how much time and headache <code>dj-rest-auth</code> saves for us. Now we can spin up the server to see what <code>dj-rest-auth</code> has provided.</p> <p>Run the server</p> <pre><code>python manage.py runserver\n</code></pre> <p>API Log In Endpoint</p> <pre><code># Login\nhttp://127.0.0.1:8000/api/v1/dj-rest-auth/login/\n\n# Logout\nhttp://127.0.0.1:8000/api/v1/dj-rest-auth/logout/\n\n# Password Reset\nhttp://127.0.0.1:8000/api/v1/dj-rest-auth/password/reset\n\n# Password Reset Confirm\nhttp://127.0.0.1:8000/api/v1/dj-rest-auth/password/reset/confirm\n</code></pre>"},{"location":"backend/package/dj-rest-auth/#reference","title":"Reference","text":"<ul> <li>Django for APIs by William S. Vincent, page number: 140</li> </ul>"},{"location":"backend/package/django-allauth/","title":"django allauth","text":"<p>User Registration</p> <p>Next up is our user registration, or sign up, endpoint. Traditional Django does not ship with built-in views or URLs for user registration and neither does Django REST Framework. Which means we need to write our own code from scratch; a somewhat risky approach given the seriousness\u2013 and security implications\u2013of getting this wrong.</p> <p>A popular approach is to use the third-party package <code>django-allauth</code> which comes with user registration as well as a number of additional features to the Django auth system such as social authentication via Facebook, Google, Twitter, etc.</p> <p>If we add <code>dj_rest_auth.registration</code> from the <code>dj-rest-auth</code> package then we have user registration endpoints too!</p>"},{"location":"backend/package/django-allauth/#step-1-install-django-allauth","title":"Step 1: Install <code>django-allauth</code>","text":"<pre><code>pip install django-allauth~=0.48.0\n</code></pre> <p>Then update our <code>INSTALLED_APPS</code> setting. We must add several new configs:</p> <ul> <li><code>django.contrib.sites</code></li> <li><code>allauth</code></li> <li><code>allauth.account</code></li> <li><code>allauth.socialaccount</code></li> <li><code>dj_rest_auth.registration</code></li> </ul> <pre><code>INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"django.contrib.sites\", # new\n\n    # 3rd-party apps\n    \"rest_framework\",\n    \"corsheaders\",\n    \"rest_framework.authtoken\",\n    \"allauth\", # new\n    \"allauth.account\", # new\n    \"allauth.socialaccount\", # new\n    \"dj_rest_auth\",\n    \"dj_rest_auth.registration\", # new\n\n    # Local\n    \"accounts.apps.AccountsConfig\",\n    \"posts.apps.PostsConfig\",\n]\n</code></pre> <p><code>django-allauth</code> needs to be added to the <code>TEMPLATES</code> configuration after existing context processors as well as setting the <code>EMAIL_BACKEND</code> to console and adding a <code>SITE_ID</code> of 1.</p> settings.py<pre><code>TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n                \"django.template.context_processors.request\", # new\n            ],\n        },\n    },\n]\n\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\" # new\nSITE_ID = 1 # new\n</code></pre> <p>The email back-end config is needed since by default an email will be sent when a new user is registered, asking them to confirm their account. Rather than also set up an email server, we will output the emails to the console with the <code>console.EmailBackend</code> setting.</p> <p><code>SITE_ID</code> is part of the built-in Django \u201csites\u201d framework97 , which is a way to host multiple websites from the same Django project. We only have one site we are working on here but <code>django-allauth</code> uses the sites framework, so we must specify a default setting.</p> <p>Ok. We\u2019ve added new apps so it\u2019s time to update the database.</p> <pre><code>python manage.py migrate\n</code></pre> <p>Then add a new URL route for registration.</p> <pre><code>    # django_project/urls.py\n    from django.contrib import admin\n    from django.urls import path, include\n    urlpatterns = [\n        path(\"admin/\", admin.site.urls),\n        path(\"api/v1/\", include(\"posts.urls\")),\n        path(\"api-auth/\", include(\"rest_framework.urls\")),\n        path(\"api/v1/dj-rest-auth/\", include(\"dj_rest_auth.urls\")),\n        path(\"api/v1/dj-rest-auth/registration/\", include(\"dj_rest_auth.registration.urls\")), # new\n    ]\n</code></pre> <p>And we\u2019re done. We can run the local server.</p> <pre><code>python manage.py runserver\n</code></pre> <p>There is now a user registration endpoint at:</p> <pre><code>http://127.0.0.1:8000/api/v1/dj-rest-auth/registration/.\n</code></pre>"},{"location":"backend/package/django-allauth/#conclusion","title":"Conclusion","text":"<p>As a result, a popular, powerful, and secure approach is to rely on the third-party packages dj-rest-auth and django-allauth to minimize the amount of code we have to write from scratch.</p>"},{"location":"backend/package/django-allauth/#reference","title":"Reference","text":"<ul> <li>Django for APIs by William S. Vincent</li> </ul>"},{"location":"backend/package/django-autoslug/","title":"django autoslug","text":"<p><code>django-autoslug</code> library</p> <p>The AutoSlugField is not a built-in field provided by Django itself. It appears to be from a third-party library called django-autoslug. This library provides a field for Django models that automatically generates a unique slug for each instance of the model.</p> <p>To use AutoSlugField, you need to install the django-autoslug library via pip. You can do this by running:</p> Bash<pre><code>pip install django-autoslug\n</code></pre> <p>Once installed, you can import AutoSlugField in your Django model file and use it like any other field. Here's a basic example of how you might use it:</p> Python<pre><code>  from django.db import models\n  from autoslug import AutoSlugField\n\n  class YourModel(models.Model):\n  title = models.CharField(max_length=100)\n  slug = AutoSlugField(populate_from='title', unique=True)\n</code></pre> <p>In this example, the slug field will automatically generate a slug based on the title field whenever a new instance of YourModel is created. The unique=True parameter ensures that each generated slug is unique within the database.</p>"},{"location":"backend/package/django-cors-headers/","title":"django cors headers","text":""},{"location":"backend/package/django-cors-headers/#cross-origin-resource-sharing","title":"Cross-Origin Resource Sharing","text":"<p>In a decoupled setup, JavaScript is the main consumer for REST and GraphQL APIs.</p> <p>By default, JavaScript can request resources with <code>XMLHttpRequest</code> or <code>fetch</code>, as long as the server and the frontend live in the same origin.</p> <p>An origin in HTTP is the combination of the scheme or protocol, the domain, and the port. This means that the origin <code>http://localhost:8000</code> is not equal to <code>http://localhost:3000</code>. </p> <p>When JavaScript attempts to fetch a resource from a different origin than its own, a mechanism known as Cross-Origin Resource Sharing (CORS) kicks in the browser. In any REST or GraphQL project, CORS is necessary to control what origins can connect to the API. To enable CORS in Django, we can install <code>django-cors-headers</code> in our project with the following command:</p> Python<pre><code>pip install django-cors-headers\n</code></pre>"},{"location":"backend/package/django-cors-headers/#enabling-django-cors-headers-in-django","title":"Enabling <code>django-cors-headers</code> in Django","text":"<p>To enable the package, include corsheaders in <code>decoupled_dj/settings/base.py</code>, as shown in Listing 7-10.</p> <pre><code>INSTALLED_APPS = [\n...\n'corsheaders',\n...\n]\n</code></pre>"},{"location":"backend/package/django-cors-headers/#enabling-cors-middleware","title":"Enabling CORS Middleware","text":"<pre><code>MIDDLEWARE = [\n...\n'corsheaders.middleware.CorsMiddleware',\n'django.middleware.common.CommonMiddleware',\n...\n]\n</code></pre> <p>With this change in place, we can configure <code>django-cors-headers</code>. In development, we may want to allow all origins to bypass CORS altogether. To <code>decoupled_dj/settings/development.py</code>, add the configuration shown in Listing 7-12.</p>"},{"location":"backend/package/django-cors-headers/#relaxing-cors-in-development","title":"Relaxing CORS in Development","text":"<pre><code>CORS_ALLOW_ALL_ORIGINS = True\n</code></pre> <p>In production, we have to be more restrictive. <code>django-cors-headers</code> allows us to define a list of allowed origins, which can be configured in <code>decoupled_dj/settings/production.py</code></p>"},{"location":"backend/package/django-cors-headers/#hardening-cors-in-production","title":"Hardening CORS in Production","text":"<pre><code>CORS_ALLOWED_ORIGINS = [\n    \"https://example.com\",\n    \"http://another1.io\",\n    \"http://another2.io\",\n]\n</code></pre> <p>Since we are using variables per environment, we can make this configuration directive a list</p> <pre><code>CORS_ALLOWED_ORIGINS = env.list(\n    \"CORS_ALLOWED_ORIGINS\",\n    default=[]\n)\n</code></pre> <p>This way we can define allowed origins as a comma-separated list in <code>.env</code> for production. CORS is a basic form of protection for users, since without this mechanism in place, any website would be able to fetch and inject malicious code in the page, and a protection for REST APIs, which can explicitly allow a list of predefined origins instead of being open to the world. Of course, CORS does not absolutely replace authentication, which is covered briefly in the next section.</p>"},{"location":"backend/package/django-cors-headers/#reference","title":"Reference","text":"<p>Book</p> <ul> <li>Decoupled Django :pg-101</li> </ul>"},{"location":"backend/package/django-crispy-forms/","title":"django crispy forms","text":"<p>The best way to have DRY Django forms. </p> <pre><code>pip install django-crispy-forms crispy-bootstrap5\n</code></pre> <pre><code># myproject/settings.py\nINSTALLED_APPS = [\n    ...\n    'crispy_forms',\n    'crispy_bootstrap5',\n    ...\n]\n\nCRISPY_TEMPLATE_PACK = 'bootstrap5'  # You can choose 'bootstrap4', 'bootstrap5', 'uni_form', etc.\n</code></pre> <pre><code># example\n# Path to custom crispy-forms template pack\nCRISPY_TEMPLATE_PACK = 'crispy-tailwind'\n\n# Allow the use of our custom template pack\nCRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap4', 'crispy-tailwind')\n</code></pre>"},{"location":"backend/package/django-crispy-forms/#reference","title":"Reference","text":"<ul> <li>django-crispy-forms.readthedocs.io</li> <li>django-crispy-forms: github</li> </ul>"},{"location":"backend/package/django-debug-toolbar/","title":"django debug toolbar","text":"<p>Abstract</p> <ul> <li>debug toolbar :youtube</li> <li>official doc debug</li> </ul> Django Settings Exampleprod vs local in settings.pyDJANGO_SETTINGS_MODULE <pre><code>if settings.DEBUG:\n    import debug_toolbar\n\n    urlpatterns += [\n        path('__debug__/', include(debug_toolbar.urls)),\n    ]\n\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n\n#or\n\nif settings.DEBUG:\n    import debug_toolbar\n    urlpatterns = [\n        path('__debug__/', include(debug_toolbar.urls)),\n    ] + urlpatterns\n</code></pre> <p>Separating Django settings for production and local development environments is a common practice to ensure that sensitive information (like database credentials, secret keys, debug mode, etc.) used in production remains secure and different from those used in development. Here's how a senior programmer might typically approach this:</p> <p>1. Create Separate Settings Files: The senior programmer would typically create separate <code>settings.py</code> files for each environment.</p> <p>For example:</p> <ul> <li>settings.py: Main settings file containing common settings.</li> <li>settings_production.py: Settings specific to the production environment.</li> <li>settings_local.py: Settings specific to the local development environment.</li> </ul> <p>2. Common Settings: Keep common settings in the main <code>settings.py</code> file. These are settings that are shared between both production and local environments.</p> <p>3. Environment-Specific Settings: Place environment-specific settings in their respective files (<code>settings_production.py</code> for production and <code>settings_local.py</code> for local development). This includes sensitive information like database credentials, secret keys, debug mode settings, etc.</p> <p>4. Use Environment Variables: Instead of hardcoding sensitive information directly into the settings files, utilize environment variables. This allows for greater flexibility and security. For instance, you might read the database credentials from environment variables in both <code>settings_production.py</code> and <code>settings_local.py</code>.</p> <p>5. Use Conditional Imports: In <code>settings.py</code>, import the environment-specific settings based on the current environment.</p> <p>For example:</p> <pre><code>import os\n\nif os.environ.get('DJANGO_SETTINGS_MODULE') == 'project.settings_production':\n    from .settings_production import *\nelse:\n    from .settings_local import *\n</code></pre> <p>6. Set DJANGO_SETTINGS_MODULE: Ensure that the DJANGO_SETTINGS_MODULE environment variable is set appropriately for each environment. For production, it should point to <code>project.settings_production</code>, and for local development, it should point to <code>project.settings_local</code>.</p> <p>7. Version Control: Ensure that sensitive settings are not committed to version control repositories. Use techniques like <code>.gitignore</code> to exclude sensitive files or environment variables from being tracked by version control systems.</p> <p>8. Documentation: Clearly document the purpose and usage of each settings file to help other developers understand the project's configuration.</p> <p>By following these practices, the senior programmer ensures that the Django project can seamlessly switch between different environments while maintaining security and consistency across deployments.</p> <p><code>DJANGO_SETTINGS_MODULE</code> is an environment variable used by Django to determine which settings file to use for a particular Django project.</p> <p>When you run a Django management command (such as <code>runserver</code>, <code>makemigrations</code>, <code>migrate</code>, etc.) or deploy a Django application, Django needs to know which settings file to load to configure the project. This is where the <code>DJANGO_SETTINGS_MODULE</code> environment variable comes into play.</p> <p>The value of <code>DJANGO_SETTINGS_MODULE</code> specifies the Python path to the settings module for the Django project. For example, if your project is named <code>myproject</code> and your settings module is named <code>settings</code>, then the value of <code>DJANGO_SETTINGS_MODULE</code> would be <code>myproject.settings</code>.</p> <p>Here's how it works:</p> <ol> <li>When you run a Django management command, Django looks for the <code>DJANGO_SETTINGS_MODULE</code> environment variable.</li> <li>If <code>DJANGO_SETTINGS_MODULE</code> is set, Django loads the settings module specified by its value.</li> <li>If <code>DJANGO_SETTINGS_MODULE</code> is not set, Django falls back to the default settings module (<code>settings.py</code>).</li> </ol> <p>You can set the DJANGO_SETTINGS_MODULE environment variable in various ways:</p> <ul> <li>Manually in your shell or terminal before running Django commands or deploying your application.</li> <li>In your development environment, you might set it in your IDE's configuration or in your virtual environment's activation script.</li> <li>In production environments, it's often set in the server configuration or deployment scripts.</li> </ul> <p>For example, if you're using Bash or a compatible shell, you can set the environment variable like this:</p> <pre><code>export DJANGO_SETTINGS_MODULE=myproject.settings\n</code></pre> <p>And in Windows Command Prompt or PowerShell:</p> <pre><code>set DJANGO_SETTINGS_MODULE=myproject.settings\n</code></pre> <p>Or, you can specify it inline when running Django management commands:</p> <pre><code>python manage.py runserver --settings=myproject.settings\n</code></pre> <p>By setting <code>DJANGO_SETTINGS_MODULE</code> appropriately, you can ensure that Django loads the correct settings for your project in different environments.</p> <ul> <li>Django Settings official doc</li> </ul>"},{"location":"backend/package/django-environ/","title":"django environ","text":""},{"location":"backend/package/django-environ/#installation","title":"Installation","text":"Bash<pre><code>pip install django-environ\n</code></pre>"},{"location":"backend/package/django-environ/#splitting-the-settings-file","title":"Splitting the Settings File","text":"<p>Particularly useful when deploying in production, split settings are a way to partition Django settings depending on the environment. In a typical project, you may have:</p> <ul> <li>The <code>base</code> environment, common for all scenarios</li> <li>The <code>development</code> environment, with settings for development</li> <li>The <code>test</code> environment, with settings that apply only to testing</li> <li>The <code>staging</code> environment</li> <li>The <code>production</code> environment</li> </ul> <p>The theory is that depending on the environment, Django loads its settings from a <code>.env</code> file. This approach is known as the Twelve-Factor app, first popularized by Heroku in 2011. </p> <p>There are many libraries for Twelve-Factor in Django. Some developers prefer to use <code>os.environ</code> to avoid additional dependencies altogether. My favorite library is <code>django-environ</code>.</p> <p>For our project we set up three environments: base, development, and later production.</p> <p>Once the folder is in place, create another file for the base environment in <code>decoupled_dj/settings/base.py</code>. In this file, we import django-environ, and we place everything Django needs to run, regardless of the specific environment. Among these settings are:</p> <p>Abstract</p> <ul> <li>SECRET_KEY</li> <li>DEBUG</li> <li>INSTALLED_APPS</li> <li>MIDDLEWARE</li> <li>AUTH_USER_MODEL</li> </ul> <p>Remember that in the previous section we configured a custom Django user. In the base settings we need to include the custom user app in INSTALLED_APPS, and most   important, configure AUTH_USER_MODEL. Our base settings file like this:</p> <p>Base Settings for Our Project</p> settings/base.py<pre><code>import environ\nfrom pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\nenv = environ.Env()\nenviron.Env.read_env()\nSECRET_KEY = env(\"SECRET_KEY\")\nDEBUG = env.bool(\"DEBUG\", False)\n\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"users.apps.UsersConfig\",\n]\n\nMIDDLEWARE = [ # OMITTED FOR BREVITY ]\nROOT_URLCONF = \"decoupled_dj.urls\"\nTEMPLATES = [ # OMITTED FOR BREVITY ]\nWSGI_APPLICATION = \"decoupled_dj.wsgi.application\n\nDATABASES = {\"default\": env.db()\nAUTH_PASSWORD_VALIDATORS = [ # OMITTED FOR BREVITY ]\nLANGUAGE_CODE = \"en-GB\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = Tru\nSTATIC_URL = env(\"STATIC_URL\")\nAUTH_USER_MODEL = \"users.User\"\n</code></pre> <p>Note  I have omitted for brevity the complete code for the following configurations: MIDDLEWARE, TEMPLATES, and AUTH_PASSWORD_VALIDATORS. These should have the default values that come from stock Django.</p> <p>Next up we create an .env file in the <code>decoupled_dj/settings</code> folder. This file will have different values depending on the environment. For development we use the values in Listing.</p> <p>Environment File for Development</p> .env<pre><code>DEBUG=yes\nSECRET_KEY=!changethis!\nDATABASE_URL=psql://decoupleddjango:localpassword@127.0.0.1/decoupleddjango\nSTATIC_URL=/static/\n</code></pre> <p>If you want to use SQLite in place of Postgres, change DATABASE_URL to:</p> <pre><code>DATABASE_URL=sqlite:/decoupleddjango.sqlite3\n</code></pre> <p>To complete the setup, create a new file called <code>decoupled_dj/settings/development.py</code> and import everything from the base settings. In addition, we also customize the configuration. Here we are going to enable <code>django-extensions</code>, a handy library for Django in development</p> <p>The Settings File for Development</p> settings/development.py<pre><code># noqa\nfrom .base import *\nINSTALLED_APPS = INSTALLED_APPS + [\"django_extensions\"]\n</code></pre> <p>Let\u2019s also install the library:</p> <pre><code>pip install django-extensions\n</code></pre>"},{"location":"backend/package/django-environ/#reference","title":"Reference","text":"<ul> <li>Decoupled Django :pg-56</li> <li>12-Factor Pattern</li> <li>django-environ: readthedocs</li> <li>django-environ: github</li> </ul>"},{"location":"backend/package/django-extensions/","title":"django extensions","text":""},{"location":"backend/package/django-extensions/#django-extensions","title":"django-extensions","text":""},{"location":"backend/package/django-extensions/#install","title":"Install","text":"<pre><code>pip install django-extensions\n</code></pre> <p>The Settings File for Development</p> settings/development.py<pre><code># noqa\nfrom .base import *\nINSTALLED_APPS = INSTALLED_APPS + [\"django_extensions\"]\n</code></pre> <p></p>"},{"location":"backend/package/django-extensions/#reference","title":"Reference","text":"<ul> <li> <p>Decoupled Django :pg-56</p> </li> <li> <p>django-extension: readthedocs</p> </li> </ul>"},{"location":"backend/package/django-filter/","title":"django filter","text":"<p>Django-filter is a reusable Django application for allowing users to filter querysets dynamically.</p> <p>Installation</p> <pre><code>pip install django-filter\n</code></pre> <p>Then add <code>django_filters</code> to your INSTALLED_APPS.</p> <pre><code>INSTALLED_APPS = [\n    ...\n    'django_filters',\n]\n</code></pre> Example ModelFilterSetViewTemplateURL Configuration <p>Define a Model</p> <p>Let's say you have a simple model called <code>Book</code>:</p> <pre><code>from django.db import models\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.CharField(max_length=100)\n    publication_date = models.DateField()\n    isbn = models.CharField(max_length=13)\n\n    def __str__(self):\n        return self.title\n</code></pre> <p>Create a FilterSet:</p> <p>Next, you create a filter set for the <code>Book</code> model. A filter set defines which fields you want to filter and how:</p> <pre><code>import django_filters\nfrom .models import Book\n\nclass BookFilter(django_filters.FilterSet):\n    class Meta:\n        model = Book\n        fields = ['title', 'author', 'publication_date']\n</code></pre> <p>Create a View:</p> <p>Then, you create a view that uses the filter set to filter the books. You can use Django's class-based views for this. Here, we'll use the generic <code>ListView</code> and integrate the filter:</p> <pre><code>from django.shortcuts import render\nfrom django.views.generic import ListView\nfrom django_filters.views import FilterView\nfrom .models import Book\nfrom .filters import BookFilter\n\nclass BookListView(FilterView, ListView):\n    model = Book\n    context_object_name = 'books'\n    template_name = 'books/book_list.html'\n    filterset_class = BookFilter\n</code></pre> <p>Create a Template:</p> <p>Finally, create a template <code>book_list.html</code> to display the filtered list of books:</p> <pre><code>&lt;!-- books/templates/books/book_list.html --&gt;\n\n&lt;form method=\"get\"&gt;\n    {{ filter.form.as_p }}\n    &lt;button type=\"submit\"&gt;Search&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;ul&gt;\n{% for book in books %}\n    &lt;li&gt;{{ book.title }} by {{ book.author }} ({{ book.publication_date }})&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre> <p>Add URL Configuration:</p> <p>Add a URL pattern to map to the <code>BookListView</code>:</p> <pre><code>from django.urls import path\nfrom .views import BookListView\n\nurlpatterns = [\n    path('books/', BookListView.as_view(), name='book_list'),\n]\n</code></pre> <p>How It Works</p> <ul> <li>When you navigate to <code>/books/</code>, the <code>BookListView</code> will be rendered.</li> <li>The BookFilter form will be displayed, allowing you to filter books by <code>title</code>, <code>author</code>, and <code>publication_date</code>.</li> <li>Once you submit the form, the view will filter the <code>Book</code> objects based on the criteria you specified and display the filtered list.</li> </ul> <p>This setup leverages django-filter to simplify the filtering of querysets, providing a clean and intuitive user interface for filtering data.</p>"},{"location":"backend/package/django-filter/#reference","title":"Reference","text":"<ul> <li>django-filter: pypi</li> <li>django-filter.readthedocs</li> </ul>"},{"location":"backend/package/django-recaptcha/","title":"django recaptcha","text":""},{"location":"backend/package/django-recaptcha/#installation","title":"Installation","text":"<ol> <li>Sign up for reCAPTCHA.</li> <li>Install with pip install <code>django-recaptcha</code>.</li> <li>Add <code>django_recaptcha</code> to your INSTALLED_APPS setting.</li> </ol> <pre><code>INSTALLED_APPS = [\n    ...,\n    'django_recaptcha',\n    ...\n]\n</code></pre>"},{"location":"backend/package/django-recaptcha/#for-example","title":"For example:","text":"<pre><code>RECAPTCHA_PUBLIC_KEY = 'MyRecaptchaKey123'\nRECAPTCHA_PRIVATE_KEY = 'MyRecaptchaPrivateKey456'\n</code></pre>"},{"location":"backend/package/django-recaptcha/#usage","title":"Usage","text":"<p>Fields</p> <p>The quickest way to add reCAPTCHA to a form is to use the included <code>ReCaptchaField</code> field class. A <code>ReCaptchaV2Checkbox</code> will be rendered by default. For example:</p> <pre><code>from django import forms\nfrom django_recaptcha.fields import ReCaptchaField\n\nclass FormWithCaptcha(forms.Form):\n    captcha = ReCaptchaField()\n</code></pre> <p>Be sure to include the captcha field in your forms. There are many ways to add fields to forms in Django. We recommend you refer to the form rendering options and rendering fields manually sections of the official Django documentation for forms.</p> <p>To allow for runtime specification of keys you can optionally pass the <code>private_key</code> or <code>public_key</code> parameters to the constructor. For example:</p> <pre><code>captcha = ReCaptchaField(\n    public_key='76wtgdfsjhsydt7r5FFGFhgsdfytd656sad75fgh',\n    private_key='98dfg6df7g56df6gdfgdfg65JHJH656565GFGFGs',\n)\n</code></pre> <p>If specified, these parameters will be used instead of your reCAPTCHA project settings.</p> <p>Widgets</p> <p>There are three widgets that can be used with the ReCaptchaField class:</p> <ul> <li><code>ReCaptchaV2Checkbox</code> for Google reCAPTCHA V2 - Checkbox</li> <li><code>ReCaptchaV2Invisible</code> for Google reCAPTCHA V2 - Invisible</li> <li><code>ReCaptchaV3</code> for Google reCAPTCHA V3</li> </ul> <p>To make use of widgets other than the default Google reCAPTCHA V2 - Checkbox widget, simply replace the <code>ReCaptchaField</code> widget. For example:</p> <pre><code>from django import forms\nfrom django_recaptcha.fields import ReCaptchaField\nfrom django_recaptcha.widgets import ReCaptchaV2Invisible\n\nclass FormWithCaptcha(forms.Form):\n    captcha = ReCaptchaField(widget=ReCaptchaV2Invisible)\n</code></pre>"},{"location":"backend/package/django-recaptcha/#reference","title":"Reference","text":"<ul> <li>django-recaptcha: pypi</li> </ul>"},{"location":"backend/package/django-simple-history/","title":"django simple history","text":""},{"location":"backend/package/django-simple-history/#audit-logging","title":"Audit Logging","text":"<p>Audit logging refers to the practice of writing logs for each action carried in a system\u2014be it a web application, a REST API, or a database\u2014as a way to record \u201cwho did what\u201d at a particular point in time.</p> <p>Out of the box, Django already provides some minimal form of audit logging in the admin. Also, the user table in Django records the last login of each user in the system.</p> <p>But these two trails are far from being a full-fledged audit logging solution and do not cover the REST API. There are a couple of packages for Django to add audit logging capabilities:</p> <p>Note</p> <ul> <li>django-simple-history</li> <li>django-auditlog</li> </ul> <p><code>django-simple-history</code> can track changes on models. This capability, paired with access logging, can provide effective audit logging for Django projects. <code>django-simple-\u00adhistory</code> is a mature package, actively supported. </p> <p>On the other hand, <code>django-auditlog</code>provides the same functionalities, but it is still in development at the time of this writing.</p>"},{"location":"backend/package/django-simple-history/#install","title":"Install","text":"bash<pre><code>pip install django-simple-history\n</code></pre>"},{"location":"backend/package/django-simple-history/#reference","title":"Reference","text":"<ul> <li>django-simple-history :readthedocs</li> <li> django-auditlog : readthedocs</li> </ul> <p>Book</p> <ul> <li>Decoupled Django :pg-</li> </ul>"},{"location":"backend/package/django-taggit/","title":"django taggit","text":""},{"location":"backend/package/django-taggit/#installation","title":"Installation","text":"<pre><code>$ pip install django-taggit\n</code></pre> <p>Add <code>taggit</code> to your project\u2019s INSTALLED_APPS setting.</p> <pre><code>from django.db import models\n\nfrom taggit.managers import TaggableManager\n\nclass Food(models.Model):\n    # ... fields here\n\n    tags = TaggableManager()\n</code></pre>"},{"location":"backend/package/django-taggit/#related-blogs","title":"Related Blogs","text":"<p>To display the title of the other suggested blogs as clickable links in your <code>NewsDetailsView</code>, you can modify the template to include links to the suggested blog items. Here's how you can do it:</p> <p>Tip</p> models.pyviews.pyadmin.pyitem.html <pre><code>from django.db import models\nfrom django.urls import reverse\nfrom taggit.managers import TaggableManager\n\nclass NewsItem(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    tags = TaggableManager()\n    # Other fields as needed\n\n    def __str__(self):\n        return self.title\n\n    def get_absolute_url(self):\n        return reverse('news_detail', kwargs={'slug': self.slug})\n\n    def get_related_blogs(self):\n        return NewsItem.objects.filter(tags__in=self.tags.all()).exclude(id=self.id).distinct()[:5]\n</code></pre> <pre><code>class NewsDetailsView(DetailView):\n    model = NewsItem\n    template_name = \"news/item.html\"\n    context_object_name = \"news_detail\"\n    slug_field = \"slug\"\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['related_blogs'] = self.object.get_related_blogs()\n        return context\n</code></pre> <pre><code>@admin.register(NewsItem)\nclass NewsItemAdmin(admin.ModelAdmin):\n    formfield_overrides = {\n        models.CharField: { 'widget': CustomCharFieldWidget }\n    }\n    list_display = ('title', 'content', 'status',  'tag_list', 'publish')\n\n    def get_queryset(self, request):\n        return super().get_queryset(request).prefetch_related('tags')\n\n    def tag_list(self, obj):\n        return u\", \".join(o.name for o in obj.tags.all())\n</code></pre> <pre><code>{% extends 'base.html' %}\n\n{% block content %}\n\n&lt;section class=\"bt-news bt-section-common\"&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;div class=\"row\"&gt;\n\n            &lt;!-- RELATED BLOGS --&gt;\n            &lt;div class=\"col-md-12\"&gt;\n                {% if related_blogs %}\n                    &lt;h3&gt;Related Blogs:&lt;/h3&gt;\n                    &lt;ul&gt;\n                        {% for blog in related_blogs %}\n                            &lt;li&gt;&lt;a href=\"{{ blog.get_absolute_url }}\"&gt;{{ blog.title }}&lt;/a&gt;&lt;/li&gt;\n                        {% endfor %}\n                    &lt;/ul&gt;\n                {% endif %}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/section&gt;\n\n{% endblock %}\n</code></pre>"},{"location":"backend/package/django-taggit/#tags","title":"Tags","text":"<p>To include the <code>tags</code> associated with a NewsItem instance in your <code>NewsDetailsView</code>, you can modify the <code>get_context_data</code> method to pass the tags along with other context data. Here's how you can do it:</p> <pre><code>class NewsDetailsView(DetailView):\n    model = NewsItem\n    template_name = \"news/item.html\"\n    context_object_name = \"news_detail\"\n    slug_field = \"slug\"\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        # Retrieve tags associated with the NewsItem instance\n        context['tags'] = self.object.tags.all()\n        return context\n</code></pre> <p>Now, in your <code>news/item.html</code> template, you can access these tags:</p> <pre><code>&lt;!-- news/item.html --&gt;\n&lt;h1&gt;{{ news_detail.title }}&lt;/h1&gt;\n&lt;!-- Other details of the news item --&gt;\n&lt;ul&gt;\n    {% for tag in tags %}\n        &lt;li&gt;{{ tag.name }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</code></pre> <p>This will display all the tags associated with the <code>NewsItem</code> instance in your <code>NewsDetailsView</code>. Make sure you have properly associated tags with your <code>NewsItem</code> instances.</p>"},{"location":"backend/package/django-taggit/#reference","title":"Reference","text":"<ul> <li>django-taggit</li> </ul>"},{"location":"backend/package/intro/","title":"Intro","text":""},{"location":"backend/package/intro/#3rd-package","title":"3rd package","text":""},{"location":"backend/package/intro/#creating-image-thumbnails-using-easy-thumbnails","title":"Creating image thumbnails using easy-thumbnails","text":"<p>We are displaying the original image on the detail page, but dimensions for different images may vary considerably. The file size for some images may be very large, and loading them might take too long.</p> <p>The best way to display optimized images in a uniform manner is to generate thumbnails. A thumbnail is a small image representation of a larger image. Thumbnails will load faster in the browser and are a great way to homogenize images of very different sizes. We will use a Django application called easy-thumbnails to generate thumbnails for the images bookmarked by users.</p> <pre><code>pip install easy-thumbnails==2.8.1\n</code></pre> <pre><code>INSTALLED_APPS = [\n    # ...\n    'easy_thumbnails',\n]\n</code></pre> <p>The easy-thumbnails application offers you different ways to define image thumbnails. The application provides a <code>{% thumbnail %}</code> template tag to generate thumbnails in templates and a custom ImageField if you want to define thumbnails in your models. Let\u2019s use the template tag approach.</p> <p>Edit the <code>images/image/detail.html</code> template and consider the following line:</p> <pre><code>&lt;img src=\"{{ image.image.url }}\" class=\"image-detail\"&gt;\n</code></pre> <p>The following lines should replace the preceding one:</p> <pre><code>{% load thumbnail %}\n\n&lt;a href=\"{{ image.image.url }}\"&gt;\n    &lt;img src=\"{% thumbnail image.image 300x0 %}\" class=\"image-detail\"&gt;\n&lt;/a&gt;\n</code></pre> <p>We have defined a thumbnail with a fixed width of 300 pixels and a flexible height to maintain the aspect ratio by using the value 0. The first time a user loads this page, a thumbnail image will be created. The thumbnail is stored in the same directory as the original file. The location is defined by the MEDIA_ROOT setting and the <code>upload_to</code> attribute of the image field of the Image model. The generated thumbnail will then be served in the following requests.</p> <p>The original filename is followed by additional details of the settings used to create the thumbnail. For a JPEG image, you will see a filename like filename.jpg.300x0_q85.jpg, where 300x0 are the size parameters used to generate the thumbnail, and 85 is the value for the default JPEG quality used by the library to generate the thumbnail.</p> <p>You can use a different quality value using the quality parameter. To set the highest JPEG quality, you can use the value 100, like this: <code>{% thumbnail image.image 300x0 quality=100 %}</code>. A higher quality will imply a larger file size.</p> <p>The easy-thumbnails application offers several options to customize your thumbnails, including cropping algorithms and different effects that can be applied. If you run into any issues generating thumbnails, you can add THUMBNAIL_DEBUG = True to the settings.py file to obtain the debug information. You can read the full documentation of easy-thumbnails at easy-thumbnails.readthedocs.io.</p>"},{"location":"backend/package/intro/#adding-the-tagging-functionality","title":"Adding the tagging functionality","text":"<p>A very common functionality in blogs is to categorize posts using tags. Tags allow you to categorize content in a non-hierarchical manner, using simple keywords. A tag is simply a label or keyword that can be assigned to posts. We will create a tagging system by integrating a third-party Django tagging application into the project.</p> <p>django-taggit is a reusable application that primarily offers you a Tag model and a manager to easily add tags to any model. You can take a look at its source code at https://github.com/jazzband/django-taggit.</p> <p>First, you need to install django-taggit via pip by running the following command:</p> <pre><code>pip install django-taggit==3.0.0\n</code></pre> <p>Then, open the <code>settings.py</code> file of the mysite project and add taggit to your INSTALLED_APPS setting, as follows:</p> <pre><code>INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog.apps.BlogConfig',\n    'taggit',\n]\n</code></pre> <p>Open the <code>models.py</code> file of your blog application and add the TaggableManager manager provided by django-taggit to the Post model using the following code:</p> <pre><code>from taggit.managers import TaggableManager\n\nclass Post(models.Model):\n    # ...\n    tags = TaggableManager()\n</code></pre> <p>The tags manager will allow you to add, retrieve, and remove tags from Post objects.</p> <p>The Tag model is used to store tags. It contains a name and a slug field.</p>"},{"location":"backend/package/intro/#creating-custom-template-tags-and-filters","title":"Creating custom template tags and filters","text":"<p>Django provides the following helper functions that allow you to easily create template tags:</p> <ul> <li>simple_tag: Processes the given data and returns a string</li> <li>inclusion_tag: Processes the given data and returns a rendered template</li> </ul> <p>Template tags must live inside Django applications.</p>"},{"location":"backend/package/intro/#cleaning-form-fields","title":"Cleaning form fields","text":"forms.py<pre><code>def clean_url(self):\n    url = self.cleaned_data['url']\n    valid_extensions = ['jpg', 'jpeg', 'png']\n    extension = url.rsplit('.', 1)[1].lower()\n    if extension not in valid_extensions:\n        raise forms.ValidationError('The given URL does not match valid image extensions.')\n    return url\n</code></pre>"},{"location":"backend/package/intro/#reference","title":"Reference","text":"<ul> <li>[Django 4 by example: pg-265]</li> </ul>"},{"location":"backend/package/python-dotenv/","title":"python dotenv","text":""},{"location":"backend/package/python-dotenv/#python-dotenv","title":"Python-dotenv","text":"<p>Python-dotenv reads key-value pairs from a .env file and can set them as environment variables</p> <pre><code>$ pip install python-dotenv\n</code></pre> <pre><code>// .env.example\n</code></pre> <ul> <li>python-dotenv</li> </ul>"},{"location":"backend/package/python-mysqlclient/","title":"mysqlclient","text":""},{"location":"backend/package/python-mysqlclient/#_1","title":"mysqlclient","text":"<pre><code>$ pip install mysqlclient\n</code></pre> <ul> <li>mysqlclient </li> </ul>"},{"location":"backend/package/simplejwt/","title":"simplejwt","text":""},{"location":"backend/package/simplejwt/#jwt","title":"jwt","text":"<p>Example</p> InstallationVirtual envsettings.py.env example <pre><code>pip install django\n\npip install djangorestframework-simplejwt\n\n# env\npip install python-dotenv\n\n# database\npip install mysqlclient\n\n# Django REST framework\npip install djangorestframework, markdown, django-filter\n</code></pre> <pre><code>INSTALLED_APPS = [\n    ...'\n    'rest_framework',\n    'rest_framework_simplejwt',\n    ...\n]\n</code></pre> <pre><code>$ python -m venv venv\n$ cd venv/Scripts\n$ activate\n</code></pre> <pre><code># settings.py\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\nSECRET_KEY = os.environ.get('SECRET_KEY')\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': os.environ.get('DB_NAME'), #here\n        'USER': os.environ.get('DB_USER'), #here\n        'PASSWORD': os.environ.get('DB_PASS'), #here\n        'HOST': '127.0.0.1',\n        'PORT': '3306',\n        'OPTIONS': {'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\"},\n    }\n}\n\n# Add\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n}\n</code></pre> <pre><code>SECRET_KEY=\"\"\nDB_NAME=django_db\nDB_USER=root\nDB_PASS=\nDB_HOST=localhost\nDB_PORT=3308\n</code></pre>"},{"location":"backend/package/simplejwt/#simple-jwt","title":"Simple JWT","text":"<p>Simple JWT provides a JSON Web Token authentication backend for the Django REST Framework. A JSON Web Token authentication plugin for the Django REST Framework.</p> <p>Installation</p> <pre><code>pip install djangorestframework-simplejwt\n</code></pre> <p>Tip</p> <pre><code># add rest_framework_simplejwt to INSTALLED_APPS.\n\nINSTALLED_APPS = [\n    ...\n    'rest_framework_simplejwt',\n    ...\n]\n</code></pre>"},{"location":"backend/package/simplejwt/#project-configuration","title":"Project Configuration","text":"<p>Then, your django project must be configured to use the library. In <code>settings.py</code>, add <code>rest_framework_simplejwt.authentication.JWTAuthentication</code> to the list of authentication classes:</p> <p>Tip</p> <pre><code>REST_FRAMEWORK = {\n    ...\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        ...\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n    ...\n}\n</code></pre> <p>Also, in your root <code>urls.py</code> file (or any other url config), include routes for Simple JWT\u2019s <code>TokenObtainPairView</code> and <code>TokenRefreshView</code> views:</p> <p>Tip</p> <pre><code>from rest_framework_simplejwt.views import (\n    TokenObtainPairView,\n    TokenRefreshView,\n)\n\nurlpatterns = [\n    ...\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    ...\n]\n</code></pre>"},{"location":"backend/package/simplejwt/#reference","title":"Reference","text":"<ul> <li>Simple JWT</li> <li>Django Environment - python-dotenv</li> <li>python-dotenv</li> <li>Generating Secret key in django app</li> <li>mkdocs dropdown - github</li> <li>mkdocs dropdown - stackoverflow </li> </ul>"},{"location":"backend/package/social-auth-app-django/","title":"social auth app django","text":"<p>Python Social Auth is an easy to setup social authentication/registration mechanism with support for several frameworks and auth providers.</p> <pre><code>$ pip install social-auth-app-django\n</code></pre> settings.py<pre><code>INSTALLED_APPS = (\n    ...\n    'social_django',\n    ...\n)\n</code></pre> urls.py<pre><code>urlpatterns = [\n    ...\n    url('', include('social_django.urls', namespace='social'))\n    ...\n]\n</code></pre>"},{"location":"backend/package/social-auth-app-django/#reference","title":"Reference","text":"<ul> <li>python-social-auth.readthedocs</li> </ul>"},{"location":"backend/package/tinymce/","title":"tinymce","text":"<pre><code># 1: Install django-tinymce using pip\npip install django-tinymce\n\n# 2: Add tinymce to INSTALLED_APPS in settings.py for your project:\n\nINSTALLED_APPS = (\n    ...\n    'tinymce',\n    ...\n)\n\n# 3: Add tinymce.urls to urls.py for your project:\n\nurlpatterns = patterns('',\n    ...\n    path('tinymce/', include('tinymce.urls')),\n    ...\n)\n</code></pre>"},{"location":"backend/package/tinymce/#reference","title":"Reference","text":"<ul> <li>tinymce: Django Editor</li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"blog/2024/05/06/active-link-in-django/","title":"Active link in django","text":"","tags":["Django","Python"]},{"location":"blog/2024/05/06/active-link-in-django/#active-link-in-django","title":"Active link in django","text":"<p>we'll explore different techniques to add an 'active' class to navigation elements based on the user's location, providing visual cues that enhance navigation clarity.</p>","tags":["Django","Python"]},{"location":"blog/2024/05/06/active-link-in-django/#method-1-url-comparison-with-template-tags","title":"Method 1: URL Comparison with Template Tags","text":"<p>method 1</p> <p>The first method involves straightforward URL comparison using Django's template tags. By comparing the request's path with the URLs associated with each navigation item, we can dynamically add the <code>active</code> class.</p> <pre><code>&lt;ul class=\"nav\"&gt;\n    &lt;li class=\"{% if request.path == '/' %}active{% endif %}\"&gt;\n        &lt;a href=\"/\"&gt;Home&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li class=\"{% if request.path == '/about/' %}active{% endif %}\"&gt;\n        &lt;a href=\"/about/\"&gt;About&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;!-- Add more navigation items here --&gt;\n&lt;/ul&gt;\n</code></pre>","tags":["Django","Python"]},{"location":"blog/2024/05/06/active-link-in-django/#method-2-assigning-url-to-variables","title":"Method 2: Assigning URL to Variables","text":"<p>method 2</p> <p>A more organized approach involves assigning URLs to variables using Django's <code>{% url %}</code> tag. This allows for cleaner template code and easier maintenance.</p> <pre><code>{% url 'home' as home_url %}\n{% url 'about' as about_url %}\n\n&lt;ul class=\"nav\"&gt;\n    &lt;li class=\"{% if request.path == home_url %}active{% endif %}\"&gt;\n        &lt;a href=\"{% url 'home' %}\"&gt;Home&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li class=\"{% if request.path == about_url %}active{% endif %}\"&gt;\n        &lt;a href=\"{% url 'about' %}\"&gt;About&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;!-- Add more navigation items here --&gt;\n&lt;/ul&gt;\n</code></pre>","tags":["Django","Python"]},{"location":"blog/2024/05/06/active-link-in-django/#method-3-url-prefix-comparison","title":"Method 3: URL Prefix Comparison","text":"<p>method 3</p> <p>For situations where multiple URLs share a common prefix, such as subpages, the startswith template filter can be utilized to simplify the code.</p> <pre><code>{% url 'home' as home_url %}\n{% url 'about' as about_url %}\n\n&lt;ul class=\"nav\"&gt;\n    &lt;li class=\"{% if request.path == home_url or request.path.startswith('/home/') %}active{% endif %}\"&gt;\n        &lt;a href=\"{% url 'home' %}\"&gt;Home&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li class=\"{% if request.path == about_url %}active{% endif %}\"&gt;\n        &lt;a href=\"{% url 'about' %}\"&gt;About&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;!-- Add more navigation items here --&gt;\n&lt;/ul&gt;\n</code></pre>","tags":["Django","Python"]},{"location":"blog/2024/05/06/active-link-in-django/#conclusion","title":"Conclusion","text":"<p>Enhancing navigation with an <code>active</code> state in Django not only improves user experience but also adds a touch of professionalism to your website. By implementing one of these methods, you can guide users seamlessly through your site, ensuring they always know where they are. Choose the approach that best fits your project's requirements and coding style, and elevate your Django website's navigation to new heights.</p>","tags":["Django","Python"]},{"location":"blog/2024/05/06/active-link-in-django/#django-template-patterns","title":"Django Template Patterns","text":"<p>active link</p> <p>Pattern a the active link</p> <p>Problem: The navigation bar is a common component in most pages. However, the active link needs to reflect the current page the user is on.</p> <p>Solution: Conditionally, change the active link markup by setting context variables or based on the request <code>path</code>.</p> <p>Problem details</p> <p>The naive way to implement the active link in a navigation bar is to manually set it in every page. However, this is neither DRY nor foolproof.</p> <p>Solution details</p> <p>There are several solutions to determine the <code>active link</code>. Excluding JavaScript-based approaches, they can be mainly grouped into template-only and custom tag-based solutions.</p> A template only solutionCustom tags <p>In every template, you will need to include the following line (or inherit it):</p> <pre><code>{% include \"_navbar.html\" with active_link='link2' %}\n</code></pre> <p>The <code>_navbar.html</code> file contains the navigation menu with set of checks for the <code>active_link</code> variable:</p> <pre><code>{% _navbar.html %}\n\n&lt;ul class=\"nav nav-pills\"&gt;\n    &lt;li {% if active_link == \"link1\" %} class=\"active\" {% endif %}&gt;\n        &lt;a href=\"{% url 'link1 %}\"&gt;Link1&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li {% if active_link == \"link2\" %} class=\"active\" {% endif %}&gt;\n        &lt;a href=\"{% url 'link2 %}\"&gt;Link2&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li {% if active_link == \"link3\" %} class=\"active\" {% endif %}&gt;\n        &lt;a href=\"{% url 'link3 %}\"&gt;Link3&lt;/a&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Django templates offer a versatile set of built-in tags. It is quite easy to create your own custom tag. Since custom tags live inside an app, create a <code>templatetags</code> directory inside an app. This directory must be a package, so it should have an (empty) <code>__init__.py</code> file.</p> <p>Next, write your custom template in an appropriately named Python file. For example, for this active link pattern, we can create a file called <code>nav.py</code> with the following contents:</p> <pre><code># app/templatetags/nav.py\n\n# depreciate in django4\n# from django.core.urlresolvers import resolve\n\nfrom django.template import Library\n\nregister = Library()\n\n@register.simple_tag\ndef active_nav(request, url):\n    url_name = resolve(request.path).url_name\n\n    if url_name == url:\n        return \"active\"\n    return \"\"\n</code></pre> <p>The syntax for calling this custom tag in a template is <code>{% active_nav request 'pattern_name' %}</code>. Notice that the <code>request</code> needs to be passed in every page that this tag is used.</p> <pre><code>{# base.html #}\n\n{% load_nav %}\n&lt;ul class=\"nav nav-pills\"&gt;\n    &lt;li class={% active_nav request 'active1' %}&gt;\n        &lt;a href=\"{% url 'active1' %}\"&gt;Active 1&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li class={% active_nav request 'active2' %}&gt;\n        &lt;a href=\"{% url 'active2' %}\"&gt;Active 2&lt;/a&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>","tags":["Django","Python"]},{"location":"blog/2024/05/06/active-link-in-django/#practical","title":"Practical","text":"<p>Note</p> header.html <pre><code>&lt;ul class=\"menu-section\"&gt;\n    &lt;li class=\"menu-item-has-children\"&gt;\n\n        {% if request.path == '/' %}\n            &lt;a href=\"#business\"&gt;Business&lt;/a&gt; &lt;i class=\"ion ion-ios-arrow-down dropdown-icon\"&gt;&lt;/i&gt;\n        {% else %}\n            &lt;a href=\"{% url 'business:inner' %}\"&gt;Business&lt;/a&gt; &lt;i class=\"ion ion-ios-arrow-down dropdown-icon\"&gt;&lt;/i&gt;\n        {% endif %}\n\n        &lt;div class=\"menu-subs menu-mega menu-column-4\"&gt;\n\n            &lt;div class=\"list-item\"&gt;\n                &lt;h4 class=\"title\"&gt;Product &amp; Services&lt;/h4&gt;\n                &lt;ul&gt;\n                    {% for item in header_business %}\n                        {% if item.category == '1' %}\n                            &lt;li&gt;&lt;a href=\"{% url 'business:item' item.slug %}\"&gt;{{ item.title }}&lt;/a&gt;&lt;/li&gt;\n                        {% endif %}\n                    {% endfor %}\n                &lt;/ul&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"list-item\"&gt;\n                &lt;h4 class=\"title\"&gt;Business Consulting&lt;/h4&gt;\n                &lt;ul&gt;\n                    {% for item in header_business %}\n                        {% if item.category == '2' %}\n                            &lt;li&gt;&lt;a href=\"{% url 'business:item' item.slug %}\"&gt;{{ item.title }}&lt;/a&gt;&lt;/li&gt;\n                        {% endif %}\n                    {% endfor %}\n                &lt;/ul&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"list-item\"&gt;\n                &lt;h4 class=\"title\"&gt;IT Services&lt;/h4&gt;\n                &lt;ul&gt;\n                    {% for item in header_business %}\n                        {% if item.category == '3' %}\n                            &lt;li&gt;&lt;a href=\"{% url 'business:item' item.slug %}\"&gt;{{ item.title }}&lt;/a&gt;&lt;/li&gt;\n                        {% endif %}\n                    {% endfor %}\n                &lt;/ul&gt;\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n    &lt;/li&gt;\n\n    &lt;li class=\"menu-item-has-children\"&gt;\n        {% if request.path == '/' %}\n          &lt;a href=\"#about\"&gt;About us&lt;/a&gt;\n        {% else %}\n          &lt;a href=\"{% url 'about:inner' %}\"&gt;About us&lt;/a&gt;\n        {% endif %}\n    &lt;/li&gt;\n\n&lt;/ul&gt;\n</code></pre>","tags":["Django","Python"]},{"location":"blog/2024/05/06/active-link-in-django/#reference","title":"Reference","text":"<ul> <li>Django Design Patterns and Best Practices Second Edition - pg:106</li> </ul>","tags":["Django","Python"]},{"location":"blog/2024/05/02/ensuring-admin-access-control-in-django-models/","title":"Ensuring Admin Access Control in Django Models","text":"","tags":["Django","Python"]},{"location":"blog/2024/05/02/ensuring-admin-access-control-in-django-models/#ensuring-admin-access-control-in-django-models","title":"Ensuring Admin Access Control in Django Models","text":"<p>In a Django project, managing access control to models within the admin interface is crucial for maintaining data integrity and security. While Django provides powerful tools for defining permissions, it's essential to customize these permissions to meet specific requirements.</p> <p>One common scenario is restricting access to certain models so that only superusers can add or modify instances. Let's take the example of a \"Contact\" model within our application.</p> Python<pre><code>from django.contrib import admin\nfrom .models import Contact\n\nclass ContactAdmin(admin.ModelAdmin):\n    def has_add_permission(self, request):\n        # Only superusers can add new contacts\n        if request.user.is_superuser:\n            return True\n        return False\n\n    def has_change_permission(self, request, obj=None):\n        # Only superusers can change existing contacts\n        if request.user.is_superuser:\n            return True\n        return False\n\nadmin.site.register(Contact, ContactAdmin)\n</code></pre> <p>In the above code, we subclass the default admin class for the <code>Contact</code> model and override the has_add_permission and has_change_permission methods. By doing so, we ensure that only superusers have the ability to add or modify instances of the \"Contact\" model.</p> <p>This approach offers fine-grained control over access permissions, preventing unauthorized users from tampering with sensitive data. It's particularly useful when dealing with models containing confidential information or critical settings.</p> <p>By implementing custom access control logic at the model level, we enhance the overall security posture of our Django application. Administrators can confidently manage permissions, knowing that sensitive models are safeguarded against unauthorized modifications.</p> <p>Resuable Mixins</p> <pre><code>from django.contrib import admin\n\nclass SuperuserPermissionMixin:\n    def has_add_permission(self, request):\n        # Only superusers can add new instances\n        if request.user.is_superuser:\n            return True\n        return False\n\n    def has_change_permission(self, request, obj=None):\n        # Only superusers can change existing instances\n        if request.user.is_superuser:\n            return True\n        return False\n</code></pre>","tags":["Django","Python"]},{"location":"blog/2024/05/02/ensuring-admin-access-control-in-django-models/#conclusion","title":"Conclusion","text":"<p>In conclusion, Django's flexibility empowers developers to tailor access control mechanisms to suit specific project requirements. By leveraging custom admin permissions, we can enforce strict access controls, promoting data integrity and enhancing overall security.</p> <p>In Django projects, always remember to carefully evaluate access requirements for each model and implement appropriate permission settings to mitigate risks effectively.</p>","tags":["Django","Python"]},{"location":"blog/2024/04/27/understanding-args-and-kwargs-in-python-functions/","title":"Understanding *args and **kwargs in Python Functions","text":"","tags":["Python"]},{"location":"blog/2024/04/27/understanding-args-and-kwargs-in-python-functions/#understanding-args-and-kwargs-in-python-functions","title":"Understanding <code>*args</code> and <code>**kwargs</code> in Python Functions","text":"<p>In the world of Python programming, understanding how to handle variable numbers of arguments in functions is crucial. Two special syntaxes, <code>*args</code> and <code>**kwargs</code>, offer powerful capabilities for achieving this flexibility.</p>","tags":["Python"]},{"location":"blog/2024/04/27/understanding-args-and-kwargs-in-python-functions/#args","title":"args","text":"<p><code>*args</code> stands for arguments and allows a function to accept a variable number of positional arguments. When using *args in a function definition, any number of arguments can be passed to the function, and they are collected into a tuple within the function.</p> <pre><code>def my_function(*args):\n    for arg in args:\n        print(arg)\n\nmy_function(1, 2, 3)\n</code></pre> Output<pre><code>1\n2\n3\n</code></pre>","tags":["Python"]},{"location":"blog/2024/04/27/understanding-args-and-kwargs-in-python-functions/#kwargs","title":"kwargs","text":"<p><code>**kwargs</code> stands for keyword arguments and enables a function to accept a variable number of keyword arguments. When using <code>**kwargs</code>, any number of keyword arguments can be passed to the function, and they are collected into a dictionary within the function, where the keys are the argument names.</p> <pre><code>def my_function(**kwargs):\n    for key, value in kwargs.items():\n        print(key, \":\", value)\n\nmy_function(name=\"Alice\", age=30, city=\"New York\")\n</code></pre> Output<pre><code>name : Alice\nage : 30\ncity : New York\n</code></pre>","tags":["Python"]},{"location":"blog/2024/04/27/understanding-args-and-kwargs-in-python-functions/#difference-between-args-kwargs","title":"Difference between args &amp; kwargs","text":"","tags":["Python"]},{"location":"blog/2024/04/27/understanding-args-and-kwargs-in-python-functions/#args_1","title":"<code>*args</code>:","text":"<ul> <li>Used to pass a variable number of positional arguments to a function.</li> <li>Collects all positional arguments into a tuple inside the function.</li> <li>When you use <code>*args</code> in a function definition, you can pass any number of positional arguments when calling that function.</li> <li>The arguments are accessed using their position in the tuple.</li> </ul>","tags":["Python"]},{"location":"blog/2024/04/27/understanding-args-and-kwargs-in-python-functions/#kwargs_1","title":"<code>**kwargs</code>:","text":"<ul> <li>Used to pass a variable number of keyword arguments (or named arguments) to a function.</li> <li>Collects all keyword arguments into a dictionary inside the function, where the keys are the argument names and the values are the corresponding values.</li> <li>When you use <code>**kwargs</code> in a function definition, you can pass any number of keyword arguments when calling that function.</li> <li>The arguments are accessed using their names as keys in the dictionary.</li> </ul>","tags":["Python"]},{"location":"blog/2024/04/27/understanding-args-and-kwargs-in-python-functions/#why-are-they-useful","title":"Why are they useful?","text":"<p>These features provide flexibility in function definitions, allowing them to handle various scenarios where the number of arguments might differ. Instead of specifying a fixed number of parameters, <code>*args</code> and <code>**kwargs</code> enable functions to adapt dynamically to different situations.</p> <p>Example</p> <pre><code>def example_function(*args, **kwargs):\n    print(\"Positional arguments (*args):\", args)\n    print(\"Keyword arguments (**kwargs):\", kwargs)\n\nexample_function(1, 2, 3, name=\"Alice\", age=30)\n</code></pre> <pre><code>Positional arguments (*args): (1, 2, 3)\nKeyword arguments (**kwargs): {'name': 'Alice', 'age': 30}\n</code></pre> <p>In this example, <code>example_function()</code> accepts both positional and keyword arguments, demonstrating the versatility provided by args and *kwargs.</p>","tags":["Python"]},{"location":"blog/2024/04/27/understanding-args-and-kwargs-in-python-functions/#conclusion","title":"Conclusion:","text":"<p>Understanding <code>*args</code> and <code>**kwargs</code> empowers Python developers to write more flexible and reusable code. By leveraging these features, functions can gracefully handle varying numbers of arguments, enhancing the overall robustness and adaptability of Python applications.</p>","tags":["Python"]},{"location":"blog/2024/04/23/strengthening-your-django-applications-with-defensive-programming/","title":"Strengthening Your Django Applications with Defensive Programming","text":"","tags":["Python","Django"]},{"location":"blog/2024/04/23/strengthening-your-django-applications-with-defensive-programming/#strengthening-your-django-applications-with-defensive-programming","title":"Strengthening Your Django Applications with Defensive Programming","text":"<p>Defensive programming is a programming paradigm or approach aimed at writing code that anticipates and guards against potential errors or unexpected behaviors. </p> <p>The goal of defensive programming is to make software more robust, resilient, and less prone to failure by incorporating mechanisms to handle unforeseen circumstances.</p> <p>In simple terms, Defensive programming in Django is like wearing a helmet while biking. It's about preparing your code for unexpected bumps and ensuring it stays safe. </p> <p>Here are three simple examples of defensive programming in Django:</p> <ol> <li> <p>Input Validation:</p> <pre><code>from django import forms\nfrom django.core.validators import RegexValidator\n\nclass RegistrationForm(forms.Form):\n    username = forms.CharField(max_length=30, validators=[\n        RegexValidator(\n            regex='^[a-zA-Z0-9]*$',\n            message='Username must contain only letters and numbers.',\n            code='invalid_username'\n        )\n    ])\n</code></pre> </li> <li> <p>Error Handling:</p> <pre><code>from django.shortcuts import get_object_or_404\nfrom myapp.models import MyModel\n\ndef my_view(request, object_id):\n    obj = get_object_or_404(MyModel, id=object_id)\n    # If obj doesn't exist, get_object_or_404 raises Http404\n    return render(request, 'my_template.html', {'obj': obj})\n</code></pre> <p>By using <code>get_object_or_404</code>, Django will automatically raise a 404 error if the object with the specified ID doesn't exist, ensuring that your application gracefully handles this scenario.</p> </li> <li> <p>Preventing Security Issues:</p> <pre><code>&lt;!-- Template --&gt;\n&lt;div&gt;{{ user_input|safe }}&lt;/div&gt;\n</code></pre> <p>By using the <code>|safe</code> filter, Django knows that you've already sanitized <code>user_input</code>, and it won't escape any HTML tags within it, thus preventing Cross-Site Scripting (XSS) attacks.</p> </li> </ol>","tags":["Python","Django"]},{"location":"blog/2024/04/27/difference-between-templateview-listview-and-view/","title":"Difference between TemplateView, ListView, and View","text":"","tags":["Django"]},{"location":"blog/2024/04/27/difference-between-templateview-listview-and-view/#difference-between-templateview-listview-and-view","title":"Difference between TemplateView, ListView, and View","text":"<p>In Django, <code>TemplateView</code>, <code>ListView</code>, and <code>View</code> are all class-based views used to handle HTTP requests. Here's a brief overview of when to use each:</p> <ol> <li> <p>TemplateView:</p> <ul> <li>Use <code>TemplateView</code> when you simply want to display a template without dealing with database queries or lists of objects.</li> <li>It's useful for static pages or pages that require minimal dynamic content.</li> <li>For example, displaying an \"About Us\" page or a contact form.</li> </ul> <p>Tip</p> Example<pre><code>from django.views.generic import TemplateView\n\nclass IndexView(TemplateView):\n    template_name = 'index.html'\n</code></pre> <p>In this example, <code>IndexView</code> renders the <code>index.html</code> template without any specific queryset or database interaction.</p> </li> <li> <p>ListView:</p> <ul> <li>Use <code>ListView</code> when you want to display a list of objects from the database.</li> <li>It automatically generates a queryset for you and passes it to the template.</li> <li>It's useful for displaying lists of items, such as blog posts, products, or user profiles.</li> <li>You need to specify the <code>model</code> attribute to tell Django which model to use for the queryset.</li> </ul> <p>Tip</p> Example<pre><code>from django.views.generic import ListView\nfrom .models import YourModel\n\nclass YourModelListView(ListView):\n    model = YourModel\n    template_name = 'yourmodel_list.html'\n    context_object_name = 'yourmodel_list'\n</code></pre> <p>In this example, <code>YourModelListView</code> displays a list of objects from the <code>YourModel</code> model. It automatically generates a queryset for <code>YourModel</code> and passes it to the template named <code>yourmodel_list.html</code>. The context_object_name attribute specifies the name of the context variable to use in the template.</p> </li> <li> <p>View:</p> <ul> <li><code>View</code> is the most basic class-based view in Django.</li> <li>You should use it when you need to handle more complex logic or customize the behavior of your view.</li> <li>Unlike <code>TemplateView</code> and <code>ListView</code>, <code>View</code> doesn't provide any built-in methods for rendering templates or working with querysets.</li> <li>You need to implement methods like <code>get()</code>, <code>post()</code>, <code>put()</code>, etc., to handle different types of HTTP requests.</li> </ul> <p>Tip</p> ExampleTheory <pre><code>from django.views.generic import View\nfrom django.http import HttpResponse\n\nclass MyView(View):\n    def get(self, request, *args, **kwargs):\n        # Your logic here\n        return HttpResponse(\"This is a GET response\")\n\n    def post(self, request, *args, **kwargs):\n        # Your logic here\n        return HttpResponse(\"This is a POST response\")\n</code></pre> <p>Now, regarding what this variable represents, it's always a queryset of objects. Whether it fetches <code>.objects.all()</code> or <code>.objects.first()</code> depends on the behavior of the ListView.</p> <p>By default, ListView fetches all objects in the database table associated with the model specified in the model attribute. So, <code>context_object_name</code> represents all the objects returned by <code>.objects.all()</code> for that model.</p> <p>If you want to fetch only the first object, you would need to customize the <code>get_queryset()</code> method in your ListView subclass like this:</p> <pre><code>from django.views.generic import ListView\nfrom .models import YourModel\n\nclass YourModelListView(ListView):\n    model = YourModel\n    template_name = 'yourmodel_list.html'\n    context_object_name = 'yourmodel_list'\n\n    def get_queryset(self):\n        return YourModel.objects.first()\n</code></pre> <p>This way, <code>context_object_name</code> would represent the first object returned by <code>.objects.first()</code> instead of all objects.</p> <p>In this example, <code>MyView</code> is a basic view that handles both GET and POST requests. You implement the <code>get()</code> and <code>post()</code> methods to define the logic for each type of request. Here, it simply returns a basic HTTP response for demonstration purposes. You can replace the response with whatever logic you need for your application.</p> </li> </ol> <p>In your case, if you're simply rendering the <code>index.html</code> template without any specific queryset or database interaction, <code>TemplateView</code> is appropriate. However, if you need to display a list of objects, you should consider using <code>ListView</code> and specifying the appropriate model. If you need more complex logic or customization, you might use a <code>View</code> subclass instead.</p>","tags":["Django"]},{"location":"blog/2024/05/09/django-model-fields-with-textchoices/","title":"Django Model Fields with TextChoices","text":"","tags":["Python","Django"]},{"location":"blog/2024/05/09/django-model-fields-with-textchoices/#django-model-fields-with-textchoices","title":"Django Model Fields with TextChoices","text":"<p>Before Django <code>3.0</code>, defining choices for model fields typically involved using tuples of tuples, which could be cumbersome and error-prone. With the introduction of TextChoices, Django provides a more elegant and Pythonic way to define choices using class-based syntax.</p> <pre><code>from django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nclass MyModel(models.Model):\n    class Status(models.TextChoices):\n        DRAFT = 'draft', _('Draft')\n        PUBLISHED = 'published', _('Published')\n        ARCHIVED = 'archived', _('Archived')\n\n    status = models.CharField(\n        max_length=20,\n        choices=Status.choices,\n        default=Status.DRAFT\n    )\n</code></pre> <p>In this example:</p> <ul> <li>We define a Status class as a subclass of TextChoices.</li> <li>Each choice is defined as a class attribute, with the first value representing the database representation and the second value providing a human-readable name.</li> <li>The status field of the MyModel model uses Status.choices for its choices.</li> </ul>","tags":["Python","Django"]},{"location":"blog/2024/05/09/django-model-fields-with-textchoices/#benefits-of-textchoices","title":"Benefits of TextChoices:","text":"<ol> <li>Improved Readability: Using TextChoices enhances the readability of your code by providing a clear and concise way to define choices within your model definitions.</li> <li>Enhanced Maintenance: With TextChoices, managing and updating the list of choices becomes more straightforward, reducing the chances of errors and inconsistencies.</li> <li>Autocomplete Support: Modern code editors often provide autocomplete support for class-based definitions, making it easier to work with TextChoices compared to tuples of tuples.</li> <li>Integration with Localization: TextChoices seamlessly integrates with Django's internationalization (i18n) and localization (l10n) features, allowing for easy translation of choice labels.</li> </ol>","tags":["Python","Django"]},{"location":"blog/2024/05/09/django-model-fields-with-textchoices/#conclusion","title":"Conclusion:","text":"<p>In conclusion, TextChoices is a valuable addition to Django's feature set, offering a more elegant and Pythonic way to define choices for model fields. By leveraging class-based syntax, TextChoices improves the readability, maintainability, and usability of Django models, making them easier to understand and maintain.</p> <p>Whether you're working on a small project or a large-scale application, consider incorporating TextChoices into your Django models to streamline your development workflow and enhance the quality of your code.</p>","tags":["Python","Django"]},{"location":"blog/2024/05/09/django-model-fields-with-textchoices/#life-before-textchoices","title":"Life Before <code>TextChoices</code>","text":"","tags":["Python","Django"]},{"location":"blog/2024/05/09/django-model-fields-with-textchoices/#1-tuples-of-tuples-old-style","title":"1. Tuples of Tuples (Old Style):","text":"<ul> <li>This is the traditional way of defining choices in Django.</li> <li>Choices are defined as tuples of tuples, where each inner tuple contains the value stored in the database and its human-readable representation.</li> </ul> <pre><code>STATUS_CHOICES = (\n    ('draft', 'Draft'),\n    ('published', 'Published'),\n    ('archived', 'Archived'),\n)\n</code></pre> <p>Use Case:</p> <p>This approach is suitable for simple cases where the list of choices is small and does not change frequently.</p>","tags":["Python","Django"]},{"location":"blog/2024/05/09/django-model-fields-with-textchoices/#2-namedtuples","title":"2. NamedTuples:","text":"<ul> <li>NamedTuples provide a more structured approach compared to tuples of tuples.</li> <li>Choices are defined using NamedTuples, which allows for better readability and maintainability.</li> </ul> <pre><code>from collections import namedtuple\n\nStatus = namedtuple('Status', ['value', 'display_name'])\nSTATUS_CHOICES = [\n    Status('draft', 'Draft'),\n    Status('published', 'Published'),\n    Status('archived', 'Archived'),\n]\n</code></pre> <p>Use Case:</p> <p>NamedTuples are useful when you want a more organized and maintainable way to define choices compared to tuples of tuples.</p>","tags":["Python","Django"]},{"location":"blog/2024/05/09/django-model-fields-with-textchoices/#3-class-based-choices-textchoices","title":"3. Class-Based Choices (TextChoices):","text":"<ul> <li>Introduced in Django 3.0, TextChoices provides a modern and Pythonic way to define choices using class-based syntax.</li> <li>Choices are defined as class attributes within a subclass of TextChoices.</li> </ul> <pre><code>from django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nclass Status(models.TextChoices):\n    DRAFT = 'draft', _('Draft')\n    PUBLISHED = 'published', _('Published')\n    ARCHIVED = 'archived', _('Archived')\n</code></pre> <p>Use Case:</p> <p>TextChoices is recommended for new projects or when you want to refactor existing code to improve readability and maintainability. It offers benefits such as autocomplete support and integration with localization.</p>","tags":["Python","Django"]},{"location":"blog/2024/05/09/django-model-fields-with-textchoices/#4-dynamic-choices","title":"4. Dynamic Choices:","text":"<ul> <li>Sometimes, you may need to dynamically generate choices based on certain conditions.</li> <li>Choices can be generated dynamically using a function or by querying a database.</li> </ul> <pre><code>def get_status_choices():\n    # Logic to generate choices dynamically\n    return [('draft', 'Draft'), ('published', 'Published')]\n\nclass MyModel(models.Model):\n    status = models.CharField(max_length=20, choices=get_status_choices)\n</code></pre> <p>Use Case:</p> <p>Dynamic choices are suitable when the list of choices depends on runtime conditions or needs to be fetched from external sources like a database.</p> <p>When choosing the appropriate method for defining choices, consider factors such as readability, maintainability, flexibility, and the specific requirements of your project. For new projects, TextChoices is recommended for its modern syntax and additional features, but the other methods still have their place depending on the complexity and context of your application.</p>","tags":["Python","Django"]},{"location":"blog/2024/01/05/viewset-vs-apiview/","title":"Viewset vs APIView","text":"","tags":["Drf"]},{"location":"blog/2024/01/05/viewset-vs-apiview/#viewset-vs-apiview","title":"Viewset vs APIView","text":"<p>The differences between APIView and Viewset vary depending on the particular needs and requirements. Therefore, we can provide a code-based example to decide which method should be used:</p> <p></p> <p>Now let\u2019s do the same operations using Viewset:</p> <pre><code>class BlogPostViewSet(viewsets.ModelViewSet):\n    queryset = BlogPost.objects.all()\n    serializer_class = BlogPostSerializer\n</code></pre> <p>At this point, we wrote less code using Viewset compared to the previous example created with APIView. Viewset contains several predefined methods that can be used for multiple operations, making model operations easier. Also, for customized operations, Viewset can be easily extended with extra methods provided by the Django Rest Framework.</p> <p>In addition, routers combined with Viewset can automatically match URLs and associate them with the view class, allowing us to easily perform URL routing. This is especially useful in large-scale projects or projects that work with many models.</p> <pre><code>router = routers.DefaultRouter()\nrouter.register(r'blog-posts', BlogPostViewSet)\n\nurlpatterns = [\n    path('', include(router.urls)),\n]\n</code></pre> <p>In this example, the router element registers our Viewset class and automatically generates the URLs required for the predefined CRUD operations. Thus, you can perform basic CRUD operations by sending GET, POST, PUT, PATCH and DELETE requests to the URL \u201c/blog-posts/\u201d.</p> <p>Conclusion</p> <ul> <li><code>APIView</code> is derived from Django\u2019s base View class, while <code>Viewset</code> is derived from a special <code>ViewSet class</code> of the Django Rest Framework.</li> </ul>","tags":["Drf"]},{"location":"blog/2024/01/05/viewset-vs-apiview/#reference","title":"Reference","text":"<ul> <li>Django APIView vs Viewsets Which one to Choose?</li> <li>APIView vs Viewsets</li> <li>Views vs Generic Views vs ViewSets</li> <li>GenericAPIView and Mixins</li> <li>More views and viewsets: offical docs</li> <li>Generic, Functional Based and Class Based Views in Django REST Framework</li> <li> <p>Difference between views and viewsets</p> </li> <li> <p>Customizing token claims</p> </li> <li> <p>JWT Decoder</p> </li> <li> <p>Viewsets vs Generic Views vs APIView vs Function Based Views: reddit</p> </li> <li>Comprehensive guide to GenericAPIViews in Django REST Framework</li> <li>Django REST Framework: Generics or ModelViewSets?: stackoverflow</li> </ul>","tags":["Drf"]},{"location":"blog/2024/05/07/creating-a-blog-model-in-django/","title":"Creating a blog model in django","text":""},{"location":"blog/2024/05/07/creating-a-blog-model-in-django/#creating-a-blog-model-in-django","title":"Creating a blog model in django","text":"<p>A Django model is a source of information and behaviors of your data. It consists of a Python class that subclasses django.db.models.Model. Each model maps to a single database table, where each attribute of the class represents a database field.</p>"},{"location":"blog/2024/05/07/creating-a-blog-model-in-django/#creating-the-post-model","title":"Creating the Post model","text":"models<pre><code>from django.db import models\nfrom django.utils import timezone\n\nclass Post(models.Model):\n    title = models.CharField(max_length=250)\n    slug = models.SlugField(max_length=250)\n    body = models.TextField()\n    publish = models.DateTimeField(default=timezone.now)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n\ndef__str__(self):\n    return self.title\n</code></pre>"},{"location":"blog/2024/05/07/creating-a-blog-model-in-django/#defining-a-default-sort-order","title":"Defining a default sort order","text":"<p>Blog posts are usually displayed in reverse chronological order (from newest to oldest). We will define a default ordering for our model. The default order will apply when obtaining objects from the database when no order is specified in the query.</p> models.py<pre><code>from django.db import models\nfrom django.utils import timezone\n\nclass Post(models.Model):\n    title = models.CharField(max_length=250)\n    slug = models.SlugField(max_length=250)\n    body = models.TextField()\n    publish = models.DateTimeField(default=timezone.now)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n\nclass Meta:\n    ordering = ['-publish']\n\ndef__str__(self):\n    return self.title\n</code></pre> <p>We have added a Meta class inside the model. This class defines metadata for the model. We use the ordering attribute to tell Django that it should sort results by the publish field. This ordering will apply by default for database queries when no specific order is provided in the query. We indicate descending order by using a hyphen before the field name, -publish. Posts will be returned in reverse chronological order by default.</p>"},{"location":"blog/2024/05/07/creating-a-blog-model-in-django/#adding-a-database-index","title":"Adding a database index","text":"models.py<pre><code>from django.db import models\nfrom django.utils import timezone\n\nclass Post(models.Model):\n    title = models.CharField(max_length=250)\n    slug = models.SlugField(max_length=250)\n    body = models.TextField()\n    publish = models.DateTimeField(default=timezone.now)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n\nclass Meta:\n    ordering = ['-publish']\n    indexes = [\n        models.Index(fields=['-publish']),\n    ]\n\ndef__str__(self):\n    return self.title\n</code></pre> <p>Danger</p> <p>Index ordering is not supported on MySQL. If you use MySQL for the database, a descending index will be created as a normal index.</p>"},{"location":"blog/2024/05/07/creating-a-blog-model-in-django/#activating-the-application","title":"Activating the application","text":"<pre><code>INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog.apps.BlogConfig',\n]\n</code></pre> <p>The BlogConfig class is the application configuration. Now Django knows that the application is active for this project and will be able to load the application models.</p>"},{"location":"blog/2024/05/07/creating-a-blog-model-in-django/#adding-a-status-field","title":"Adding a status field","text":"<p>A common functionality for blogs is to save posts as a draft until ready for publication. We will add a status field to our model that will allow us to manage the status of blog posts. We will be using Draft and Published statuses for posts.</p> models.py<pre><code>from django.db import models\nfrom django.utils import timezone\n\nclass Post(models.Model):\n    class Status(models.TextChoices):\n        DRAFT = 'DF', 'Draft'\n        PUBLISHED = 'PB', 'Published'\n\n    title = models.CharField(max_length=250)\n    slug = models.SlugField(max_length=250)\n    body = models.TextField()\n    publish = models.DateTimeField(default=timezone.now)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    status = models.CharField(\n                            max_length=2,\n                            choices=Status.choices,\n                            default=Status.DRAFT\n                            )\n    class Meta:\n        ordering = ['-publish']\n        indexes = [\n        models.Index(fields=['-publish']),\n    ]\n\n    def__str__(self):\n        return self.title\n</code></pre> <p>We have defined the enumeration class Status by subclassing models.TextChoices . The available choices for the post status are DRAFT and PUBLISHED. Their respective values are DF and PB, and their labels or readable names are Draft and Published.</p> <p>Django provides enumeration types that you can subclass to define choices simply. These are based on the enum object of Python\u2019s standard library. You can read more about enum at https://docs.python.org/3/library/enum.html.</p>"},{"location":"blog/2024/05/07/creating-a-blog-model-in-django/#shell","title":"Shell","text":"<pre><code>python manage.py shell\n\n&gt;&gt;&gt; from blog.models import Post\n\n&gt;&gt;&gt; Post.Status.choices\n[('DF', 'Draft'), ('PB', 'Published')]\n\n&gt;&gt;&gt; Post.Status.labels\n['Draft', 'Published']\n\n&gt;&gt;&gt; Post.Status.values\n['DF', 'PB']\n\n&gt;&gt;&gt; Post.Status.names\n['DRAFT', 'PUBLISHED']\n</code></pre> <p>You can access a specific lookup enumeration member with Post.Status.PUBLISHED and you can access its .name and .value properties as well.</p>"},{"location":"blog/2024/05/07/creating-a-blog-model-in-django/#adding-a-many-to-one-relationship","title":"Adding a many-to-one relationship","text":"<p>Posts are always written by an author. We will create a relationship between users and posts that will indicate which user wrote which posts. Django comes with an authentication framework that handles user accounts. The Django authentication framework comes in the django.contrib.auth package and contains a User model. </p> <p>We will use the User model from the Django authentication framework to create a relationship between users and posts.</p> models.py<pre><code>from django.db import models\nfrom django.utils import timezone\nfrom django.contrib.auth.models import User\n\nclass Post(models.Model):\n    class Status(models.TextChoices):\n        DRAFT = 'DF', 'Draft'\n        PUBLISHED = 'PB', 'Published'\n\n    title = models.CharField(max_length=250)\n    slug = models.SlugField(max_length=250)\n    author = models.ForeignKey(\n                                User,\n                                on_delete=models.CASCADE,\n                                related_name='blog_posts'\n                              )\n    body = models.TextField()\n    publish = models.DateTimeField(default=timezone.now)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    status = models.CharField(\n                            max_length=2,\n                            choices=Status.choices,\n                            default=Status.DRAFT\n                            )\n    class Meta:\n        ordering = ['-publish']\n        indexes = [\n        models.Index(fields=['-publish']),\n    ]\n\n    def__str__(self):\n        return self.title\n</code></pre>"},{"location":"blog/2024/05/07/creating-a-blog-model-in-django/#reference","title":"Reference","text":"<ul> <li>Django 4 By Example Fourth Edition by Antonio Mel\u00e9:pg-12</li> </ul>"},{"location":"blog/2024/01/05/django-cors/","title":"Django cors","text":"","tags":["Django"]},{"location":"blog/2024/01/05/django-cors/#django-cors","title":"Django cors","text":"<p>django-cors-headers is a Django application for handling the server headers required for Cross-Origin Resource Sharing (CORS). Adding CORS headers allows your resources to be accessed on other domains.</p> <p>CORS is a mechanism to allow interaction with resources hosted on different domains.</p> <pre><code>$ pip install django-cors-headers\n\n$ pip install django djangorestframework django-cors-headers\n</code></pre> <p>and then add it to your installed apps:</p> <pre><code>INSTALLED_APPS = [\n    ...,\n    \"corsheaders\",\n    ...,\n]\n</code></pre> <p>You will also need to add a middleware class to listen in on responses:</p> <pre><code>MIDDLEWARE = [\n    ...,\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    ...,\n]\n</code></pre> <p><code>CorsMiddleware</code> should be placed as high as possible, especially before any middleware that can generate responses such as Django\u2019s <code>CommonMiddleware</code> or Whitenoise\u2019s <code>WhiteNoiseMiddleware</code>. If it is not before, it will not be able to add the CORS headers to these responses.</p> <p>Configuration</p> <p>Configure the middleware\u2019s behaviour in your Django settings. You must set at least one of three following settings:</p> <ul> <li><code>CORS_ALLOWED_ORIGINS</code></li> <li><code>CORS_ALLOWED_ORIGIN_REGEXES</code></li> <li><code>CORS_ALLOW_ALL_ORIGINS</code></li> </ul> <p>Example:</p> <pre><code>CORS_ALLOWED_ORIGINS = [\n    \"https://example.com\",\n    \"https://sub.example.com\",\n    \"http://localhost:8080\",\n    \"http://127.0.0.1:9000\",\n]\n</code></pre> <p>CORS_ORIGIN_WHITELIST <code>Deprecated</code> VS CORS_ALLOWED_ORIGINS</p> <ul> <li>before version <code>3.0.0</code> he setting used to whitelist allowed origins was <code>CORS_ORIGIN_WHITELIST</code>.</li> <li>In version <code>3.0.0</code> and later, the naming convention was changed to <code>CORS_ALLOWED_ORIGINS</code> for consistency with other Django settings.</li> <li>You should use <code>CORS_ALLOWED_ORIGINS</code> in more recent versions of <code>django-cors-headers</code>:</li> </ul>","tags":["Django"]},{"location":"blog/2024/01/05/django-cors/#reference","title":"Reference","text":"<ul> <li>django-cors-headers</li> <li>Django CORS Guide</li> <li> <p>whitelist cors</p> </li> <li> <p>How to Integrate ReactJS with Django Framework</p> </li> <li>Using React with Django to create an app</li> <li>How to Integrate React and Django framework, in a simpler way</li> <li>what are the possible ways to integrate react: reddit</li> <li>How to build a React application in a Django project </li> <li>Integrating Django with Reactjs using Django REST Framework</li> </ul>","tags":["Django"]},{"location":"blog/2024/05/03/a-guide-to-csrf-cookie-settings/","title":"A Guide to CSRF Cookie Settings","text":"","tags":["Django"]},{"location":"blog/2024/05/03/a-guide-to-csrf-cookie-settings/#a-guide-to-csrf-cookie-settings","title":"A Guide to CSRF Cookie Settings","text":"<p>Django, a popular web framework for Python, comes equipped with robust measures to mitigate CSRF risks.</p>","tags":["Django"]},{"location":"blog/2024/05/03/a-guide-to-csrf-cookie-settings/#strengthening-django-security","title":"Strengthening Django Security:","text":"<p>In the dynamic landscape of web development, security is paramount. Django, a powerful Python web framework, provides robust measures to fortify applications against threats like Cross-Site Request Forgery (CSRF). Let's explore how two critical CSRF cookie settings, <code>CSRF_COOKIE_SECURE</code> and <code>CSRF_COOKIE_HTTPONLY</code>, enhance security.</p>","tags":["Django"]},{"location":"blog/2024/05/03/a-guide-to-csrf-cookie-settings/#1-csrf_cookie_secure-guarding-transmission","title":"1. <code>CSRF_COOKIE_SECURE</code>: Guarding Transmission","text":"<p>Consider a scenario where an attacker intercepts requests between a user and a Django application. Without encryption, sensitive data, including CSRF tokens, is vulnerable. Setting <code>CSRF_COOKIE_SECURE</code> to <code>True</code> ensures the CSRF cookie is transmitted solely over secure HTTPS connections.</p> <p>SECURE</p> python<pre><code># settings.py\nCSRF_COOKIE_SECURE = True\n</code></pre> <p>By enforcing HTTPS, Django shields the CSRF token from interception during transit. This simple setting bolsters the integrity of the CSRF protection mechanism, enhancing overall security.</p>","tags":["Django"]},{"location":"blog/2024/05/03/a-guide-to-csrf-cookie-settings/#2-csrf_cookie_httponly-limiting-script-access","title":"2. <code>CSRF_COOKIE_HTTPONLY</code>: Limiting Script Access","text":"<p>Now, imagine a malicious script injected into a page, aiming to hijack user sessions. Without proper safeguards, the script could access and manipulate the CSRF token, enabling unauthorized actions. By setting <code>CSRF_COOKIE_HTTPONLY</code> to <code>True</code>, Django restricts access to the CSRF cookie from client-side scripts.</p> <p>HTTPONLY</p> python<pre><code># settings.py\nCSRF_COOKIE_HTTPONLY = True\n</code></pre> <p>This precaution mitigates Cross-Site Scripting (XSS) attacks, preserving user session integrity and thwarting unauthorized requests.</p>","tags":["Django"]},{"location":"blog/2024/05/03/a-guide-to-csrf-cookie-settings/#conclusion","title":"Conclusion","text":"<p>In conclusion, configuring CSRF cookie settings in Django is essential for bolstering application security. By enabling CSRF_COOKIE_SECURE and CSRF_COOKIE_HTTPONLY, developers fortify their defenses against CSRF and XSS attacks, safeguarding user interactions and data confidentiality.</p> <p>```python title=\"python\"</p>","tags":["Django"]},{"location":"blog/2024/05/03/a-guide-to-csrf-cookie-settings/#settingspy","title":"settings.py","text":"<p>CSRF_COOKIE_SECURE = True CSRF_COOKIE_HTTPONLY = True ``</p> <p>As stewards of digital trust, let's prioritize security, ensuring Django applications provide users with a safe and resilient online experience.</p>","tags":["Django"]},{"location":"blog/2024/05/10/django-easy-thumbnails-package/","title":"Django easy-thumbnails package","text":"","tags":["Python","Django"]},{"location":"blog/2024/05/10/django-easy-thumbnails-package/#django-easy-thumbnails-package","title":"Django <code>easy-thumbnails</code> package","text":"","tags":["Python","Django"]},{"location":"blog/2024/05/10/django-easy-thumbnails-package/#reference","title":"Reference","text":"<ul> <li>easy-thumbnails : pypi</li> <li> <p>easy-thumbnails : github</p> </li> <li> <p>django-imagekit: readthedocs</p> </li> <li>django-imagekit: github</li> </ul> <p>Blog</p> <ul> <li>imagekit or easythumbnails for creating</li> <li>How to programmatically create django-imagekit based content instances?</li> <li>Django Easy Thumbnail not working</li> </ul>","tags":["Python","Django"]},{"location":"blog/2024/05/20/using-elasticsearch-with-django-and-drf/","title":"Using Elasticsearch with Django and DRF","text":"","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/using-elasticsearch-with-django-and-drf/#using-elasticsearch-with-django-and-drf","title":"Using Elasticsearch with Django and DRF","text":"<p>Elasticsearch can be used both in REST APIs and directly within Django applications. It is not limited to just one type of usage. </p> <p>Here's a breakdown of how Elasticsearch can be integrated and used in different contexts:</p> <ol> <li> <p>Direct Integration in Django:</p> <ul> <li> <p>Model Indexing:</p> <p>Index Django models directly into Elasticsearch. This can be done using libraries like django-elasticsearch-dsl, which provides Django-friendly abstractions to define Elasticsearch indices and documents that map to Django models.</p> </li> <li> <p>Search Views:</p> <p>Create search views in Django to handle search queries and display results. This allows you to build powerful search features into your Django web application.</p> </li> <li> <p>Template Rendering:</p> <p>Use Django templates to render search results directly on web pages, enabling full-text search capabilities in your Django web application.</p> </li> </ul> </li> <li> <p>Using Elasticsearch in Django REST Framework (DRF):</p> <ul> <li> <p>API Endpoints:</p> <p>Create REST API endpoints that utilize Elasticsearch for searching and retrieving data. This is particularly useful for building search APIs that can be consumed by various clients, including web and mobile applications.</p> </li> <li> <p>Serializers:</p> <p>Serialize Elasticsearch search results into JSON format, which can be returned by API endpoints.</p> </li> <li> <p>DRF Integration:</p> <p>Integrate Elasticsearch with Django REST Framework views and viewsets, enabling advanced search capabilities within your REST API.</p> </li> </ul> </li> </ol>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/using-elasticsearch-with-django-and-drf/#example-direct-integration-in-django","title":"Example: Direct Integration in Django","text":"<p>Here\u2019s a simple example of how to integrate Elasticsearch directly within a Django application, as covered earlier:</p> <ol> <li> <p>Install Dependencies</p> <p>bash</p> <pre><code>pip install elasticsearch-dsl django-elasticsearch-dsl\n</code></pre> </li> <li> <p>Configure Elasticsearch in Django Settings</p> <p>settings.py</p> <pre><code>ELASTICSEARCH_DSL = {\n    'default': {\n        'hosts': 'localhost:9200'\n    },\n}\n</code></pre> </li> <li> <p>Define Django Model and Elasticsearch Document</p> <p>models.py</p> <pre><code>from django.db import models\n\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.CharField(max_length=255)\n    published_date = models.DateField()\n    summary = models.TextField()\n\n    def __str__(self):\n        return self.title\n</code></pre> <p>documents.py</p> <pre><code>from django_elasticsearch_dsl import Document\nfrom django_elasticsearch_dsl.registries import registry\nfrom .models import Book\n\n@registry.register_document\nclass BookDocument(Document):\n    class Index:\n        name = 'books'\n\n    class Django:\n        model = Book\n        fields = [\n            'title',\n            'author',\n            'published_date',\n            'summary',\n        ]\n</code></pre> </li> <li> <p>Create Search View</p> <p>views.py</p> <pre><code>from django.shortcuts import render\nfrom .documents import BookDocument\n\ndef search(request):\n    query = request.GET.get('q')\n    if query:\n        books = BookDocument.search().query(\"multi_match\", query=query, fields=['title', 'author', 'summary'])\n    else:\n        books = BookDocument.search()\n\n    return render(request, 'search_results.html', {'books': books})\n</code></pre> </li> <li> <p>Define URL Pattern</p> <p>urls.py</p> <pre><code>from django.urls import path\nfrom .views import search\n\nurlpatterns = [\n    path('search/', search, name='search'),\n]\n</code></pre> </li> <li> <p>Create Template</p> <p>templates/search_results.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Search Results&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Search Results&lt;/h1&gt;\n    &lt;form method=\"GET\" action=\"{% url 'search' %}\"&gt;\n        &lt;input type=\"text\" name=\"q\" placeholder=\"Search for books...\" value=\"{{ request.GET.q }}\"&gt;\n        &lt;button type=\"submit\"&gt;Search&lt;/button&gt;\n    &lt;/form&gt;\n    &lt;ul&gt;\n        {% for book in books %}\n            &lt;li&gt;{{ book.title }} by {{ book.author }} ({{ book.published_date }})&lt;/li&gt;\n        {% empty %}\n            &lt;li&gt;No results found.&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> </ol>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/using-elasticsearch-with-django-and-drf/#example-using-elasticsearch-in-django-rest-framework","title":"Example: Using Elasticsearch in Django REST Framework","text":"<ol> <li> <p>Install Dependencies</p> <p>bash</p> <pre><code>pip install djangorestframework elasticsearch-dsl django-elasticsearch-dsl\n</code></pre> </li> <li> <p>Create API View</p> <p>api_views.py</p> <pre><code>from rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom .documents import BookDocument\n\nclass BookSearchAPIView(APIView):\n    def get(self, request):\n        query = request.GET.get('q')\n        if query:\n            books = BookDocument.search().query(\"multi_match\", query=query, fields=['title', 'author', 'summary'])\n        else:\n            books = BookDocument.search()\n\n        results = [{'title': book.title, 'author': book.author, 'published_date': book.published_date, 'summary': book.summary} for book in books]\n        return Response(results)\n</code></pre> </li> <li> <p>Define URL Pattern for API</p> <p>urls.py</p> <pre><code>from django.urls import path\nfrom .api_views import BookSearchAPIView\n\nurlpatterns = [\n    path('api/search/', BookSearchAPIView.as_view(), name='api_search'),\n]\n</code></pre> </li> </ol>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/using-elasticsearch-with-django-and-drf/#conclusion","title":"Conclusion","text":"<p>Elasticsearch can be used in both traditional Django views and in Django REST Framework to provide advanced search capabilities. The integration allows for powerful full-text search features that are not limited to just REST APIs but can also enhance the search functionality of a Django web application directly. This flexibility makes Elasticsearch a valuable tool for a wide range of use cases in Django projects.</p>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/","title":"Intro to Elasticsearch","text":"","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#intro-to-elasticsearch","title":"Intro to Elasticsearch","text":"<p>Elasticsearch is a powerful search and analytics engine that can be integrated with Django to enhance the search capabilities of a Django application. </p> <p>Here's a detailed look at what Elasticsearch is, why you might need it, when to use it, and when not to use it in the context of a Django project:</p>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#what-is-elasticsearch","title":"What is Elasticsearch?","text":"<p>Elasticsearch is an open-source, distributed, RESTful search engine built on top of Apache Lucene. It is designed to handle large volumes of data and provides real-time search and analytics capabilities. It is often used for full-text search, log and event data analysis, and as a general-purpose data store.</p>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#why-do-we-need-elasticsearch-in-django","title":"Why Do We Need Elasticsearch in Django?","text":"<p>Django's default search capabilities are limited, especially when dealing with complex queries, large datasets, and requirements for real-time search results. Elasticsearch addresses these limitations by providing:</p> <ol> <li> <p>Full-Text Search:</p> <p>Efficiently handle large amounts of text data, enabling advanced search features like stemming, synonyms, and relevancy ranking.</p> </li> <li> <p>Performance:</p> <p>High-speed querying and indexing capabilities, making it suitable for applications with substantial data and high query volume.</p> </li> <li> <p>Scalability:</p> <p>Distributed architecture allows it to scale horizontally, managing large datasets across multiple nodes.</p> </li> <li> <p>Advanced Queries:</p> <p>Supports complex queries, aggregations, and analytics that go beyond the capabilities of Django\u2019s ORM and basic database searches.</p> </li> <li> <p>Real-Time Data:</p> <p>Provides near real-time search capabilities, ensuring that data is quickly searchable after being indexed.</p> </li> </ol>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#when-to-use-elasticsearch-in-django","title":"When to Use Elasticsearch in Django?","text":"<ol> <li> <p>Complex Search Requirements:</p> <p>When you need advanced search features like full-text search, autocomplete, fuzzy search, or custom scoring.</p> </li> <li> <p>Large Datasets:</p> <p>If your application involves a significant amount of data that needs to be searched quickly.</p> </li> <li> <p>Real-Time Searching:</p> <p>When you need search results to be updated in real-time or near real-time.</p> </li> <li> <p>Analytics and Aggregations:</p> <p>When you require complex aggregations and analytics over your data.</p> </li> <li> <p>High Query Volume:</p> <p>Applications that need to handle a high volume of search queries efficiently.</p> </li> </ol>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#when-not-to-use-elasticsearch-in-django","title":"When Not to Use Elasticsearch in Django?","text":"<ol> <li> <p>Simple Applications:</p> <p>If your search requirements are basic and can be handled by Django\u2019s ORM or a simple database index, Elasticsearch might be overkill.</p> </li> <li> <p>Small Datasets:</p> <p>For applications with minimal data, the overhead of setting up and maintaining Elasticsearch might not be justified.</p> </li> <li> <p>Resource Constraints:</p> <p>Elasticsearch requires additional resources and maintenance. If your project has limited infrastructure or operational capacity, it might be better to stick with simpler solutions.</p> </li> <li> <p>Learning Curve and Complexity:</p> <p>Elasticsearch introduces additional complexity and has a steeper learning curve. If your team lacks the expertise or the time to learn and manage it, it might not be a good fit.</p> </li> </ol>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#integrating-elasticsearch-with-django","title":"Integrating Elasticsearch with Django","text":"<p>To integrate Elasticsearch with Django, you typically use libraries such as django-elasticsearch-dsl or elasticsearch-dsl. These libraries provide Django-friendly tools to define Elasticsearch indices, document types, and manage indexing operations. Here\u2019s a high-level overview of how to set it up:</p> <ol> <li> <p>Install Dependencies:</p> <p>Tip</p> bash<pre><code>pip install elasticsearch-dsl django-elasticsearch-dsl\n</code></pre> </li> <li> <p>Define Elasticsearch Settings: Configure your Elasticsearch connection in your Django settings.</p> <p>Tip</p> settings.py<pre><code># settings.py\nELASTICSEARCH_DSL = {\n    'default': {\n        'hosts': 'localhost:9200'\n    },\n}\n</code></pre> </li> <li> <p>Create Document Classes: Define your Elasticsearch document structure using Django models.</p> <p>Tip</p> documents.py<pre><code># documents.py\nfrom django_elasticsearch_dsl import Document\nfrom django_elasticsearch_dsl.registries import registry\nfrom myapp.models import MyModel\n\n@registry.register_document\nclass MyModelDocument(Document):\n    class Index:\n        name = 'mymodel_index'\n\n    class Django:\n        model = MyModel\n        fields = ['field1', 'field2']\n</code></pre> </li> <li> <p>Indexing Data: Ensure your data is indexed in Elasticsearch. You can create signals to automatically update the index when data changes.</p> </li> <li> <p>Search Queries: Use Elasticsearch DSL to perform search queries on your indexed data.</p> </li> </ol>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#conclusion","title":"Conclusion","text":"<p>Elasticsearch can significantly enhance the search functionality of a Django application, especially for projects that require complex search capabilities, handle large datasets, or need real-time data indexing and retrieval. However, it is important to assess the specific needs of your project to determine if the added complexity and resource requirements are justified. For simpler applications or those with minimal search requirements, Django\u2019s built-in search capabilities or a simpler solution may suffice.</p>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#practical-with-example","title":"Practical with Example","text":"","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#step-1-install-dependencies","title":"Step 1: Install Dependencies","text":"<p>First, install the necessary libraries using pip:</p> <p>Success</p> bash<pre><code>pip install elasticsearch-dsl django-elasticsearch-dsl\n</code></pre>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#step-2-configure-elasticsearch-in-django-settings","title":"Step 2: Configure Elasticsearch in Django Settings","text":"<p>Add your Elasticsearch configuration to your Django settings file (<code>settings.py</code>):</p> <p>Success</p> settings.py<pre><code># settings.py\nELASTICSEARCH_DSL = {\n    'default': {\n        'hosts': 'localhost:9200'  # Update if your Elasticsearch is hosted elsewhere\n    },\n}\n</code></pre>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#step-3-define-your-django-model","title":"Step 3: Define Your Django Model","text":"<p>Create a Django model that you want to index. For example, let\u2019s create a simple <code>Book</code> model:</p> <p>Success</p> <pre><code># models.py\nfrom django.db import models\n\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.CharField(max_length=255)\n    published_date = models.DateField()\n    summary = models.TextField()\n\n    def __str__(self):\n        return self.title\n</code></pre>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#step-4-create-an-elasticsearch-document","title":"Step 4: Create an Elasticsearch Document","text":"<p>Define a document that maps to the Book model using <code>django-elasticsearch-dsl</code>:</p> <p>Success</p> <pre><code># documents.py\nfrom django_elasticsearch_dsl import Document, fields\nfrom django_elasticsearch_dsl.registries import registry\nfrom .models import Book\n\n@registry.register_document\nclass BookDocument(Document):\n    class Index:\n        # Name of the Elasticsearch index\n        name = 'books'\n        # See Elasticsearch Indices API reference for available settings\n        settings = {\n            'number_of_shards': 1,\n            'number_of_replicas': 0\n        }\n\n    class Django:\n        model = Book  # The model associated with this Document\n\n        # The fields of the model you want to be indexed in Elasticsearch\n        fields = [\n            'title',\n            'author',\n            'published_date',\n            'summary',\n        ]\n</code></pre>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#step-5-indexing-data","title":"Step 5: Indexing Data","text":"<p>To ensure your data is indexed, you can create signals to automatically update the index when a <code>Book</code> instance is created, updated, or deleted.</p> <p>Success</p> <pre><code># signals.py\nfrom django.db.models.signals import post_save, post_delete\nfrom django.dispatch import receiver\nfrom .models import Book\nfrom .documents import BookDocument\n\n@receiver(post_save, sender=Book)\ndef update_document(sender, instance, **kwargs):\n    BookDocument().update(instance)\n\n@receiver(post_delete, sender=Book)\ndef delete_document(sender, instance, **kwargs):\n    BookDocument().delete(instance)\n</code></pre> <p>Connect the signals in your app\u2019s <code>apps.py</code>:</p> <p>Success</p> <pre><code># apps.py\nfrom django.apps import AppConfig\n\nclass MyAppConfig(AppConfig):\n    name = 'myapp'\n\n    def ready(self):\n        import myapp.signals  # Import signals to ensure they are registered\n</code></pre>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#step-6-perform-a-search-query","title":"Step 6: Perform a Search Query","text":"<p>Now you can perform a search query using the <code>BookDocument</code>. For example, you can create a simple search view in Django:</p> <p>Tip</p> <pre><code># views.py\nfrom django.shortcuts import render\nfrom .documents import BookDocument\n\ndef search(request):\n    query = request.GET.get('q')\n    if query:\n        books = BookDocument.search().query(\"multi_match\", query=query, fields=['title', 'author', 'summary'])\n    else:\n        books = BookDocument.search()\n\n    return render(request, 'search_results.html', {'books': books})\n</code></pre>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#step-7-create-a-template","title":"Step 7: Create a Template","text":"<p>Create a template to display the search results (<code>search_results.html</code>):</p> <p>Success</p> <pre><code>&lt;!-- templates/search_results.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Search Results&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Search Results&lt;/h1&gt;\n    &lt;form method=\"GET\" action=\"{% url 'search' %}\"&gt;\n        &lt;input type=\"text\" name=\"q\" placeholder=\"Search for books...\" value=\"{{ request.GET.q }}\"&gt;\n        &lt;button type=\"submit\"&gt;Search&lt;/button&gt;\n    &lt;/form&gt;\n    &lt;ul&gt;\n        {% for book in books %}\n            &lt;li&gt;{{ book.title }} by {{ book.author }} ({{ book.published_date }})&lt;/li&gt;\n        {% empty %}\n            &lt;li&gt;No results found.&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#step-8-add-url-pattern","title":"Step 8: Add URL Pattern","text":"<p>Finally, add a URL pattern to route to the search view (<code>urls.py</code>):</p> <p>Tip</p> <pre><code># urls.py\nfrom django.urls import path\nfrom .views import search\n\nurlpatterns = [\n    path('search/', search, name='search'),\n]\n</code></pre>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/05/20/intro-to-elasticsearch/#conclusion_1","title":"Conclusion","text":"<p>With these steps, you have integrated Elasticsearch with your Django application. You have defined a Book model, created an Elasticsearch document for it, set up signals to index the data, and implemented a basic search view and template. This setup will allow you to perform efficient full-text searches on your book data.</p>","tags":["Django","Drf","elasticsearch"]},{"location":"blog/2024/01/01/managing-development-env-in-django/","title":"Managing development .env in Django","text":"","tags":["Django"]},{"location":"blog/2024/01/01/managing-development-env-in-django/#managing-development-env-in-django","title":"Managing development <code>.env</code> in Django","text":"<p>Python-dotenv reads key-value pairs from a <code>.env</code> file and can set them as environment variables. It helps in the development of applications following the 12-factor principles.</p> <pre><code>$ pip install python-dotenv\n</code></pre> <p>Create a <code>.env.example</code> file in the root file.</p> <p>.env.example</p> <pre><code>SECRET_KEY=\nDB_NAME=\nDB_USER=root\nDB_PASS=\nDB_HOST=localhost\nDB_PORT=3306\n</code></pre> <p>while in development, copy and paste <code>.env.example</code>, new file called <code>.env</code></p> <p>.env</p> <pre><code>SECRET_KEY=\"your secret key inside quotes\"\nDB_NAME=db-name\nDB_USER=root\nDB_PASS=\nDB_HOST=localhost\nDB_PORT=3306\n</code></pre> <p>Update the <code>settings.py</code> file in project</p> <p>settings.py</p> <pre><code>from dotenv import load_dotenv\nfrom datetime import timedelta\nimport os\n\n# load environment variables from a file named .env into the environment of your application.\nload_dotenv()\n\n# added\nSECRET_KEY = os.environ.get('SECRET_KEY')\n\n\n# updated the databse\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': os.environ.get('DB_NAME'),\n        'USER': os.environ.get('DB_USER'),\n        'PASSWORD': os.environ.get('DB_PASS'),\n        'HOST': os.environ.get('DB_HOST'),\n        'PORT': os.environ.get('DB_PORT'),\n        'OPTIONS': {\n            'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\",\n        },\n    }\n}\n</code></pre> <p>That's it now you're good to go ;)</p>","tags":["Django"]},{"location":"blog/2024/01/01/managing-development-env-in-django/#reference","title":"Reference","text":"<ul> <li>python-dotenv</li> <li>django key generator online</li> </ul>","tags":["Django"]},{"location":"blog/2024/05/12/simplifying-django-views-with-get_object_or_404/","title":"Simplifying Django Views with get_object_or_404","text":""},{"location":"blog/2024/05/12/simplifying-django-views-with-get_object_or_404/#simplifying-django-views-with-get_object_or_404","title":"Simplifying Django Views with get_object_or_404","text":"<p>In the realm of Django development, building views that retrieve and display specific objects from the database is a common task. However, ensuring that these views gracefully handle scenarios where the requested object does not exist can be a bit cumbersome. This is where Django's <code>get_object_or_404</code> comes to the rescue, offering a simple yet powerful solution.</p>"},{"location":"blog/2024/05/12/simplifying-django-views-with-get_object_or_404/#what-is-get_object_or_404","title":"What is get_object_or_404?","text":"<p><code>get_object_or_404</code> is a shortcut function provided by Django that simplifies the process of retrieving objects from the database and handling the case where the object is not found. It takes a Django model class and any number of keyword arguments representing lookup parameters. If an object matching the provided criteria is found, <code>get_object_or_404</code> returns the object. If not, it raises a 404 error, indicating that the requested resource could not be found.</p>"},{"location":"blog/2024/05/12/simplifying-django-views-with-get_object_or_404/#how-to-use-get_object_or_404","title":"How to Use get_object_or_404","text":"<p>Using <code>get_object_or_404</code> is straightforward. Let's say we have a Django model called Article, and we want to build a view to display the details of a specific article. Here's how we can use <code>get_object_or_404</code> in our view function:</p> Python<pre><code>from django.shortcuts import render, get_object_or_404\nfrom .models import Article\n\ndef article_detail(request, article_id):\n    article = get_object_or_404(Article, pk=article_id)\n    return render(request, 'article_detail.html', {'article': article})\n</code></pre> <p>In this example, <code>get_object_or_404</code> retrieves an Article object based on its primary key (pk) from the database. If the article with the specified primary key does not exist, Django automatically raises a 404 error, and the user is presented with an appropriate error page.</p>"},{"location":"blog/2024/05/12/simplifying-django-views-with-get_object_or_404/#benefits-of-using-get_object_or_404","title":"Benefits of Using <code>get_object_or_404</code>","text":"<ul> <li> <p>Simplicity:</p> <p><code>get_object_or_404</code> simplifies the process of retrieving objects and handling the case of non-existent objects in Django views. It condenses multiple lines of code into a single function call.</p> </li> <li> <p>Readability:</p> <p>By using <code>get_object_or_404</code>, your code becomes more concise and easier to understand. It clearly communicates the intent of retrieving a specific object and handling potential errors.</p> </li> <li> <p>Robustness:</p> <p><code>get_object_or_404</code> ensures that your views gracefully handle scenarios where the requested object is not found, providing a seamless user experience and maintaining the integrity of your web application.</p> </li> </ul> <p>when not to use it?</p> <p>While get_object_or_404 is a convenient shortcut in Django for handling the case where an object is not found in the database, there are scenarios where it might not be the best choice:</p> <ul> <li> <p>API Development:</p> <p>In API development, you might prefer to return a JSON response with an appropriate error message instead of raising a 404 error directly. This gives you more control over the response format and allows you to provide additional information about the error.</p> </li> <li> <p>Custom Error Handling:</p> <p>In some cases, you might want to customize the error handling behavior beyond simply returning a 404 page. For example, you might want to log the error, send an email notification, or redirect the user to a different page based on the context.</p> </li> <li> <p>Soft Deletion:</p> <p>If your application supports soft deletion (marking objects as deleted instead of physically removing them from the database), <code>get_object_or_404</code> might not be suitable. It will raise a 404 error even for soft-deleted objects, which might not be the desired behavior. In such cases, you would need to implement custom logic to handle soft-deleted objects.</p> </li> <li> <p>Performance Considerations:</p> <p>While <code>get_object_or_404</code> is convenient, it always performs a database query, even if the object doesn't exist. In situations where performance is critical, such as high-traffic pages, it might be more efficient to check for the existence of the object explicitly and handle the case accordingly.</p> </li> <li> <p>Complex Querying:</p> <p>When querying objects based on complex criteria or relationships, get_object_or_404 might not be flexible enough. In such cases, you might need to use Django's queryset methods to retrieve the object and handle the case where it doesn't exist separately.</p> </li> </ul>"},{"location":"blog/2024/05/12/simplifying-django-views-with-get_object_or_404/#conclusion","title":"Conclusion","text":"<p>In conclusion, <code>get_object_or_404</code> is a valuable tool in the Django developer's arsenal, offering a convenient way to retrieve objects from the database and handle the case of non-existent objects in views. By leveraging this simple yet powerful function, you can streamline your Django development workflow and build more robust and user-friendly web applications.</p>"},{"location":"blog/2024/05/14/difference-between-django-httprequest-vs-requests-package/","title":"Difference between Django HttpRequest vs requests package","text":""},{"location":"blog/2024/05/14/difference-between-django-httprequest-vs-requests-package/#difference-between-django-httprequest-vs-requests-package","title":"Difference between Django HttpRequest vs requests package","text":"<p>The HttpRequest object in Django and the requests package serve different purposes and operate at different levels within a web application:</p>"},{"location":"blog/2024/05/14/difference-between-django-httprequest-vs-requests-package/#djangos-httprequest","title":"Django's HttpRequest:","text":"<p>Tip</p> <ul> <li> <p>Context:     The HttpRequest object represents an incoming HTTP request within a Django application.</p> </li> <li> <p>Usage:      It is used within Django views to access information about the incoming request, such as headers, method (GET, POST, etc.), GET and  POST - parameters, cookies, session data, and more.</p> </li> <li> <p>Scope:     It operates within the context of a single Django application and is primarily used for handling requests and generating responses - within that application.</p> </li> <li> <p>Server-Side:     HttpRequest is part of Django's server-side functionality for processing incoming requests and generating responses. It is used to build web applications using the Django framework.</p> </li> </ul>"},{"location":"blog/2024/05/14/difference-between-django-httprequest-vs-requests-package/#requests-package","title":"requests package:","text":"bash<pre><code># Python HTTP for Humans.\npip install requests\n\n# django-request is a statistics module for django\npip install django-request\n</code></pre> <p>Tip</p> <ul> <li> <p>Context:     The requests package is a third-party Python library used for making HTTP requests from Python scripts or applications.</p> </li> <li> <p>Usage:     It is used to send HTTP requests to external web services or APIs and handle the corresponding responses. It provides a simple and elegant API for making various types of HTTP requests (GET, POST, PUT, DELETE, etc.), setting request headers, passing parameters, handling response content, and more.</p> </li> <li> <p>Scope:     It can be used in any Python environment, not just within Django applications. You can use the requests package in standalone scripts, command-line utilities, web scrapers, and other Python applications to interact with web services and fetch data.</p> </li> <li> <p>Client-Side:     The requests package is typically used for client-side functionality, allowing Python applications to interact with web services and consume data from external sources.</p> </li> </ul>"},{"location":"blog/2024/05/19/django-in-production/","title":"Django in production","text":"","tags":["Django","Production"]},{"location":"blog/2024/05/19/django-in-production/#django-in-production","title":"Django in production","text":"<p>Deploying a Django project with multiple settings files, such as <code>base.py</code>, <code>local.py</code>, and <code>prod.py</code>, to a shared cPanel environment involves several steps. Below is a step-by-step guide to help you with this process:</p> <ol> <li> <p>Prepare Your Django Project for Deployment:</p> <ul> <li>Ensure your <code>prod.py</code> settings file is properly configured for a production environment. This includes setting <code>DEBUG</code> to <code>False</code>,configuring the allowed hosts, and setting up the database, static files, and other production-specific settings.</li> </ul> <p>Tip</p> prod.py<pre><code>from .base import *\n\nDEBUG = False\nALLOWED_HOSTS = ['yourdomain.com']\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'your_db_name',\n        'USER': 'your_db_user',\n        'PASSWORD': 'your_db_password',\n        'HOST': 'localhost',\n        'PORT': '',\n    }\n}\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n</code></pre> </li> <li> <p>Prepare Your Environment:</p> <ul> <li>Ensure you have Python installed on your cPanel. You might need to use the Python Selector or Setup Python App feature if available.</li> </ul> </li> <li> <p>Upload Your Django Project:</p> <ul> <li>Use the cPanel File Manager or an FTP client to upload your Django project files to your hosting account. Typically, you'll place these in the <code>public_html</code> directory or a subdirectory.</li> </ul> </li> <li> <p>Install Dependencies:</p> <ul> <li>Use SSH to access your cPanel account or use the cPanel terminal.</li> <li>Navigate to your project directory and create a virtual environment:</li> </ul> <p>Tip</p> bash<pre><code>python3 -m venv myenv\nsource myenv/bin/activate\n</code></pre> <ul> <li>Install your project dependencies:</li> </ul> <p>Tip</p> bash<pre><code>pip install -r requirements.txt\n</code></pre> </li> <li> <p>Configure WSGI:</p> <ul> <li>Ensure your project has a wsgi.py file configured correctly. It should look something like this:</li> </ul> <p>Tip</p> Python<pre><code>import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings.prod')\n\napplication = get_wsgi_application()\n</code></pre> </li> <li> <p>Setup the cPanel Application:</p> <ul> <li>In cPanel, go to the <code>Setup Python App</code> section.</li> <li>Create a new application and point it to your project\u2019s directory and virtual environment.</li> <li>Set the <code>Application startup file</code> to the location of your <code>wsgi.py</code> file and the <code>Application entry point</code> to <code>application</code>.</li> <li>Set the <code>Environment variables</code> to include DJANGO_SETTINGS_MODULE=myproject.settings.prod.</li> </ul> </li> <li> <p>Configure Static and Media Files:</p> <ul> <li>Ensure your <code>prod.py</code> settings handle static and media files correctly.</li> <li>In cPanel, use the <code>File Manager</code> to create the <code>static</code> and <code>media</code> directories if they don't exist.</li> <li>Collect static files by running:</li> </ul> <p>Tip</p> bash<pre><code>python manage.py collectstatic\n</code></pre> </li> <li> <p>Configure Database:</p> <ul> <li>If you are using a PostgreSQL or MySQL database, ensure that it is created in cPanel.</li> <li>Update your <code>prod.py</code> settings with the correct database credentials.</li> </ul> </li> <li> <p>Run Migrations:</p> <ul> <li>Apply the database migrations by running:</li> </ul> <p>Tip</p> bash<pre><code>python manage.py migrate\n</code></pre> </li> <li> <p>Security and Permissions:</p> <ul> <li>Ensure that your media and static files have the correct permissions.</li> <li>Secure your database credentials and secret key.</li> </ul> </li> <li> <p>Testing:</p> <ul> <li>Access your domain to verify the deployment. Debug any issues that arise by checking the cPanel error logs and your application logs.</li> </ul> </li> </ol> <p>By following these steps, you should be able to successfully deploy your Django project on a shared cPanel hosting environment with the production settings from <code>prod.py</code>.</p>","tags":["Django","Production"]},{"location":"blog/2024/05/19/django-in-production/#reference","title":"Reference","text":"<ul> <li>How To Deploy Django Application In CPANEL 2022 | SIMPLE :youtube vid</li> </ul>","tags":["Django","Production"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/","title":"Internationalization and Localization in Django: A Quick Guide","text":"","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#internationalization-and-localization-in-django-a-quick-guide","title":"Internationalization and Localization in Django: A Quick Guide","text":"<p>In today\u2019s globalized world, reaching a diverse audience means making your web application accessible in multiple languages. Django, a popular web framework, provides robust support for internationalization (i18n) and localization (l10n). In this blog, we\u2019ll explore how to set up your Django project to support multiple languages and adapt it to different cultural contexts.</p>","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#what-is-internationalization-i18n-and-localization-l10n","title":"What is Internationalization (<code>i18n</code>) and Localization (l10n)?","text":"<p>Internationalization (i18n) refers to designing your application in a way that makes it easy to adapt to various languages and regions. This involves preparing your codebase to handle different languages without requiring major changes.</p> <p>Localization (l10n) is the process of adapting your application to a specific locale. This includes translating text and adjusting formats (dates, currency, etc.) to meet regional requirements.</p> <p>Danger</p> <p>To resolve this issue, you need to install the GNU <code>gettext</code> package. Here are the instructions for installing it on different operating systems:</p> UbuntuFor Windows <pre><code>sudo apt-get update\nsudo apt-get install gettext\n</code></pre> <pre><code>choco install gettext\n</code></pre> <p>After Installation:</p> <p>After installing <code>gettext</code>, you should be able to run the <code>makemessages</code> command without encountering the msguniq error.</p> <pre><code>django-admin makemessages -l es\n</code></pre>","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#steps-to-implement-i18n-and-l10n-in-django","title":"Steps to Implement i18n and l10n in Django","text":"","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#step-1-enable-internationalization","title":"Step 1: Enable Internationalization","text":"<p>First, enable internationalization in your Django project\u2019s <code>settings.py</code>:</p> <p>settings.py</p> <pre><code>LANGUAGE_CODE = 'en-us'  # Default language\nUSE_I18N = True  # Enable translation system\nUSE_L10N = True  # Enable localized formatting\nUSE_TZ = True  # Enable timezone support\n\n# Supported languages\nLANGUAGES = [\n    ('en', 'English'),\n    ('es', 'Spanish'),\n    ('fr', 'French'),\n    # Add more languages as needed\n]\n\n# Path to locale directory\nLOCALE_PATHS = [\n    os.path.join(BASE_DIR, 'locale'),\n]\n</code></pre>","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#step-2-mark-text-for-translation","title":"Step 2: Mark Text for Translation","text":"<p>Mark the text you want to translate in your templates and Python code.</p> <p>In templates:</p> bash<pre><code>{% load i18n %}\n&lt;p&gt;{% trans \"Hello, world!\" %}&lt;/p&gt;\n</code></pre> <p>In Python code:</p> python<pre><code>from django.utils.translation import gettext as _\n\ndef my_view(request):\n    output = _(\"Welcome to my site.\")\n    return HttpResponse(output)\n</code></pre>","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#step-3-create-and-edit-message-files","title":"Step 3: Create and Edit Message Files","text":"<p>Generate message files using the makemessages command:</p> bash<pre><code>django-admin makemessages -l es  # For Spanish\ndjango-admin makemessages -l fr  # For French\n</code></pre> <p>Edit the generated <code>.po</code> files in the <code>locale</code> directory to provide translations:</p> bash<pre><code>#: path/to/your/file.py:line_number\nmsgid \"Welcome to my site.\"\nmsgstr \"Bienvenido a mi sitio.\"\n</code></pre> <p>Compile the message files with:</p> bash<pre><code>django-admin compilemessages\n</code></pre>","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#step-4-switching-languages","title":"Step 4: Switching Languages","text":"<p>Ensure LocaleMiddleware is enabled in your MIDDLEWARE setting:</p> python<pre><code>MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.locale.LocaleMiddleware',  # Enable LocaleMiddleware\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n</code></pre> <p>Manage language preferences in views or templates. Here\u2019s an example of setting the language via a URL parameter in a view:</p> Python<pre><code>from django.utils import translation\n\ndef set_language(request):\n    user_language = 'fr'\n    translation.activate(user_language)\n    request.session[translation.LANGUAGE_SESSION_KEY] = user_language\n    return redirect('/')\n</code></pre> <p>And in your template, provide a language selection form:</p> html<pre><code>&lt;form action=\"{% url 'set_language' %}\" method=\"post\"&gt;\n  {% csrf_token %}\n  &lt;input name=\"next\" type=\"hidden\" value=\"{{ redirect_to }}\"&gt;\n  &lt;select name=\"language\"&gt;\n    {% for lang in LANGUAGES %}\n      &lt;option value=\"{{ lang.0 }}\"&gt;{{ lang.1 }}&lt;/option&gt;\n    {% endfor %}\n  &lt;/select&gt;\n  &lt;input type=\"submit\" value=\"Go\"&gt;\n&lt;/form&gt;\n</code></pre>","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#conclusion","title":"Conclusion","text":"<p>Internationalizing and localizing your Django application opens it up to a global audience, making it more accessible and user-friendly. By following these steps, you can efficiently manage multiple languages and ensure that your application meets the cultural and linguistic needs of its users. Embrace the world of i18n and l10n in Django and take your web applications to the next level!</p>","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#reference","title":"Reference","text":"<ul> <li>a quick guide to django i18n</li> </ul>","tags":["Django"]},{"location":"blog/2024/04/18/django-images-not-showing-in-the-cpanel-or-shared-hosting/","title":"Django Images not showing in the Cpanel or Shared Hosting","text":"","tags":["Django"]},{"location":"blog/2024/04/18/django-images-not-showing-in-the-cpanel-or-shared-hosting/#django-images-not-showing-in-the-cpanel-or-shared-hosting","title":"Django Images not showing in the Cpanel or Shared Hosting","text":"<p>Using the re_path and serve combination in a URL pattern to serve media files (<code>MEDIA_ROOT</code>) directly in a production environment is a common approach, especially in scenarios where you might not have direct access to configure a web server like Nginx or Apache. </p> <p>While it's not the most optimal solution for high-traffic production environments, it can work effectively in smaller-scale deployments or situations where simplicity is preferred.</p> <p>However, it's important to be aware of the limitations and potential drawbacks:</p> <ul> <li>Performance</li> <li>Security</li> <li>Scalability</li> <li>Maintenance</li> </ul> <p>Success</p> settings.py<pre><code>from django.urls import path, include, re_path\n\nurlpatterns = [\n    ...\n    re_path(r'^media/(?P&lt;path&gt;.*)$', serve, {'document_root': settings.MEDIA_ROOT}),\n    ...\n]\n</code></pre> <p>In summary, while serving media files directly from Django using re_path and serve can be a convenient solution in certain scenarios, it's essential to consider the trade-offs in terms of performance, security, scalability, and maintenance. </p> <p>Evaluate your specific requirements and constraints to determine whether this approach is suitable for your production environment. If scalability and performance are critical factors, consider using a dedicated web server or alternative solutions for serving media files.</p>","tags":["Django"]},{"location":"blog/2024/04/18/django-images-not-showing-in-the-cpanel-or-shared-hosting/#reference","title":"Reference","text":"<ul> <li>Django Staticfiles and Media not showing when DEBUG = False [Fixed]</li> <li>Django Staticfiles and Media not showing when DEBUG = False - Fixed 100%: youtube</li> <li>Why you shouldn't \u274c\u274c deploy your django application on shared hosting or cpanel ??</li> </ul>","tags":["Django"]},{"location":"blog/2024/05/14/django-model-inheritance/","title":"Django Model Inheritance","text":""},{"location":"blog/2024/05/14/django-model-inheritance/#django-model-inheritance","title":"Django Model Inheritance","text":"<p>Polymorphism is the provision of a single interface to entities of different types. You need a versatile data model that allows you to store diverse content that is accessible through a single interface.</p>"},{"location":"blog/2024/05/14/django-model-inheritance/#using-model-inheritance","title":"Using model inheritance","text":"<p>Django supports model inheritance. It works in a similar way to standard class inheritance in Python. Django offers the following three options to use model inheritance:</p> <ol> <li> <p>Abstract models:</p> <p>Useful when you want to put some common information into several models.</p> </li> <li> <p>Multi-table model inheritance:</p> <p>Applicable when each model in the hierarchy is considered a complete model by itself.</p> </li> <li> <p>Proxy models:</p> <p>Useful when you need to change the behavior of a model, for example, by including additional methods, changing the default manager, or using different meta options.</p> </li> </ol> <p>Let\u2019s take a closer look at each of them.</p> <p>Example</p> Abstract modelsMulti-table model inheritanceProxy models <p>An abstract model is a base class in which you define the fields you want to include in all child models. Django doesn\u2019t create any database tables for abstract models. A database table is created for each child model, including the fields inherited from the abstract class and the ones defined in the child model.</p> <p>To mark a model as abstract, you need to include <code>abstract=True</code> in its Meta class. Django will recognize that it is an abstract model and will not create a database table for it. To create child models, you just need to subclass the abstract model.</p> Python<pre><code>from django.db import models\n\nclass BaseContent(models.Model):\n    title = models.CharField(max_length=100)\n    created = models.DateTimeField(auto_now_add=True)\n\n    class Meta:\n        abstract = True\n\nclass Text(BaseContent):\n    body = models.TextField()\n</code></pre> <p>In this case, Django would create a table for the Text model only, including the title, created, and body fields.</p> <p>In multi-table inheritance, each model corresponds to a database table. Django creates a OneToOneField field for the relationship between the child model and its parent model. </p> <p>To use multi-table inheritance, you have to subclass an existing model. Django will create a database table for both the original model and the sub-model. The following example shows multi-table inheritance:</p> Python<pre><code>from django.db import models\n\nclass BaseContent(models.Model):\n    title = models.CharField(max_length=100)\n    created = models.DateTimeField(auto_now_add=True)\n\nclass Text(BaseContent):\n    body = models.TextField()\n</code></pre> <p>Django will include an automatically generated OneToOneField field in the Text model and create a database table for each model.</p> <p>A proxy model changes the behavior of a model. Both models operate on the database table of the original model. To create a proxy model, add <code>proxy=True</code> to the Meta class of the model. The following example illustrates how to create a proxy model:</p> Python<pre><code>from django.db import models\nfrom django.utils import timezone\n\nclass BaseContent(models.Model):\n    title = models.CharField(max_length=100)\n    created = models.DateTimeField(auto_now_add=True)\n\nclass OrderedContent(BaseContent):\n    class Meta:\n        proxy = True\n        ordering = ['created']\n\n    def created_delta(self):\n        return timezone.now() - self.created\n</code></pre> <p>Here, you define an OrderedContent model that is a proxy model for the Content model. This model provides a default ordering for QuerySets and an additional <code>created_delta()</code> method. Both models, Content and OrderedContent, operate on the same database table, and objects are accessible via the ORM through either model.</p>"},{"location":"blog/2024/05/14/django-model-inheritance/#creating-the-content-models","title":"Creating the Content models","text":"<p>The Content model of your courses application contains a generic relation to associate different types of content with it. You will create a different model for each type of content. All Content models will have some fields in common and additional fields to store custom data. You are going to create an abstract model that provides the common fields for all Content models.</p> <p>Edit the <code>models.py</code> file of the courses application and add the following code to it:</p> <p>Note</p> models.py<pre><code>from django.db import models\nfrom django.contrib.auth.models import User\n\nclass ItemBase(models.Model):\n    owner = models.ForeignKey(User, related_name='%(class)s_related', on_delete=models.CASCADE)\n    title = models.CharField(max_length=250)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        abstract = True\n\n        def __str__(self):\n            return self.title\n\nclass Text(ItemBase):\n    content = models.TextField()\n\nclass File(ItemBase):\n    file = models.FileField(upload_to='files')\n\nclass Image(ItemBase):\n    file = models.FileField(upload_to='images')\n\nclass Video(ItemBase):\n    url = models.URLField()\n</code></pre>"},{"location":"blog/2024/05/14/django-model-inheritance/#reference","title":"Reference","text":"<ul> <li>Django 4 by Example  by Antonio Mel\u00e9: pg 525</li> </ul>"},{"location":"blog/2024/04/20/splitting-django-modelspy-into-multiple-files/","title":"Splitting django models.py into multiple files","text":"","tags":["Python","Django"]},{"location":"blog/2024/04/20/splitting-django-modelspy-into-multiple-files/#splitting-django-modelspy-into-multiple-files","title":"Splitting django <code>models.py</code> into multiple files","text":"<p>M is bigger than V and C in Django</p> <p>In Django, models are classes that provide an object-oriented way of dealing with databases. Typically, each class refers to a database table and each attribute refers to a database column. You can make queries to these tables using an automatically generated API.</p>","tags":["Python","Django"]},{"location":"blog/2024/04/20/splitting-django-modelspy-into-multiple-files/#splitting-modelspy-into-multiple-files","title":"Splitting models.py into multiple files","text":"<p>Like most components of Django, a large <code>models.py</code> file can be split up into multiple files within a package. A package is implemented as a directory, which can contain multiple files, one of which must be a specially named file called <code>__init__.py</code>. This file can be empty, but should exist.</p> <p>All definitions that can be exposed at package level must be defined in <code>__init__.py</code> with global scope. For example, if we split models.py into individual classes, in corresponding files inside the models subdirectory such as <code>postable.py</code>, <code>post.py</code>, and <code>comment.py</code>, then the directory structure would look as follows:</p> <pre><code>models/\n\u251c\u2500\u2500 comment.py\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 postable.py\n\u2514\u2500\u2500 post.py\n</code></pre> <p>To ensure that all the models are imported correctly, <code>__init__.py</code>  should have the following lines.</p> <pre><code>from postable import Postable\nfrom post import Post\nfrom comment import Comment\n</code></pre> <p>Now you can import <code>models.Post</code> as previously.</p> <p>Any other code in the <code>__init__.py</code> file will be run when the package is imported. Hence, it is the ideal place for any package-level initialization code.</p>","tags":["Python","Django"]},{"location":"blog/2024/04/20/splitting-django-modelspy-into-multiple-files/#reference","title":"Reference","text":"<ul> <li> <p>Django Design Patterns and Best Practices  by Arun Ravindran : Second Edition - pg 39</p> </li> <li> <p>Django refactoring \u2014 how to split admin.py and models.py in 3 steps</p> </li> <li>Divide Models.py into smaller parts</li> </ul>","tags":["Python","Django"]},{"location":"blog/2024/05/09/django-admin-forms-with-formfield_overrides/","title":"Django Admin Forms with formfield_overrides","text":"","tags":["Python","Django"]},{"location":"blog/2024/05/09/django-admin-forms-with-formfield_overrides/#django-admin-forms-with-formfield_overrides","title":"Django Admin Forms with formfield_overrides","text":"<p><code>formfield_overrides</code> is a nifty attribute available in Django's <code>admin.ModelAdmin</code> class that allows developers to customize the form fields used in the admin interface for specific model fields. This feature enables you to enhance the user experience, integrate third-party widgets, and streamline data entry without the need for extensive customizations.</p> <pre><code>from django.contrib import admin\nfrom django.db import models\nfrom myapp.models import Article\n\nclass ArticleAdmin(admin.ModelAdmin):\n    formfield_overrides = {\n        models.TextField: {'widget': TinyMCE},\n    }\n\nadmin.site.register(Article, ArticleAdmin)\n</code></pre> <p>In this example, we've overridden the form field for TextField model fields to use the TinyMCE widget. Now, whenever administrators access the content field in the admin interface, they'll be greeted with a feature-rich editor, allowing them to format and style the article content effortlessly.</p>","tags":["Python","Django"]},{"location":"blog/2024/05/09/django-admin-forms-with-formfield_overrides/#lets-demonstrate-both-approaches-using-an-example","title":"Let's demonstrate both approaches using an example:","text":"<p>Using HTMLField directly from a third-party package like <code>tinymce.models</code> in your model has a similar effect to using <code>formfield_overrides</code> in the admin. However, there are some differences in how they work and their implications:</p>","tags":["Python","Django"]},{"location":"blog/2024/05/09/django-admin-forms-with-formfield_overrides/#1-directly-using-htmlfield-in-the-model","title":"1. Directly Using HTMLField in the Model:","text":"<ul> <li>This approach directly modifies the model field itself. Any form using this model will automatically render the content field using the specified HTML editor, in this case, TinyMCE.</li> <li>It affects all forms and views that use the NewsItem model, not just the admin interface. So if you have forms outside the admin that use the content field, they will also render with the HTML editor.</li> <li>It couples the model tightly with the specific HTML editor implementation. If you later decide to switch to a different HTML editor or remove it altogether, you'll need to update the model field definition and potentially refactor any related code.</li> </ul> models.py<pre><code>from django.db import models\nfrom tinymce.models import HTMLField\n\nclass NewsItem(models.Model):\n    title = models.CharField(max_length=120)\n    content = HTMLField()\n</code></pre> <p>Note</p> <p>In this approach, we're directly using HTMLField from tinymce.models as the field type for the content field in the NewsItem model. This means that whenever this model is used in a form, whether in the admin or elsewhere in your application, the content field will render with the TinyMCE HTML editor.</p>","tags":["Python","Django"]},{"location":"blog/2024/05/09/django-admin-forms-with-formfield_overrides/#2-using-formfield_overrides-in-the-admin","title":"2. Using formfield_overrides in the Admin:","text":"<ul> <li>This approach provides more flexibility and separation of concerns. It allows you to customize the form field used in the admin interface without directly modifying the model field.</li> <li>It only affects the admin interface. Other forms and views using the same model will continue to use the default form field unless explicitly overridden.</li> <li>It provides a cleaner separation between data models and presentation concerns. The model definition remains focused on data structure, while the admin customization is handled separately.</li> </ul> admin.py<pre><code>from django.contrib import admin\nfrom django.db import models\nfrom myapp.models import NewsItem\nfrom tinymce.widgets import TinyMCE\n\nclass NewsItemAdmin(admin.ModelAdmin):\n    formfield_overrides = {\n        models.TextField: {'widget': TinyMCE()},\n    }\n\nadmin.site.register(NewsItem, NewsItemAdmin)\n</code></pre> <p>Note</p> <p>In this approach, we're using formfield_overrides within the NewsItemAdmin class to specify that any TextField form fields in the admin interface should use the TinyMCE widget. This means that only in the admin interface will the content field render with the TinyMCE HTML editor. Outside of the admin, such as in custom forms or views, the default behavior of rendering a text input field for TextField will be preserved.</p>","tags":["Python","Django"]},{"location":"blog/2024/05/09/django-admin-forms-with-formfield_overrides/#summary","title":"Summary","text":"<p>Tip</p> <ul> <li>Directly Using HTMLField in the Model: Simple and straightforward, but affects all forms and views using the model, including those outside the admin.</li> <li>Using <code>formfield_overrides</code> in the Admin: Provides more flexibility and separation of concerns, allowing customization specifically for the admin interface without affecting other parts of the application.</li> </ul> <p>Choose the approach that best fits your project's requirements, considering factors such as reusability, maintainability, and the need for customization in different parts of your application. </p>","tags":["Python","Django"]},{"location":"blog/2024/05/09/django-admin-forms-with-formfield_overrides/#reference","title":"Reference","text":"","tags":["Python","Django"]},{"location":"blog/2024/05/08/customizing-how-models-are-displayed/","title":"Customizing how models are displayed","text":"","tags":["Python","Django"]},{"location":"blog/2024/05/08/customizing-how-models-are-displayed/#customizing-how-models-are-displayed","title":"Customizing how models are displayed","text":"<p>In Django, ModelAdmin is a class used in the Django admin interface to customize how models are displayed and interacted with. It allows you to specify various attributes and methods to control the behavior and appearance of models in the admin interface. </p> <p>Now, we will take a look at how to customize the administration site.</p> admin.py<pre><code>from django.contrib import admin\nfrom .models import Post\n\n@admin.register(Post)\nclass PostAdmin(admin.ModelAdmin):\n    list_display = ['title', 'slug', 'author', 'publish', 'status']\n    list_filter = ['status', 'created', 'publish', 'author']\n    search_fields = ['title', 'body']\n    prepopulated_fields = {'slug': ('title',)}\n    raw_id_fields = ['author']\n    date_hierarchy = 'publish'\n    ordering = ['status', 'publish']\n</code></pre>","tags":["Python","Django"]},{"location":"blog/2024/05/08/customizing-how-models-are-displayed/#understanding-modeladmin","title":"Understanding ModelAdmin","text":"<p>The ModelAdmin class serves as a bridge between Django models and the admin interface. By defining a ModelAdmin class for each model, developers gain fine-grained control over how data is presented and manipulated in the admin interface.</p> <p>Here are some common attributes used in ModelAdmin:</p> <p>Note</p> most usedall attribute <ol> <li>list_display: Specifies which fields should be displayed as columns in the list view of the admin interface.</li> <li>list_filter: Enables filtering of data based on specified fields, providing users with options to refine the displayed records.</li> <li>search_fields: Allows users to search for specific records within the admin interface, typically by specifying relevant field names.</li> <li>readonly_fields: Specifies fields that should be read-only in the admin interface, preventing users from modifying them.</li> <li>actions: Defines custom actions that can be performed on selected items in the admin interface, such as deleting multiple records at once.</li> <li>fieldsets: Organizes fields into sections in the detail view for improved readability and organization.</li> <li>list_editable: Specifies which fields can be edited directly from the list view, providing a convenient way to update multiple records at once.</li> <li>list_display_links: Specifies which fields should link to the change view from the list view, allowing users to quickly navigate to detailed. information.</li> <li>list_per_page: Sets the number of items displayed per page in the list view, allowing developers to control pagination.</li> <li>ordering: Defines the default ordering of records in the admin interface, typically based on one or more fields.</li> </ol> <ol> <li>list_display: A tuple or list of model field names that should be displayed as columns in the model's list view in the admin interface.</li> <li>list_filter: A tuple or list of field names that should be used as filters in the list view.</li> <li>search_fields: A tuple or list of field names that should be searchable in the admin interface.</li> <li>list_editable: A tuple or list of field names that can be edited directly from the list view.</li> <li>list_display_links: A tuple or list of field names that should link to the change view from the list view.</li> <li>list_per_page: An integer specifying the number of items displayed per page in the list view.</li> <li>list_select_related: A boolean specifying whether to use select_related() in the queryset for the list view.</li> <li>ordering: A tuple or list of field names used to order the queryset in the admin interface.</li> <li>fields: A tuple or list of field names to be displayed in the detail view of the model.</li> <li>fieldsets: A list of two-tuples, where each two-tuple represents a section of fields in the detail view.</li> <li>readonly_fields: A tuple or list of field names that should be read-only in the admin interface.</li> <li>date_hierarchy: A string representing the name of a DateField or DateTimeField used to create a date-based drilldown navigation in the admin interface.</li> <li>prepopulated_fields: A dictionary specifying fields whose values are automatically set based on other fields.</li> <li>actions: A list of custom actions that can be performed on selected items in the admin interface.</li> <li>filter_horizontal and filter_vertical: A tuple or list of field names used to specify ManyToManyField fields displayed as horizontal or vertical filter widgets, respectively.</li> </ol> <p>These are just a few of the most commonly used attributes of the ModelAdmin class. Depending on your needs, you may also override methods such as get_queryset(), formfield_for_foreignkey(), get_form() etc., to further customize the behavior of your model in the admin interface.</p>","tags":["Python","Django"]},{"location":"blog/2024/05/08/customizing-how-models-are-displayed/#reference","title":"Reference","text":"<ul> <li>Django 4 By Example Fourth Edition by Antonio Mel\u00e9:pg-28</li> </ul>","tags":["Python","Django"]},{"location":"blog/2024/05/12/understanding-slugify-and-slugfield-in-django/","title":"Understanding Slugify and SlugField in Django","text":""},{"location":"blog/2024/05/12/understanding-slugify-and-slugfield-in-django/#understanding-slugify-and-slugfield-in-django","title":"Understanding Slugify and SlugField in Django","text":"<p>In the world of web development with Django, creating clean and SEO-friendly URLs is crucial for enhancing user experience and search engine visibility. Two essential tools in achieving this are slugify and SlugField. Let's delve into what they are and how they play their roles in Django applications.</p>"},{"location":"blog/2024/05/12/understanding-slugify-and-slugfield-in-django/#slugify-generating-url-friendly-strings","title":"Slugify: Generating URL-Friendly Strings","text":"<p>Imagine you have user-generated content or dynamic data that you want to incorporate into URLs. This is where <code>slugify</code> steps in. It's a handy utility function provided by Django that transforms any string into a URL-friendly format. By removing special characters, spaces, and converting text to lowercase, <code>slugify</code> ensures that your URLs are clean, readable, and devoid of any funky characters that might cause issues.</p> python<pre><code>from django.utils.text import slugify\n\ntitle = \"Hello World, How are you?\"\nslug = slugify(title)\n# Output: \"hello-world-how-are-you\"\n</code></pre>"},{"location":"blog/2024/05/12/understanding-slugify-and-slugfield-in-django/#slugfield-storing-slugs-in-models","title":"SlugField: Storing Slugs in Models","text":"<p>Now, let's say you want to store these clean, URL-friendly strings in your database. That's where <code>SlugField</code> comes into play. In your Django model definitions, you can specify a <code>SlugField</code> to hold these slugs directly. Django takes care of generating the slug based on other fields in the model whenever an instance is created or updated. Plus, SlugField can enforce uniqueness constraints, ensuring that each slug is distinct within its scope.</p> Python<pre><code>from django.db import models\n\nclass MyModel(models.Model):\n    title = models.CharField(max_length=100)\n    slug = models.SlugField(unique=True)\n\n    def save(self, *args, **kwargs):\n        if not self.slug:\n            self.slug = slugify(self.title)\n        super().save(*args, **kwargs)\n</code></pre>"},{"location":"blog/2024/05/12/understanding-slugify-and-slugfield-in-django/#combining-slugify-and-slugfield","title":"Combining <code>Slugify</code> and <code>SlugField</code>","text":"<p>In practice, slugify and SlugField often work hand in hand. You use slugify to generate initial slug values from user input or dynamic data, and then store these slugs persistently using SlugField in your database models. This combination ensures that your URLs are both dynamic and clean, adapting to changing content while remaining SEO-friendly and user-readable.</p> <p>Here's a brief comparison:</p> ComparisonTheory <ul> <li> <p>Use of slugify:</p> <p>You use slugify when you need to generate a slug from a string outside of model instances, such as when processing user input or generating slugs for various purposes.</p> </li> <li> <p>Use of SlugField:</p> <p>You use SlugField when you want to store slugs directly in your database models. This is useful when you need to persistently store slugs associated with specific database records, such as articles, products, or user profiles. SlugField can automatically generate slugs based on other fields in the model and enforce uniqueness constraints.</p> </li> </ul> <ul> <li> <p>slugify:</p> <p>slugify is a utility function provided by Django to generate URL-friendly versions of strings. It is typically used to create slugs from user-generated content or dynamic data. slugify takes a string as input and converts it into a format suitable for use in URLs by removing special characters, spaces, and converting the text to lowercase.</p> </li> <li> <p>model.SlugField:</p> <p>SlugField is a field type provided by Django's ORM (Object-Relational Mapping) system for models. It is specifically designed to store URL-friendly strings, typically used as part of URLs to identify resources. When defining a model, you can use SlugField to specify that a particular field should hold a slug value. Django will then automatically generate a slug based on the input string whenever an instance of the model is created or updated.</p> </li> </ul>"},{"location":"blog/2024/05/12/understanding-slugify-and-slugfield-in-django/#conclusion","title":"Conclusion","text":"<p>In summary, you use <code>slugify</code> for generating slugs from strings, often for dynamic or user-generated content, while you use <code>SlugField</code> when you need to store slugs as part of your database models. They often complement each other, with slugify used to generate the initial slug value and SlugField used to store it persistently.</p> <p>In conclusion, understanding <code>slugify</code> and <code>SlugField</code> is essential for crafting elegant and effective URLs in your Django applications. Whether you're processing user input, managing dynamic content, or designing database models, these tools empower you to create URLs that enhance both usability and search engine optimization. So, embrace them in your Django projects and pave the way for smooth navigation and better discoverability!</p>"},{"location":"blog/2024/01/06/drf-yasg-swagger/","title":"drf-yasg: Swagger","text":"","tags":["Python","Drf"]},{"location":"blog/2024/01/06/drf-yasg-swagger/#drf-yasg-swagger","title":"drf-yasg: Swagger","text":"<p><code>drf-yasg</code> (Yet Another Swagger Generator) is a popular Django package that generates Swagger/OpenAPI documentation for your Django REST framework APIs. It allows you to have a clean, interactive, and dynamic API documentation that makes it easy for developers to understand and test your API.</p> <ol> <li> <p>Install drf-yasg:</p> <pre><code># Install the package using pip:\n\n$ pip install drf-yasg\n</code></pre> </li> <li> <p>Add <code>drf_yasg</code> to INSTALLED_APPS:</p> <pre><code># Open your settings.py file and add drf_yasg to the INSTALLED_APPS:\n\nINSTALLED_APPS = [\n    # ...\n    'drf_yasg',\n    # ...\n]\n</code></pre> </li> <li> <p>Configure <code>drf-yasg</code> in your project's <code>urls.py</code>:</p> <pre><code># Add the following to your project's urls.py:\n\nfrom django.urls import path, re_path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom rest_framework import permissions\nfrom drf_yasg.views import get_schema_view\nfrom drf_yasg import openapi\n\nschema_view = get_schema_view(\n    openapi.Info(\n        title=\"Your API Title\",\n        default_version='v1',\n        description=\"Your API description\",\n        terms_of_service=\"https://www.yourapp.com/terms/\",\n        contact=openapi.Contact(email=\"contact@yourapp.com\"),\n        license=openapi.License(name=\"Your License\"),\n    ),\n    public=True,\n    permission_classes=(permissions.AllowAny,),\n)\n\nurlpatterns = [\n    # ... your other URL patterns\n    re_path(r'^swagger(?P&lt;format&gt;\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),\n    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n</code></pre> <p>Replace \"Your API Title\" and other information in the openapi.Info section with your actual API details.</p> </li> <li> <p>Run your Django development server:</p> <pre><code># Start your Django development server:\n\n$ python manage.py runserver\n</code></pre> <p>Now you can access the Swagger documentation by navigating to http://127.0.0.1:8000/swagger/ or http://127.0.0.1:8000/redoc/ in your web browser.</p> <ul> <li>The Swagger UI is available at the /swagger/ endpoint.</li> <li>The ReDoc UI is available at the /redoc/ endpoint.</li> </ul> </li> <li> <p>Explore and Test Your API:</p> <p>Once in the Swagger or ReDoc UI, you can explore your <code>API's endpoints</code>, view the available methods, and even test your API directly from the interface.</p> <p>That's it! You've now integrated <code>drf-yasg</code> into your Django project, providing interactive API documentation for your RESTful API.</p> </li> </ol> <p>Notes</p> <p>Keep in mind Django Rest Swagger is now considered deprecated in favor of its successor, <code>drf-yasg</code>. You might want to consider using <code>drf-yasg</code> for newer projects. To use <code>drf-yasg</code>, follow my instructions above.</p>","tags":["Python","Drf"]},{"location":"blog/2024/01/06/drf-yasg-swagger/#reference","title":"Reference","text":"<ul> <li>drf-yasg: github</li> </ul>","tags":["Python","Drf"]},{"location":"blog/2024/05/16/get-related-blogs-using-django-taggit/","title":"Get related blogs using django-taggit","text":"","tags":["Python","Django"]},{"location":"blog/2024/05/16/get-related-blogs-using-django-taggit/#get-related-blogs-using-django-taggit","title":"Get related blogs using <code>django-taggit</code>","text":"<p>To display the title of the other suggested blogs as clickable links in your NewsDetailsView, you can modify the template to include links to the suggested blog items. Here's how you can do it:</p> <p>Sure, here's a simple example of how you can implement tags in Django using the django-taggit library:</p> <p>First, install django-taggit:</p> bash<pre><code>pip install django-taggit\n</code></pre> <ol> <li> <p>Update the <code>NewsDetailsView</code> to pass the related blogs to the template:</p> <p>views.py</p> Python<pre><code>class NewsDetailsView(DetailView):\n    model = NewsItem\n    template_name = \"news/item.html\"\n    context_object_name = \"news_detail\"\n    slug_field = \"slug\"\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['related_blogs'] = self.object.get_related_blogs()\n        return context\n</code></pre> </li> <li> <p>Modify the <code>NewsItem</code> model to include the method for getting related blogs:</p> <p>models.py</p> Python<pre><code>class NewsItem(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    tags = TaggableManager()\n    # Other fields as needed\n\n    def __str__(self):\n        return self.title\n\n    def get_absolute_url(self):\n        return reverse('news_detail', kwargs={'slug': self.slug})\n\n    def get_related_blogs(self):\n        return NewsItem.objects.filter(tags__in=self.tags.all()).exclude(id=self.id).distinct()[:5]\n</code></pre> </li> <li> <p>Update your <code>news/item.html</code> template to display the suggested blogs with clickable links:</p> <p>item.html</p> Python<pre><code>&lt;h2&gt;{{ news_detail.title }}&lt;/h2&gt;\n&lt;p&gt;{{ news_detail.content }}&lt;/p&gt;\n{% if related_blogs %}\n    &lt;h3&gt;Related Blogs:&lt;/h3&gt;\n    &lt;ul&gt;\n        {% for blog in related_blogs %}\n            &lt;li&gt;&lt;a href=\"{{ blog.get_absolute_url }}\"&gt;{{ blog.title }}&lt;/a&gt;&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n{% endif %}\n</code></pre> <p>In this template, <code>{{ blog.get_absolute_url }}</code> is assumed to be a method on your NewsItem model that returns the URL to view the detail of the blog item. Make sure to replace it with the appropriate method if you have a different way of generating the URL for your blog items.</p> </li> </ol>","tags":["Python","Django"]},{"location":"blog/2024/05/16/get-related-blogs-using-django-taggit/#get_absolute_url-method","title":"get_absolute_url method","text":"<p>The <code>get_absolute_url</code> method is not predefined in Django models; you need to define it yourself. It's a method that returns the canonical URL for an object. This is useful for providing a consistent way to get the URL of an object, especially in templates or when redirecting to object detail pages.</p> <p>Here's how you can define <code>get_absolute_url</code> in your <code>NewsItem</code> model:</p> models.py<pre><code>from django.db import models\nfrom django.urls import reverse\nfrom taggit.managers import TaggableManager\n\nclass NewsItem(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    tags = TaggableManager()\n    # Other fields as needed\n\n    def __str__(self):\n        return self.title\n\n    def get_absolute_url(self):\n        return reverse('news_detail', kwargs={'slug': self.slug})\n</code></pre> <p>In this example:</p> <ul> <li>We import the reverse function from <code>django.urls</code>.</li> <li>Inside the <code>NewsItem model</code>, we define a method called <code>get_absolute_url</code>.</li> <li>This method uses the <code>reverse</code> function to build the URL for the <code>news_detail view</code>, passing the slug of the <code>NewsItem</code> as a keyword argument.</li> <li>Make sure you replace <code>news_detail</code> with the actual name of your detail view, and slug with the appropriate field name used for slugs in your model.</li> <li>This method will return the URL for the detail view of the <code>NewsItem</code>, which can be used in templates or views.</li> </ul>","tags":["Python","Django"]},{"location":"blog/2024/05/16/get-related-blogs-using-django-taggit/#theory","title":"Theory","text":"","tags":["Python","Django"]},{"location":"blog/2024/05/16/get-related-blogs-using-django-taggit/#what-is-get_absolute_url","title":"What is get_absolute_url?","text":"<p>get_absolute_url is a method that you define on your Django models. It returns the canonical URL for an instance of the model. This method is incredibly useful for generating URLs to detail views or other specific views associated with the model instance.</p>","tags":["Python","Django"]},{"location":"blog/2024/05/16/get-related-blogs-using-django-taggit/#why-use-get_absolute_url","title":"Why use get_absolute_url?","text":"<p>Implementing <code>get_absolute_url</code> in your models offers several benefits:</p> <ol> <li> <p>Consistency:</p> <p>By providing a standardized way to retrieve the URL for an object, you ensure consistency across your application. This can simplify template rendering and make your codebase more maintainable.</p> </li> <li> <p>Flexibility:</p> <p>You can easily change the URL structure of your application without having to update every template or view that references model instances. Simply update the <code>get_absolute_url</code> method, and all references will automatically reflect the changes.</p> </li> <li> <p>Readability:</p> <p>Using <code>get_absolute_url</code> in templates and views makes your code more readable and self-explanatory. Developers and designers can quickly understand how to link to specific pages without needing to dig into URL configurations.</p> </li> </ol>","tags":["Python","Django"]},{"location":"blog/2024/05/16/get-related-blogs-using-django-taggit/#how-to-implement-get_absolute_url","title":"How to implement get_absolute_url?","text":"<p>Implementing <code>get_absolute_url</code> is straightforward. Here's a step-by-step guide:</p> <ol> <li> <p>Define the method:</p> <p>Inside your model class, define a method named <code>get_absolute_url</code>. This method should return the URL for the detail view of the model instance.</p> </li> <li> <p>Use the reverse function:</p> <p>Within the <code>get_absolute_url</code> method, use Django's reverse function to generate the URL for the desired view. Pass any necessary parameters, such as the primary key or slug, to identify the specific instance.</p> </li> <li> <p>Update templates and views:</p> <p>In your templates or views, use the <code>get_absolute_url</code> method to generate links to model instances. This ensures that links remain up-to-date even if the URL structure changes.</p> </li> </ol>","tags":["Python","Django"]},{"location":"blog/2024/05/16/get-related-blogs-using-django-taggit/#example-newsitem-model-with-get_absolute_url","title":"Example: <code>NewsItem</code> model with <code>get_absolute_url</code>","text":"<p>Let's consider a <code>NewsItem</code> model in a hypothetical news website application. We want each news item to have a detail view accessible via a unique slug-based URL.</p> <pre><code>from django.db import models\nfrom django.urls import reverse\n\nclass NewsItem(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    slug = models.SlugField(unique=True)\n\n    def __str__(self):\n        return self.title\n\n    def get_absolute_url(self):\n        return reverse('news_detail', kwargs={'slug': self.slug})\n</code></pre> <p>In this example, we define a <code>get_absolute_url</code> method that returns the URL for the <code>news_detail</code> view, using the slug field as the identifier. This method ensures that we can easily generate links to individual news items in our templates or views.</p>","tags":["Python","Django"]},{"location":"blog/2024/05/16/get-related-blogs-using-django-taggit/#conclusion","title":"Conclusion","text":"<p>Implementing <code>get_absolute_url</code> in your Django models is a simple yet powerful way to enhance the usability and maintainability of your application. By providing a consistent and flexible way to generate URLs for model instances, you can streamline development and improve the overall user experience of your application.</p>","tags":["Python","Django"]},{"location":"blog/2024/05/16/get-related-blogs-using-django-taggit/#reference","title":"Reference","text":"<ul> <li>django-taggit</li> </ul>","tags":["Python","Django"]},{"location":"blog/2024/05/06/django-with-ajax/","title":"Django with ajax","text":"","tags":["Django"]},{"location":"blog/2024/05/06/django-with-ajax/#django-with-ajax","title":"Django with ajax","text":"<p>In the ever-evolving landscape of web development, enhancing user experience is paramount. One powerful tool for achieving this is AJAX (<code>Asynchronous JavaScript and XML</code>), which allows for seamless, asynchronous communication between the client and server. When integrated with Django, a high-level Python web framework, AJAX can elevate your web applications to new heights of interactivity and responsiveness.</p> <p>We need AJAX for dynamic, seamless, and responsive web experiences by enabling asynchronous communication between the client and server, reducing page reloads, enhancing user interaction, and improving performance.</p> <p>Success</p> bodyscriptviews.pyurls.pymisc <pre><code>&lt;div class=\"col-md-4\"&gt;\n    &lt;div class=\"accordion\" id=\"accordionExample3\"&gt;\n      &lt;div class=\"accordion-item\"&gt;\n          &lt;h2 class=\"accordion-header\"&gt;\n              &lt;button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"true\" aria-controls=\"collapseOne\"&gt;\n                IT Services\n              &lt;/button&gt;\n          &lt;/h2&gt;\n          {% for item in header_business %}\n            {% if item.category == '3' %}\n            &lt;div id=\"collapseThree\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample3\"&gt;\n                &lt;div class=\"accordion-body\"&gt;\n                  &lt;a href=\"#\" class=\"business-item-link\" data-slug=\"{{ item.slug }}\"&gt;{{ item.title }}&lt;/a&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            {% endif %}\n          {% endfor %}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"col-md-8\"&gt;\n    {% if not request.is_ajax %}\n        &lt;h5 class=\"bt__bussiness--title bt-sec-title\"&gt;{{ business_item.title }}&lt;/h5&gt;\n        &lt;div class=\"business-item-content\"&gt;{{ business_item.content | safe }}&lt;/div&gt;\n    {% else %}\n      &lt;h5 class=\"bt__bussiness--title bt-sec-title\"&gt;&lt;/h5&gt;\n      &lt;div class=\"business-item-content\"&gt; &lt;/div&gt;\n    {% endif %}\n  &lt;/div&gt;\n</code></pre> script<pre><code>&lt;script&gt;\n$(document).ready(function(){\n    // Get CSRF token from cookie\n    function getCookie(name) {\n        var cookieValue = null;\n        if (document.cookie &amp;&amp; document.cookie !== '') {\n            var cookies = document.cookie.split(';');\n            for (var i = 0; i &lt; cookies.length; i++) {\n                var cookie = cookies[i].trim();\n                // Does this cookie string begin with the name we want?\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                    break;\n                }\n            }\n        }\n        return cookieValue;\n    }\n    var csrftoken = getCookie('csrftoken');\n\n    // Handle click event for anchor tag with class 'business-item-link'\n    $('.business-item-link').click(function(event) {\n        // Prevent default behavior of anchor tag\n        event.preventDefault();\n\n        // Get the slug value from data attribute\n        var slug = $(this).data('slug');\n\n        // AJAX GET request to fetch data\n        $.ajax({\n            url: '/business/' + slug + '/ajax/',\n            type: 'GET',\n            beforeSend: function(xhr, settings) {\n                // Include CSRF token in headers\n                xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n            },\n            success: function(response){\n                console.log('Response data:', response.title);\n\n                // Ensure that response contains the title property\n                if (response.hasOwnProperty('title')) {\n                    // Update HTML content with received data\n                    $('.bt__bussiness--title').text(response.title);\n                }\n\n                // Ensure that response contains the content property\n                if (response.hasOwnProperty('content')) {\n                    $('.business-item-content').html(response.content);\n                }\n            },\n            error: function(xhr, errmsg, err){\n                console.error('Error fetching data:', errmsg);\n            }\n        });\n    });\n});\n&lt;/script&gt;\n</code></pre> <pre><code>from django.http import JsonResponse\n\n...\n\nclass BusinessItemView(HeaderFooterMixin, TemplateView):\n    template_name = 'business/business-item.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        slug = kwargs['slug']\n        business_item = get_object_or_404(BusinessItem, slug=slug)\n        context['business_item'] = business_item\n\n        business_inner = BusinessInner.objects.first()\n        context['business_inner'] = business_inner\n\n        return context\n\n    def get_ajax_data(self, request, *args, **kwargs):\n        slug = kwargs['slug']\n        business_item = get_object_or_404(BusinessItem, slug=slug)\n\n        print(\"REQUEST xxxx\")\n\n        # Construct data to send in JSON response\n        print(\"business_item: \", business_item)\n\n        data = {\n            'title': business_item.title,\n            'content': business_item.content,\n            # Add more data as needed\n        }\n        return JsonResponse(data)\n\n    def dispatch(self, request, *args, **kwargs):\n        # Check if it's an AJAX request\n        # if request.is_ajax(): is depreciated\n        if request.META.get('HTTP_X_REQUESTED_WITH') == 'XMLHttpRequest':\n            # If yes, call the get_ajax_data method\n            return self.get_ajax_data(request, *args, **kwargs)\n        else:\n            # If not, call the parent dispatch method to handle the regular view\n            return super().dispatch(request, *args, **kwargs)\n</code></pre> <pre><code>urlpatterns = [\n    path('', BusinessPageView.as_view(), name='inner'),\n    path('&lt;slug&gt;/', BusinessItemView.as_view(), name='item'),\n    path('&lt;slug&gt;/ajax/', BusinessItemView.as_view(), name='item_ajax'), \n]\n</code></pre> base.html<pre><code>&lt;head&gt;\n    &lt;script src=\"{% static 'js/jquery-3.7.1.min.js' %}\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\nuse script before body\n</code></pre>","tags":["Django"]},{"location":"blog/2024/05/06/django-with-ajax/#reference","title":"Reference","text":"","tags":["Django"]},{"location":"blog/2024/06/13/django-with-tailwind/","title":"Django with Tailwind","text":"","tags":["Django","tailwindcss"]},{"location":"blog/2024/06/13/django-with-tailwind/#django-with-tailwind","title":"Django with Tailwind","text":"<p>Develop with Tailwind CSS in Django flavour.</p> <p>Quick Start</p> <ol> <li> <p>Install django-tailwindcss from pip</p> <pre><code>pip install django-tailwindcss\n</code></pre> </li> </ol>","tags":["Django","tailwindcss"]},{"location":"blog/2024/06/13/django-with-tailwind/#reference","title":"Reference","text":"<ul> <li>django-tailwindcss: pypi</li> <li>django-tailwindcss: github</li> </ul>","tags":["Django","tailwindcss"]},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/","title":"Blog CRUD Application Using DRF \u2014 Viewsets","text":"","tags":["Python","Drf"]},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/#blog-crud-application-using-drf-viewsets","title":"Blog CRUD Application Using DRF \u2014 Viewsets","text":"<p>Django Rest Framework is a powerful tool that allows you to easily build RESTful APIs using Django. By defining your models, serializers, views, and URLs, you can quickly create a blog post application that allows users to create, read, update, and delete blog posts via a web API.</p> <pre><code># Installing Django and Django REST framework at once\n\n$ pip install django djangorestframework\n</code></pre> <p>In Django Rest Framework, a ViewSet is a class-based view that provides a set of common actions (i.e., CRUD operations) for a specific model or queryset.</p> <p>ViewSets allow you to define your API endpoints in a more concise and structured way, as they provide a set of default methods that handle common HTTP operations, such as GET, POST, PUT, PATCH, and DELETE.</p> <p>There are two main types of ViewSets in Django Rest Framework: ModelViewSet and ReadOnlyModelViewSet.</p> <p>The ModelViewSet is the most commonly used ViewSet, as it provides all the actions that are required to implement a full CRUD API. It includes methods such as list, create, retrieve, update, and destroy, which correspond to the HTTP GET, POST, GET (single object), PUT/PATCH, and DELETE methods, respectively.</p> <p>You can also override these default methods to add custom behavior, such as filtering or authentication.</p> <p>Today, We are going to check ModelViewSets</p>","tags":["Python","Drf"]},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/#create-a-django-project","title":"Create a django-project","text":"<p>I have create a project named \"api\".</p> <pre><code>$ django-admin startproject api\n</code></pre> <p>Now, let create a new app called \"books\".</p> <pre><code>$ cd api\n\n$ py manage.py startapp books\n</code></pre>","tags":["Python","Drf"]},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/#books-app","title":"books <code>app</code>","text":"<pre><code># models.py\n\nfrom django.db import models\n\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.CharField(max_length=150)\n\n    class Meta:\n        db_table = \"Book\"\n\n    def __str__(self):\n        return self.title\n</code></pre> <pre><code># serializers.py\n\nfrom rest_framework import serializers\nfrom .models import Book\n\nclass BookSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Book\n        fields = '__all__'\n</code></pre> <pre><code># views.py\n\nfrom rest_framework import viewsets\nfrom .models import Book\nfrom .serializers import BookSerializer\n\nclass BookViewSet(viewsets.ModelViewSet):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n</code></pre> <pre><code># urls.py\n\nfrom rest_framework.routers import DefaultRouter\nfrom django.urls import include, path\nfrom .views import BookViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'book_post', BookViewSet)\n\nurlpatterns = [\n    path('', include(router.urls))\n]\n</code></pre>","tags":["Python","Drf"]},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/#api-project","title":"api <code>project</code>","text":"<pre><code># urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/token/', TokenObtainPairView.as_view(), name=\"token_obtain_pair\"),\n    path('api/token/refresh', TokenRefreshView.as_view(), name=\"token_refresh\"),\n    # apps\n    path('api/blog/', include('apps.blogs.urls')),\n    path('api/member/', include('apps.privateapi.urls')),\n    path('api/books/', include('apps.books.urls')),\n]\n</code></pre>","tags":["Python","Drf"]},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/#reference","title":"Reference","text":"<ul> <li>Django REST Framework Views - ViewSets</li> <li>Blog CRUD Application Using DRF \u2014 Viewsets</li> </ul>","tags":["Python","Drf"]},{"location":"blog/2024/04/23/enhancing-django-development-with-model-help_text/","title":"Enhancing Django Development with Model help_text","text":"","tags":["Python","Django"]},{"location":"blog/2024/04/23/enhancing-django-development-with-model-help_text/#enhancing-django-development-with-model-help_text","title":"Enhancing Django Development with Model <code>help_text</code>","text":"<p>In the bustling world of web development, Django stands out as a beacon of efficiency and clarity. Its robust features streamline the creation of dynamic web applications, but one often underestimated gem is the <code>help_text</code> attribute of Django models. Let's uncover its power and potential impact with a closer look.</p>","tags":["Python","Django"]},{"location":"blog/2024/04/23/enhancing-django-development-with-model-help_text/#understanding-help_text","title":"Understanding help_text","text":"<p>At its core, <code>help_text</code> is a simple yet incredibly valuable attribute that developers can add to Django model fields. It serves as a descriptive text, offering guidance and clarity on the purpose and expected input of each field.</p>","tags":["Python","Django"]},{"location":"blog/2024/04/23/enhancing-django-development-with-model-help_text/#clarity-and-documentation-made-easy","title":"Clarity and Documentation Made Easy","text":"<p>Consider a scenario where you're collaborating on a Django project with fellow developers. You dive into the <code>models.py</code> file, greeted by a myriad of fields across various models. Without proper documentation, understanding the intent of each field can feel like navigating a labyrinth. Here's where help_text shines. By adding succinct descriptions to fields, you provide instant clarity to your team, reducing confusion and streamlining the development process.</p> <p>Tip</p> Python<pre><code>from django.db import models\n\nclass Product(models.Model):\n    name = models.CharField(max_length=100, help_text=\"Enter the name of the product\")\n    price = models.DecimalField(max_digits=8, decimal_places=2, help_text=\"Specify the price of the product\")\n    description = models.TextField(help_text=\"Provide a brief description of the product\")\n</code></pre>","tags":["Python","Django"]},{"location":"blog/2024/04/23/enhancing-django-development-with-model-help_text/#elevating-user-experience","title":"Elevating User Experience","text":"<p>Beyond aiding developers, help_text contributes to a smoother user experience. Picture a user faced with a form to fill out. Clear, concise guidance accompanying each field can make the difference between frustration and satisfaction. With help_text, you empower users to navigate your application effortlessly, enhancing usability and satisfaction. Best Practices and Examples</p> <p>To leverage <code>help_text</code> effectively, adhere to these best practices:</p> <ul> <li>Be Concise: Keep descriptions brief yet informative.</li> <li>Use Clear Language: Ensure your <code>help_text</code> is easily understandable by both developers and users.</li> <li>Provide Examples: When needed, include examples to clarify the expected input.</li> </ul>","tags":["Python","Django"]},{"location":"blog/2024/04/23/enhancing-django-development-with-model-help_text/#conclusion-a-small-feature-with-big-impact","title":"Conclusion: A Small Feature with Big Impact","text":"<p>In the grand tapestry of Django development, <code>help_text</code> might seem like a minor detail. Yet, its impact on code clarity, collaboration, and user experience is undeniable. By embracing <code>help_text</code>, you elevate your Django projects to new heights of clarity and usability.</p> <p>So, the next time you define a model in Django, remember the power of <code>help_text</code> \u2014 a small addition that makes a world of difference.</p>","tags":["Python","Django"]},{"location":"blog/2024/04/17/managing-settings-for-multiple-environments-in-django/","title":"Managing settings for multiple environments in django","text":"","tags":["Programming","Django"]},{"location":"blog/2024/04/17/managing-settings-for-multiple-environments-in-django/#managing-settings-for-multiple-environments-in-django","title":"Managing settings for multiple environments in django","text":"<p>In real-world projects, you will have to deal with multiple environments. we have at least a local environment for development and a production environment for serving your application. </p> <p>we will use a base file that defines common settings, and a settings file per environment that overrides any necessary settings and defines additional ones.</p> <p>Create a <code>settings/</code> directory next to the <code>settings.py</code> file of the your project. Rename the <code>settings.py</code> file to <code>base.py</code> and move it into the new <code>settings/</code> directory.</p> <p>Create the following additional files inside the <code>settings/</code> folder so that the new directory looks as follows:</p> <pre><code>settings/\n    __init__.py\n    base.py\n    local.py\n    prod.py\n</code></pre> <p>These files are as follows:</p> <ul> <li><code>base.py</code>: The base settings file that contains common settings (previously <code>settings.py</code>)</li> <li><code>local.py</code>: Custom settings for your local environment</li> <li><code>prod.py</code>: Custom settings for the production environment</li> </ul> <p>You have moved the settings files to a directory one level below, so you need to update the BASE_DIR setting in the <code>settings/base.py</code> file to point to the main project directory.</p> <p>When handling multiple environments, create a base settings file and a settings file for each environment. Environment settings files should inherit the common settings and override environment-specific settings.</p> <p>Edit the <code>settings/base.py</code> file and replace the following line:</p> <pre><code>BASE_DIR = Path(__file__).resolve().parent.parent\n</code></pre> <p>with the following one:</p> <p>settings/base.py</p> <pre><code>BASE_DIR = Path(__file__).resolve().parent.parent.parent\n</code></pre> <p>You point to one directory above by adding .parent to the BASE_DIR path. Let\u2019s configure the settings for the local environment.</p>","tags":["Programming","Django"]},{"location":"blog/2024/04/17/managing-settings-for-multiple-environments-in-django/#local-environment-settings","title":"Local environment settings","text":"<p>Instead of using a default configuration for the DEBUG and DATABASES settings, you will define them for each environment explicitly. These settings will be environment specific. Edit the <code>settings/local.py</code> file and add the following lines:</p> local.py<pre><code>from .base import *\n\nDEBUG = True\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n</code></pre> <p>This is the settings file for your local environment. In this file, you import all settings defined in the <code>base.py</code> file, and you define the DEBUG and DATABASES settings for this environment. The DEBUG and DATABASES settings remain the same as you have been using for development.</p> <p>Now remove the DATABASES and DEBUG settings from the <code>base.py</code> settings file.</p> <p>Django management commands won\u2019t automatically detect the settings file to use because the project settings file is not the default <code>settings.py</code> file. When running management commands, you need to indicate the settings module to use by adding a <code>--settings</code> option, as follows:</p> <p>Python</p> <pre><code>python manage.py runserver --settings=educa.settings.local\n</code></pre> <p>Next, we are going to validate the project and the local environment configuration.</p>","tags":["Programming","Django"]},{"location":"blog/2024/04/17/managing-settings-for-multiple-environments-in-django/#defining-environment-variable","title":"Defining environment variable","text":"<p>If don\u2019t want to pass the <code>--settings</code> option every time you run a management command, you can define the DJANGO_SETTINGS_MODULE environment variable. Django will use it to identify the settings module to use. </p> <p>If you are using Linux or macOS, you can define the environment variable by executing the following command in the shell:</p> <p>Linux</p> <pre><code>export DJANGO_SETTINGS_MODULE=educa.settings.local\n</code></pre> <p>To remove an environment variable in Linux, including one set with the syntax <code>export VARIABLE=\"value\"</code>, you can unset it using the unset command. </p> <p>Linux</p> <pre><code>unset VARIABLE\n</code></pre> <p>If you are using Windows, you can execute the following command in the shell:</p> <p>Windows</p> <pre><code>set DJANGO_SETTINGS_MODULE=educa.settings.local\n</code></pre> <p>Any management command you execute after will use the settings defined in the DJANGO_SETTINGS_MODULE environment variable.</p>","tags":["Programming","Django"]},{"location":"blog/2024/04/17/managing-settings-for-multiple-environments-in-django/#production-environment-settings","title":"Production environment settings","text":"<p>Let\u2019s start by adding initial settings for the production environment. Edit the <code>settings/prod.py</code> file and make it look as follows:</p> prod.py<pre><code>from .base import *\n\nDEBUG = False\n\nADMINS = [\n    ('Antonio M', 'email@mydomain.com'),\n]\n\nALLOWED_HOSTS = ['*']\n\nDATABASES = {\n    'default': {\n    }\n}\n</code></pre> <p>These are the settings for the production environment:</p> <ul> <li><code>DEBUG</code>: Setting DEBUG to False is necessary for any production environment. Failing to do so will result in the traceback information and sensitive configuration data being exposed to everyone.</li> <li><code>ADMINS</code>: When DEBUG is False and a view raises an exception, all information will be sent by email to the people listed in the ADMINS setting. Make sure that you replace the name/email tuple with your own information.</li> <li><code>ALLOWED_HOSTS</code>: For security reasons, Django will only allow the hosts included in this list to serve the project. For now, you allow all hosts by using the asterisk symbol, <code>*</code>. You will limit the hosts that can be used for serving the project later.</li> <li><code>DATABASES</code>: You keep default database settings empty because you will configure the production database later.</li> </ul>","tags":["Programming","Django"]},{"location":"blog/2024/04/17/managing-settings-for-multiple-environments-in-django/#reference","title":"Reference","text":"<ul> <li>Configuring Django Settings: Best Practices </li> <li>Configuring Django Settings: Best Practices: 2 </li> <li>Django 4 By Example Fourth Edition: pg-672</li> </ul>","tags":["Programming","Django"]},{"location":"blog/2024/04/24/how-to-handle-nullable--non-nullable-fields-in-django/","title":"How to handle nullable & non-nullable fields in django","text":"","tags":["Django"]},{"location":"blog/2024/04/24/how-to-handle-nullable--non-nullable-fields-in-django/#how-to-handle-nullable-non-nullable-fields-in-django","title":"How to handle nullable &amp; non-nullable fields in django","text":"<p>When designing databases in Django models, one common scenario is dealing with nullable fields. These fields allow for flexibility in data entry, as they can be left empty when necessary. However, managing nullable fields effectively is crucial to ensure consistency and usability within your application.</p>","tags":["Django"]},{"location":"blog/2024/04/24/how-to-handle-nullable--non-nullable-fields-in-django/#1-handling-nullable-fields-in-django-models","title":"1. Handling Nullable Fields in Django Models","text":"<p>Consider the scenario where we have a Django model called <code>YourModel</code>, which includes a <code>title</code> field that is allowed to be nullable. Here's how we can handle this situation:</p> Python<pre><code>from django.db import models\n\nclass YourModel(models.Model):\n    title = models.CharField(max_length=100, null=True)\n\n    def __str__(self):\n        return self.title if self.title is not None else \"Untitled\"\n</code></pre> <p>In this model, <code>title</code> is defined as a <code>CharField</code> with <code>max_length=100</code> and <code>null=True</code>, indicating that it can be left empty (<code>None</code>). Within the <code>__str__</code> method, we check if the title is <code>None</code>. If it is, we return a default string \"Untitled\" to represent the absence of a title.</p> <p>Handling nullable fields in this way ensures that our Django models maintain consistency in their string representations, even when certain fields are left blank. This approach enhances the user experience by providing meaningful defaults and maintaining clarity in the absence of data.</p> <p>In conclusion, when working with nullable fields in Django models, it's essential to consider how they are represented in string form, especially when displaying data to users. By implementing a concise and effective approach, such as the one demonstrated above, you can ensure your application remains robust and user-friendly.</p>","tags":["Django"]},{"location":"blog/2024/04/24/how-to-handle-nullable--non-nullable-fields-in-django/#2-handling-non-nullable-fields-in-django-models","title":"2. Handling Non-Nullable Fields in Django Models","text":"<ol> <li> <p>Provide a Default Value:</p> <p>One option is to specify a default value for the new field. This ensures that existing rows get populated with some initial value. For instance, setting the default value of 'image' to a default image path could be a viable solution.</p> Python<pre><code>class BusinessInner(models.Model):\nimage = models.ImageField(upload_to='images/', default='default_image.jpg')\n# Other fields...\n</code></pre> </li> <li> <p>Allow Null Values:</p> <p>If making the field nullable is acceptable for your application, you can add the field with <code>null=True</code>. This allows existing rows to have a null value for the field.</p> Python<pre><code>class BusinessInner(models.Model):\n    image = models.ImageField(upload_to='images/', null=True)\n    # Other fields...\n</code></pre> </li> <li> <p>Data Migration:</p> <p>In cases where neither providing a default value nor allowing null values is suitable, a data migration comes to the rescue. This involves writing a Python script that updates the database, ensuring each existing row gets a value for the new field.</p> Python<pre><code>from django.db import migrations\n\ndef populate_image_field(apps, schema_editor):\n    BusinessInner = apps.get_model('your_app_name', 'BusinessInner')\n    for obj in BusinessInner.objects.all():\n        obj.image = 'default_image.jpg'  # Or whatever default value you choose\n        obj.save()\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('your_app_name', 'previous_migration'),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='businessinner',\n            name='image',\n            field=models.ImageField(upload_to='images/'),\n        ),\n        migrations.RunPython(populate_image_field),\n    ]\n</code></pre> </li> </ol>","tags":["Django"]},{"location":"blog/2024/05/01/preventing-unintended-form-resubmission-in-web-applications/","title":"Preventing Unintended Form Resubmission in Web Applications","text":"","tags":["Django"]},{"location":"blog/2024/05/01/preventing-unintended-form-resubmission-in-web-applications/#preventing-unintended-form-resubmission-in-web-applications","title":"Preventing Unintended Form Resubmission in Web Applications","text":"<p>Have you ever encountered the frustrating message \"Contact Form Resubmission\" while using web forms? This message typically appears when you attempt to resubmit form data after a page refresh or navigation action. Not only is it annoying, but it can also lead to unintended consequences such as duplicate transactions or data corruption. In this blog post, we'll explore why this happens and how to prevent it in your web applications.</p>","tags":["Django"]},{"location":"blog/2024/05/01/preventing-unintended-form-resubmission-in-web-applications/#understanding-the-issue","title":"Understanding the Issue","text":"<p>Modern web browsers implement a security feature to prevent unintended duplicate form submissions. This feature detects when users attempt to resubmit form data after actions like refreshing the page or navigating back to it. The \"Contact Form Resubmission\" message is a warning to users that their browser has detected a duplicate form submission.</p>","tags":["Django"]},{"location":"blog/2024/05/01/preventing-unintended-form-resubmission-in-web-applications/#common-causes","title":"Common Causes","text":"<p>Several factors can trigger the \"Contact Form Resubmission\" message:</p> <ul> <li> <p>Manual Refresh:</p> <p>Users manually refreshing the page after submitting the form.</p> </li> <li> <p>Back/Forward Navigation:</p> <p>Users navigating away from the form page and returning to it, then attempting to resubmit the form.</p> </li> <li> <p>Browser Confirmation Dialog:</p> <p>Some browsers prompt users to confirm form resubmission, adding an extra step to the process.</p> </li> </ul>","tags":["Django"]},{"location":"blog/2024/05/01/preventing-unintended-form-resubmission-in-web-applications/#solutions","title":"Solutions","text":"<p>To address this issue and provide a smoother user experience, consider implementing the following solutions in your web applications:</p> <ol> <li> <p>Post/Redirect/Get (PRG) Pattern:</p> <p>After processing the form submission on the server side, redirect users to a different page using an HTTP redirect response. This prevents the browser from resubmitting the form data when users refresh the page or navigate back to it.</p> </li> <li> <p>JavaScript Form Submission:</p> <p>Use JavaScript to submit the form asynchronously, such as via AJAX. By doing so, you can prevent the browser from considering the form submission as a page reload, thus avoiding the resubmission prompt.</p> </li> <li> <p>Browser Confirmation Dialog Handling:</p> <p>Inform users about the consequences of resubmitting the form and allow them to proceed or cancel the action. While this doesn't prevent resubmission, it helps users understand why they're seeing the message and gives them control over the process.</p> </li> </ol> Post/Redirect/Get (PRG) pattern <p>In the Post/Redirect/Get (PRG) pattern, <code>success_url</code> refers to the URL where you want to redirect users after the form submission is successful. This URL can be any valid URL within your Django project.</p> <p>There are two common approaches to defining the success_url:</p> <ol> <li>Hardcoded URL: Specify the URL directly in your view code.</li> <li>URL Name: Define a URL pattern with a name in your urls.py file and use that name as success_url. This approach is more flexible and allows you to change the URL later without modifying your view code.</li> </ol> <p>Here's how you can define success_url using both approaches:</p> <ol> <li> <p>Hardcoded URL:</p> Python<pre><code>class FormSubmissionView(View):\nsuccess_url = '/success/'  # Replace with the actual URL\n\ndef post(self, request):\n  # Process form submission\n  return redirect(self.success_url)\n</code></pre> </li> <li> <p>URL Name:</p> urls.py<pre><code>from django.urls import path\nfrom .views import FormSubmissionView, SuccessView\n\nurlpatterns = [\n  path('success/', SuccessView.as_view(), name='success_url'),\n  # Other URL patterns\n]\n</code></pre> views.py<pre><code>from django.views.generic import TemplateView\nfrom django.urls import reverse_lazy\n\nclass FormSubmissionView(View):\n  success_url = reverse_lazy('success_url')\n\n  def post(self, request):\n    # Process form submission\n    return redirect(self.success_url)\n\n#\nclass SuccessView(TemplateView):\n  template_name = 'success.html'\n</code></pre> <p>In the URL name approach, <code>reverse_lazy</code> is used to retrieve the URL dynamically based on the name defined in urls.py. This allows you to change the URL later without modifying the view code. Ensure that the name 'success_url' matches the name you've defined in your <code>urls.py</code> file.</p> </li> </ol>","tags":["Django"]},{"location":"blog/2024/05/01/preventing-unintended-form-resubmission-in-web-applications/#conclusion","title":"Conclusion","text":"<p>Unintended form resubmission can disrupt the user experience and lead to data integrity issues in web applications. By implementing strategies like the PRG pattern, JavaScript form submission, and effective user communication, you can mitigate this issue and provide a smoother form submission experience for your users. Remember to consider your application's requirements and user experience when choosing the appropriate solution.</p> <p>With these solutions in place, you can ensure that users can submit forms seamlessly without encountering the dreaded \"Contact Form Resubmission\" message.</p>","tags":["Django"]},{"location":"blog/2024/01/18/how-to-set-up-a-virtual-environment-in-python/","title":"How to Set Up a Virtual Environment in Python","text":"","tags":["Python"]},{"location":"blog/2024/01/18/how-to-set-up-a-virtual-environment-in-python/#how-to-set-up-a-virtual-environment-in-python","title":"How to Set Up a Virtual Environment in Python","text":"<p>A Python virtual environment is a self-contained directory that contains its own Python interpreter and a set of libraries and packages. This environment is isolated from the global Python environment on your system, allowing you to manage project-specific dependencies without affecting other projects or the system-wide Python installation.</p> <p>The primary purpose of a virtual environment is to create an isolated environment for a specific Python project, ensuring that the project's dependencies are consistent and do not interfere with other projects or the system.</p> <p><code>venv</code> is a built-in module in Python that provides support for creating lightweight, isolated Python environments.</p> <ul> <li><code>venv</code> is a standard Python module for creating virtual environments.</li> <li><code>pyenv</code> is a separate tool for managing multiple Python versions.</li> <li><code>pyenv-virtualenv</code> is a plugin for pyenv that extends its functionality to include virtual environment management.</li> </ul> <p>The most commonly used tools for creating virtual environments in Python are <code>venv</code> (built into Python 3.3 and later) and <code>virtualenv</code> (a third-party package). These tools allow you to:</p> venvvirtualenvconda <ul> <li> <p>Description:</p> <p><code>venv</code> is a built-in module in Python 3.3 and later, and it's used for creating lightweight, isolated Python environments. If you're using Python 3.3 or later, <code>venv</code> is a good choice for managing virtual environments.</p> </li> <li> <p>Strengths:</p> <ul> <li>Simplicity and ease of use.</li> <li>Built into the Python standard library.</li> <li>Ideal for basic use cases and projects with straightforward requirements.</li> </ul> </li> <li> <p>Commands:</p> bash<pre><code># Create a virtual environment\npython -m venv venv\n\n# OR:: Replace \"myenv\" with your preferred environment name\n# To Create Specific python version\npython3.8 -m venv myenv\n\n# Activate the virtual environment\n\n# On Windows\n.\\myenv\\Scripts\\activate\n\n# On Unix or MacOS\nsource myenv/bin/activate\n</code></pre> <p>Replace <code>3.8</code> with the desired Python version. The <code>-m venv</code> command uses the <code>venv</code> module to create the virtual environment. This will create a virtual environment with the specified Python version.</p> </li> </ul> <ul> <li> <p>Description</p> <p><code>virtualenv</code> is a third-party Python package that provides tools for creating isolated Python environments. It allows you to create multiple virtual environments on a single system, each with its own Python interpreter and set of installed packages.</p> <p><code>virtualenv</code> is not included in the Python standard library, so you need to install it separately using  <code>pip</code>.</p> </li> <li> <p>Strength</p> <ul> <li>Compatible with both <code>Python 2</code> and <code>Python 3</code>, providing flexibility for projects on different Python versions.</li> <li>Allows customization during virtual environment creation, such as specifying the Python interpreter version and additional options.</li> <li>Offers high-level isolation, allowing for independent Python environments for different projects.</li> </ul> </li> <li> <p>Commands</p> bash<pre><code># Install virtualenv if not already installed\npip install virtualenv\n\n# Replace \"myenv\" with your preferred environment name\nvirtualenv myenv\n\n# OR:: Replace \"myenv\" with your preferred environment name\nvirtualenv --python=python3.8 myenv\n\n# Activate the virtual environment\n\n# On Windows\n.\\myenv\\Scripts\\activate\n\n# On Unix or MacOS\nsource myenv/bin/activate\n</code></pre> <p>Replace <code>3.8</code> with the desired Python version. The <code>--python</code> option allows you to specify the Python interpreter for the virtual environment.</p> </li> </ul> <ul> <li> <p>Description:</p> <p>Conda is a cross-platform package manager and environment manager that can install, run, and update packages and their dependencies. It is not Python-specific and can manage environments for multiple programming languages.</p> </li> <li> <p>Strengths</p> <ul> <li>Cross-language support (not limited to Python).</li> <li>Manages both Python packages and non-Python packages.</li> <li>Handles complex dependencies and environments effectively.</li> </ul> </li> <li> <p>Commands</p> bash<pre><code># Create a conda environment\nconda create --name myenv\n\n# OR::\nconda create --name my_env python=3.8\n\n# Activate the conda environment\nconda activate myenv\n\n# Deactivate the conda environment\nconda deactivate\n</code></pre> <p>Conda can be particularly useful when working on projects with dependencies that extend beyond Python, or when you need to manage environments with specific versions of non-Python libraries.</p> </li> </ul> <p>Notes</p> <p>Choose the approach that fits your preferences and requirements. Keep in mind that <code>venv</code> is included in the Python standard library, while <code>virtualenv</code> is a separate package that needs to be installed. If you're using a specific Python version, it's crucial to ensure that version is installed on your system before creating the virtual environment.</p>","tags":["Python"]},{"location":"blog/2024/01/18/how-to-set-up-a-virtual-environment-in-python/#reference","title":"Reference","text":"<ul> <li> <p>What is the difference between venv, pyvenv, pyenv, virtualenv, virtualenvwrapper, pipenv</p> </li> <li> <p>Understanding Python virtual environments using venv and virtualenv</p> </li> </ul>","tags":["Python"]},{"location":"blog/2024/04/16/unveiling-pythons-hidden-gems-exploring-the-secrets-module/","title":"Unveiling Python's Hidden Gems: Exploring the Secrets Module","text":""},{"location":"blog/2024/04/16/unveiling-pythons-hidden-gems-exploring-the-secrets-module/#unveiling-pythons-hidden-gems-exploring-the-secrets-module","title":"Unveiling Python's Hidden Gems: Exploring the Secrets Module","text":"<p>The secrets module in Python is a powerhouse when it comes to handling sensitive data such as passwords, API keys, and cryptographic tokens. Its primary purpose? Generating cryptographically strong random numbers suitable for managing data in a secure manner.</p> <p>Starting in Django 3.0 the key begins with <code>django-insecure</code> as an additional prompt to tell developers not to use this specific key in production.</p> <p>SECRET_KEY</p> <pre><code>import secrets\nprint(secrets.token_urlsafe())\n\ndir(secrets)\nhelp(secrets)\n</code></pre> <p>Copy and paste this new value into the <code>.env</code> file.</p> .env<pre><code>DEBUG=True\nSECRET_KEY=imDnfLXy-8Y-YozfJmP2Rw_81YA_qx1XKl5FeY0mXyY\n</code></pre>"},{"location":"blog/2024/04/16/unveiling-pythons-hidden-gems-exploring-the-secrets-module/#reference","title":"Reference","text":"<ul> <li>Django for Beginner: SECRET_KEY</li> <li>3rd Party Packages</li> <li>Projects to speed up the development of new projects.</li> <li>Django starter project with \ud83d\udd0b</li> <li>drfx for rest api</li> </ul>"},{"location":"blog/2024/05/15/separating-business-logic-and-presentation-in-django/","title":"Separating Business Logic and Presentation in Django","text":""},{"location":"blog/2024/05/15/separating-business-logic-and-presentation-in-django/#separating-business-logic-and-presentation-in-django","title":"Separating Business Logic and Presentation in Django","text":"<p>In Django web development, maintaining a clear separation of concerns between business logic and presentation logic is essential for building scalable, maintainable, and reusable applications. By adhering to best practices and following established patterns, developers can ensure that their code remains organized, flexible, and easy to maintain.</p>"},{"location":"blog/2024/05/15/separating-business-logic-and-presentation-in-django/#1-using-class-based-views-cbvs","title":"1. Using Class-Based Views (CBVs):","text":"<p>Example</p> <p>Django's class-based views provide a structured approach to handling HTTP requests and responses. By defining views as classes, developers can encapsulate related functionality and separate concerns more effectively. For instance, ListView and DetailView are commonly used to display lists of objects and detailed views respectively, while keeping the presentation logic separate from the business logic.</p> <pre><code>from django.views.generic import ListView\nfrom .models import Product\n\nclass ProductListView(ListView):\n    model = Product\n    template_name = 'products/product_list.html'\n    context_object_name = 'products'\n</code></pre> <p>In this example, the ProductListView class-based view retrieves a list of products from the database using the Product model and renders them in a template called <code>product_list.html</code>.</p>"},{"location":"blog/2024/05/15/separating-business-logic-and-presentation-in-django/#2-thin-views-fat-models","title":"2. Thin Views, Fat Models:","text":"<p>Example</p> <p>Following the \"thin views, fat models\" principle encourages developers to keep views lightweight by moving most of the business logic into model methods. Models represent the application's data and are the ideal place to encapsulate business logic related to data manipulation, validation, and operations. This approach enhances code readability and maintainability by keeping views focused on handling HTTP requests and responses.</p> <pre><code>from django.db import models\n\nclass Product(models.Model):\n    name = models.CharField(max_length=100)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def calculate_discounted_price(self, discount_percent):\n        return self.price * (1 - discount_percent / 100)\n</code></pre> <p>In the Product model, we define a method called <code>calculate_discounted_price()</code> to encapsulate the logic for calculating the discounted price of a product. This keeps the view simple while moving the business logic to the model layer.</p>"},{"location":"blog/2024/05/15/separating-business-logic-and-presentation-in-django/#3-service-layers","title":"3. Service Layers:","text":"<p>Example</p> <p>Introducing service layers allows developers to encapsulate complex business logic that doesn't fit naturally into models or views. Service classes provide a dedicated place to house business logic that operates on multiple models or involves complex operations. This approach promotes code reusability and modularity by separating the concerns of data manipulation and business logic from the presentation layer.</p> services.py<pre><code>class ProductService:\n    @staticmethod\n    def get_discounted_price(product, discount_percent):\n        return product.price * (1 - discount_percent / 100)\n</code></pre> <p>In a service class called <code>ProductService</code>, we define a method <code>get_discounted_price()</code> to encapsulate the logic for calculating the discounted price of a product. This service class can be used in views or other parts of the application to access the business logic.</p>"},{"location":"blog/2024/05/15/separating-business-logic-and-presentation-in-django/#4-template-tags-and-filters","title":"4. Template Tags and Filters:","text":"<p>Example</p> <p>Django's template system supports custom template tags and filters, which enable developers to encapsulate presentation logic in templates. Custom template tags and filters can be used to format data, perform conditional checks, or execute custom logic directly within templates. This approach enhances template readability and maintainability by keeping presentation-related logic separate from business logic.</p> custom_filters.py<pre><code># templatetags/custom_filters.py\n\nfrom django import template\n\nregister = template.Library()\n\n@register.filter\ndef format_price(value):\n    return f\"${value:.2f}\"\n</code></pre> <p>In a custom template filter called <code>format_price</code>, we define a filter to format a numeric value as a currency string with two decimal places. This filter can be used in templates to format prices.</p>"},{"location":"blog/2024/05/15/separating-business-logic-and-presentation-in-django/#5-separate-apps-and-modules","title":"5. Separate Apps and Modules:","text":"<p>Example</p> <p>Organize your Django project into separate apps, each focusing on a specific functional area. For example, you might have separate apps for products, orders, users, etc., each containing models, views, and templates related to that area.</p>"},{"location":"blog/2024/05/15/separating-business-logic-and-presentation-in-django/#6-dry-dont-repeat-yourself","title":"6. DRY (Don't Repeat Yourself):","text":"<p>Example</p> <p>Identify repeated logic across views, models, and templates, and refactor it into reusable components. For example, if you find similar querysets being used in multiple views, consider creating a custom manager or utility function to encapsulate the logic.</p>"},{"location":"blog/2024/05/15/separating-business-logic-and-presentation-in-django/#7-tests","title":"7. Tests:","text":"<p>Example</p> <p>Write comprehensive unit tests for your business logic, ensuring that it behaves as expected and remains consistent across changes. For example, you might write tests to validate the behavior of model methods, view functions, and template tags.</p> <p>By applying these principles and practices in your Django projects, you can achieve a clear separation of concerns between business logic and presentation logic, leading to cleaner, more maintainable code.</p>"},{"location":"blog/2024/01/02/how-to-implement-tokenization-using-jwt-and-django/","title":"How to Implement Tokenization using JWT and Django","text":"","tags":["SimpleJWT"]},{"location":"blog/2024/01/02/how-to-implement-tokenization-using-jwt-and-django/#how-to-implement-tokenization-using-jwt-and-django","title":"How to Implement Tokenization using JWT and Django","text":"<p>A JSON Web Token authentication plugin for the Django REST Framework.</p> <p>Simple JWT provides a JSON Web Token authentication backend for the Django REST Framework. It aims to cover the most common use cases of JWTs by offering a conservative set of default features. It also aims to be easily extensible in case a desired feature is not present.</p> <pre><code>$ pip install djangorestframework-simplejwt\n</code></pre>","tags":["SimpleJWT"]},{"location":"blog/2024/01/02/how-to-implement-tokenization-using-jwt-and-django/#project","title":"project","text":"<pre><code># urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/token/', TokenObtainPairView.as_view(), name=\"token_obtain_pair\"),\n    path('api/token/refresh', TokenRefreshView.as_view(), name=\"token_refresh\"),\n]\n</code></pre> <pre><code># settings.py\n\nINSTALLED_APPS = [\n  'django.contrib.admin',\n  'django.contrib.auth',\n  'django.contrib.contenttypes',\n  'django.contrib.sessions',\n  'django.contrib.messages',\n  'django.contrib.staticfiles',\n\n  # packages\n  'rest_framework',\n  'rest_framework_simplejwt',\n\n  # apps\n  'apps.accounts',\n  'apps.blogs',\n  'apps.privateapi',\n  'apps.books',\n]\n\n# add this\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ],\n}\n\nSIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': False,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'VERIFYING_KEY': None,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'USER_ID_FIELD': 'id',\n    'USER_ID_CLAIM': 'user_id',\n    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),\n    'TOKEN_TYPE_CLAIM': 'token_type',\n    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',\n    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=15),\n    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),\n}\n</code></pre>","tags":["SimpleJWT"]},{"location":"blog/2024/01/02/how-to-implement-tokenization-using-jwt-and-django/#reference","title":"Reference","text":"<ul> <li>simplejwt</li> </ul>","tags":["SimpleJWT"]},{"location":"blog/2024/04/29/exploring-static-and-dynamic-model-choices-in-django/","title":"Exploring Static and Dynamic Model Choices in Django","text":"","tags":["Programming"]},{"location":"blog/2024/04/29/exploring-static-and-dynamic-model-choices-in-django/#exploring-static-and-dynamic-model-choices-in-django","title":"Exploring Static and Dynamic Model Choices in Django","text":"<p>When developing web applications with Django, one often encounters scenarios where models need to interact with predefined choices or dynamically generated options. Django provides two primary methods to handle these situations: static model choices and dynamic choices models.</p>","tags":["Programming"]},{"location":"blog/2024/04/29/exploring-static-and-dynamic-model-choices-in-django/#1-static-model-choices","title":"1. Static Model Choices:","text":"<p>Static model choices involve predefining a set of options that a model field can accept. This is useful when the range of possible values is known in advance and unlikely to change frequently.</p> <p>For instance, consider a Product model that has a field for its category. Instead of allowing arbitrary strings for the category, you can define a set of choices like \"Electronics,\" \"Clothing,\" and \"Books.\"</p> <pre><code>from django.db import models\n\nclass Product(models.Model):\n  CATEGORY_CHOICES = [\n    ('E', 'Electronics'),\n    ('C', 'Clothing'),\n    ('B', 'Books'),\n  ]\n  name = models.CharField(max_length=100)\n  category = models.CharField(max_length=1, choices=CATEGORY_CHOICES)\n</code></pre> <p>This ensures that only the specified categories can be assigned to a product, maintaining consistency and preventing invalid data entry.</p>","tags":["Programming"]},{"location":"blog/2024/04/29/exploring-static-and-dynamic-model-choices-in-django/#2-dynamic-choices-model","title":"2. Dynamic Choices Model:","text":"<p>In contrast, dynamic choices models involve generating options dynamically based on certain conditions or data in the database. This approach is beneficial when the range of choices is extensive, subject to frequent updates, or depends on user-specific data.</p> <p>For example, consider a <code>City</code> model that stores information about cities and their corresponding countries. Instead of manually defining all possible cities and countries, we can dynamically populate the choices based on the data stored in the database.</p> <pre><code>from django.contrib.auth.models import User\nfrom django.db import models\n\nclass Country(models.Model):\n  name = models.CharField(max_length=100)\n\nclass City(models.Model):\n  name = models.CharField(max_length=100)\n  country = models.ForeignKey(Country, on_delete=models.CASCADE)\n\nclass UserProfile(models.Model):\n  user = models.OneToOneField(User, on_delete=models.CASCADE)\n  favorite_city = models.ForeignKey(City, on_delete=models.SET_NULL, null=True)\n</code></pre> <p>In this example, the <code>favorite_city</code> field of the UserProfile model dynamically fetches cities from the City model, allowing users to select their favorite city from a list that is continuously updated as new cities are added to the database.</p>","tags":["Programming"]},{"location":"blog/2024/04/29/exploring-static-and-dynamic-model-choices-in-django/#conclusion","title":"Conclusion:","text":"<p>Understanding when to use static model choices and dynamic choices models in Django is crucial for building robust and flexible applications. Static choices offer predictability and maintainability, while dynamic choices provide scalability and adaptability to changing data environments. By leveraging these two approaches effectively, developers can create Django applications that meet the specific needs of their projects.</p>","tags":["Programming"]},{"location":"blog/2024/04/25/a-peek-into-str-method-in-django/","title":"A peek into str method in django","text":"","tags":["Django"]},{"location":"blog/2024/04/25/a-peek-into-str-method-in-django/#a-peek-into-str-method-in-django","title":"A peek into str method in django","text":"<p>In Django, <code>__str__</code> is a special method used in Python classes to define how an instance of that class should be represented as a string. It's similar to the toString() method in other programming languages.</p> <p>When you define the <code>__str__</code> method within a model class in Django, you're specifying how instances of that model should be displayed when converted to a string. </p> <p>This is particularly useful for human-readable representations of objects, especially when debugging or displaying data in templates.</p> <p>Example</p> <pre><code>from django.db import models\n\nclass MyModel(models.Model):\n  name = models.CharField(max_length=100)\n  age = models.IntegerField()\n\n  def __str__(self):\n    return f\"{self.name} - {self.age}\"\n</code></pre> <p>In this example, the <code>__str__</code> method is defined to return a string containing the <code>name</code> and <code>age</code> of an instance of <code>MyModel</code>. This allows you to do things like <code>print(instance_of_mymodel)</code> or display the object in Django admin interface in a human-readable format.</p> f-string <p>The f before a string literal in Python, known as an f-string, stands for formatted string. It's a way to create strings that contain embedded Python expressions.</p> <p>Here's how it works:</p> <pre><code>name = \"John\"\nage = 30\nformatted_string = f\"My name is {name} and I am {age} years old.\"\nprint(formatted_string)\n</code></pre> <p>In this example, <code>{name}</code> and <code>{age}</code> are placeholders within the string. When the string is prefixed with <code>f</code>, Python evaluates the expressions within curly braces <code>{}</code> and substitutes them with their values. This makes it easy to create strings with dynamic content without having to concatenate multiple strings or use other formatting methods.</p> <p>F-strings were introduced in Python 3.6 and have become a preferred way to format strings due to their simplicity and readability.</p>","tags":["Django"]},{"location":"blog/2024/04/25/a-peek-into-str-method-in-django/#enhancing-user-experience-with-django-models-a-peek-into-inner-page-representation","title":"Enhancing User Experience with Django Models: A Peek into Inner Page Representation","text":"<p>In this case, it appears you want to implement the <code>__str__</code> method for the <code>AboutInner</code> model to provide a string representation of instances of this model. Since AboutInner instances represent inner pages of the about section, you might want to return something descriptive such as the title or a summary of the content.</p> <p>Here's how you could implement it:</p> Python<pre><code>class AboutInner(models.Model):\n  image = models.ImageField(verbose_name=\"Inner Page Image\", upload_to=\"about/\")\n  content = HTMLField()\n\n  class Meta:\n    db_table = \"ispl_about_inner\"\n    verbose_name = \"About Inner Page\"\n    verbose_name_plural = \"About Inner Pages\"\n\n  def __str__(self):\n    # Return a summary of the content or any other descriptive information\n    return f\"About Inner Page - {self.pk}\"  # Example: Return the primary key\n</code></pre> <p>In this implementation, <code>__str__</code> returns a string containing \"About Inner Page\" followed by the primary key of the instance (<code>self.pk</code>). You could replace <code>self.pk</code> with any other relevant information like a title or summary of the content if applicable. This provides a clear and descriptive representation of each <code>AboutInner</code> instance.</p>","tags":["Django"]},{"location":"blog/2024/04/26/understanding-django-query-methods-objectsall-vs-get_object_or_404/","title":"Understanding Django Query Methods: objects.all() vs get_object_or_404()","text":"","tags":["Django"]},{"location":"blog/2024/04/26/understanding-django-query-methods-objectsall-vs-get_object_or_404/#understanding-django-query-methods-objectsall-vs-get_object_or_404","title":"Understanding Django Query Methods: objects.all() vs get_object_or_404()","text":"<p>In Django development, two commonly used methods for retrieving objects from the database are <code>objects.all()</code> and <code>get_object_or_404()</code>. Although they both deal with database queries, they serve different purposes and are used in different contexts.</p> <ol> <li> <p>objects.all(): Retrieving Multiple Objects</p> <p>When you need to retrieve multiple objects from a database table, <code>objects.all()</code> comes to the rescue. This method returns a queryset containing all objects that match the query criteria. It's particularly useful when you want to fetch a collection of objects to display in a list or iterate over.</p> <p>Tip</p> <pre><code>from myapp.models import MyModel\n\nqueryset = MyModel.objects.all()\n</code></pre> </li> <li> <p>get_object_or_404(): Retrieving a Single Object</p> <p>On the other hand, when you're dealing with situations where you expect to retrieve a single object based on specific conditions, <code>get_object_or_404()</code> is your go-to method. This function retrieves an object based on the provided criteria (such as primary key or unique field value). If the object is not found, it raises a HTTP 404 Not Found error, which is particularly handy for handling cases where a requested object does not exist.</p> <p>Tip</p> <pre><code>from django.shortcuts import get_object_or_404\nfrom myapp.models import MyModel\n\nobj = get_object_or_404(MyModel, pk=1)\n</code></pre> </li> </ol>","tags":["Django"]},{"location":"blog/2024/04/26/understanding-django-query-methods-objectsall-vs-get_object_or_404/#when-to-use-each-method","title":"When to Use Each Method","text":"<ul> <li>objects.all(): Use this method when you need to fetch multiple objects from the database, such as when displaying a list of items.</li> <li>get_object_or_404(): Use this method when you expect to retrieve a single object based on specific criteria and want to handle the case where the object does not exist gracefully by raising a 404 error.</li> </ul>","tags":["Django"]},{"location":"blog/2024/04/26/understanding-django-query-methods-objectsall-vs-get_object_or_404/#conclusion","title":"Conclusion","text":"<p>Understanding the differences between <code>objects.all()</code> and <code>get_object_or_404()</code> allows you to leverage Django's powerful querying capabilities more effectively, ensuring your application retrieves the data it needs efficiently while handling errors gracefully.</p>","tags":["Django"]},{"location":"blog/2024/04/26/understanding-django-query-methods-objectsall-vs-get_object_or_404/#objectsall-vs-get_object_or_404","title":"<code>.objects.all()</code> vs <code>get_object_or_404()</code>","text":"<p>Note</p> <p>In Django, <code>IndustriesItem.objects.all()</code> and <code>get_object_or_404(IndustriesItem)</code> are used to retrieve objects from the database, but they serve different purposes.</p> <ol> <li> <p>IndustriesItem.objects.all():</p> <ul> <li>This retrieves all instances of the <code>IndustriesItem</code> model from the database.</li> <li>It returns a queryset, which is essentially a list of objects that match the query parameters (in this case, all objects).</li> <li>This is useful when you want to retrieve multiple objects and perform operations on them collectively.</li> </ul> </li> <li> <p>get_object_or_404(IndustriesItem):</p> <ul> <li>This is used to retrieve a single object of the <code>IndustriesItem</code> model from the database.</li> <li>If the object does not exist, it raises a 404 HTTP error, which is commonly used for handling \"not found\" errors in web applications.</li> <li>This is useful when you expect to retrieve a single object based on certain criteria, such as a unique identifier.</li> </ul> </li> </ol> <p>So, the main difference lies in the number of objects returned and the behavior when no matching objects are found. <code>IndustriesItem.objects.all()</code> returns multiple objects (all instances), while <code>get_object_or_404(IndustriesItem)</code> returns a single object or raises a 404 error if none is found.</p>","tags":["Django"]},{"location":"interview/draft/","title":"Draft","text":""},{"location":"interview/draft/#abstract-models","title":"Abstract models","text":"<p>In Django models, when you define a class attribute Meta with <code>abstract = True</code>, you're essentially creating an abstract base class. This means that the model class itself won't be created in the database, but it serves as a blueprint for other models to inherit from.</p> <p>Here's what each part does:</p> <ul> <li> <p>Meta:</p> <p>This is a class inside a Django model that holds metadata about the model. Metadata includes things like database table name, ordering options, unique constraints, etc.</p> </li> <li> <p>abstract = True:</p> <p>When you set abstract to True within the Meta class, you're telling Django that this model is just a base class for other models. It won't create its own database table. Instead, when a subclass inherits from this abstract model, Django combines the fields from both the abstract model and the subclass into a single database table.</p> </li> </ul> models.py<pre><code>from django.db import models\n\nclass BaseModel(models.Model):\n    name = models.CharField(max_length=100)\n\n    class Meta:\n        abstract = True\n\nclass MyModel(BaseModel):\n    description = models.TextField()\n\n# Django combines the fields from BaseModel and MyModel into a single table\n# named myapp_mymodel\n</code></pre> <p>In this example, <code>BaseModel</code> is an abstract base class with the attribute <code>abstract = True</code>, so it won't create its own table. <code>MyModel</code> inherits from <code>BaseModel</code>, and Django combines the fields from both into a single table named <code>myapp_mymodel</code> in the database.</p>"},{"location":"interview/draft/#explained-in-simple","title":"Explained in Simple","text":"<p>Of course! Imagine you're building a house. You start with a blueprint, right? That blueprint tells the builders how to construct the house, but it's not an actual house itself.</p> <p>In Django models, setting <code>abstract = True</code> is like saying, \"Hey, this is just a blueprint, don't build a house based on it directly.\" Instead, other models can use this blueprint to build their own houses.</p> <p>So, when you create a model with <code>abstract = True</code>, you're making a blueprint for other models to inherit from. Those other models will combine the blueprint's instructions with their own to create a final house (or database table, in Django's case).</p>"},{"location":"interview/draft/#example","title":"Example","text":"models.py<pre><code>from django.db import models\n\nclass PostBase(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    class Meta:\n        abstract = True\n\nclass BlogPost(PostBase):\n    author = models.CharField(max_length=50)\n\nclass NewsArticle(PostBase):\n    source = models.CharField(max_length=50)\n\n# Now you can create instances of BlogPost and NewsArticle,\n# and Django will automatically create one table for each,\n# combining the fields from PostBase and the subclass.\n</code></pre> <p>In this example:</p> <ul> <li> <p>We define an abstract base class <code>PostBase</code> with common fields like <code>title</code>, <code>content</code>, and <code>created_at</code>. We set <code>abstract = True</code> in its Meta class to indicate that it's just a blueprint.</p> </li> <li> <p>We create two concrete subclasses of <code>PostBase</code>: <code>BlogPost</code> and <code>NewsArticle</code>. Each of these adds its own specific field (<code>author</code> for <code>BlogPost</code> and <code>source</code> for <code>NewsArticle</code>).</p> </li> <li> <p>When you create instances of <code>BlogPost</code> and <code>NewsArticle</code>, Django combines the fields from <code>PostBase</code> and the subclass into separate database tables, creating a single table for each subclass (<code>BlogPost</code> and <code>NewsArticle</code>).</p> </li> </ul>"},{"location":"interview/intro/","title":"Intro","text":"Django Concepts Error Handling and Testing model inheritance"},{"location":"interview/intro/#key-django-programming-concepts","title":"Key Django Programming Concepts","text":"<ol> <li> <p>MTV (Model-Template-View) Architecture</p> <ul> <li> <p>Model: The model is the definitive source of information about your data. It contains the essential fields and behaviors of the data you\u2019re storing. Django follows the DRY Principle (Don't Repeat Yourself), so the model defines the data structure once and automatically derives things from it.</p> </li> <li> <p>Template: Django\u2019s template layer provides a designer-friendly syntax for rendering the information to be presented to the user. It allows for a separation of presentation and business logic, which is beneficial for both developers and designers.</p> </li> <li> <p>View: Views are responsible for processing user requests and returning responses. Views access the data through models and delegate the formatting of the output to the templates. In Django, a view can be a simple function or a class-based view.</p> </li> </ul> </li> <li> <p>ORM (Object-Relational Mapping)</p> <p>Django's ORM allows for the definition of data models in Python, which are then automatically translated into database tables. This abstraction layer lets you interact with your database using high-level Python code instead of SQL, making database operations safer and more intuitive.</p> </li> <li> <p>Migrations</p> <p>Migrations are Django's way of allowing database schema changes (such as adding a field, deleting a model, etc.) without requiring SQL. Migrations are Python files that describe these changes in code, allowing them to be versioned and shared with other developers.</p> </li> <li> <p>Admin Interface</p> <p>Django automatically generates a professional, production-ready admin interface for manipulating website data. This interface is dynamically created from the model definitions and provides a rapid development workflow for managing content.</p> </li> <li> <p>URLs and URLconf</p> <p>Django lets you design URLs however you want, with no framework limitations. The URLconf maps URL patterns (described as regular expressions) to your view functions. This modular URL handling system allows for a clean URL scheme and SEO-friendly web applications.</p> </li> <li> <p>Templates and Template Tags</p> <p>Templates are HTML files that allow Python-like expressions for inserting dynamic content. Template tags are Django\u2019s way of adding functionality to templates, such as looping through lists, loading static files, or applying filters to variables.</p> </li> <li> <p>Forms and ModelForms</p> <p>Django\u2019s forms handle the task of rendering HTML forms and processing submitted data. ModelForms simplify the process by creating form fields automatically for the corresponding model, making it easier to create forms for data entry without repetitive code.</p> </li> <li> <p>Authentication and Authorization</p> <p>Django comes with a built-in authentication system that handles user authentication, sessions, permissions, and user groups. It provides a way to associate users with content and to build permissions and authorization checks into your application.</p> </li> <li> <p>Middleware</p> <p>Middleware are layers of logic that Django executes during request and response processing. They're used for session management, user authentication, cross-site request forgery protection, content compression, and more.</p> </li> <li> <p>Signals</p> <p>Signals allow certain pieces of code to be notified when actions occur elsewhere in the application. They are especially useful for decoupling apps and making them extensible.</p> </li> <li> <p>Testing</p> <p>Django's built-in test framework allows for writing unit tests that ensure your application's code behaves as expected. It includes a test client for simulating requests and responses, allowing for comprehensive testing of views and interaction flows.</p> </li> <li> <p>Security Features</p> <p>Django includes numerous security features that are enabled by default, protecting against SQL Injection, Cross-site Scripting (XSS), Cross-Site Request Forgery (CSRF), and more. Django's security practices are constantly updated to address new vulnerabilities.</p> </li> <li> <p>RESTful APIs with Django REST Framework</p> <p>While Django can handle creating simple APIs using its views and serializers, Django REST Framework (DRF) provides a more flexible toolkit for building web APIs, offering features like authentication policies, serialization, and customizable endpoints.</p> </li> <li> <p>Asynchronous Support</p> <p>Starting with Django 3.1, the framework introduced support for asynchronous views, middleware, and tests, allowing developers to write async code for performance improvements in I/O-bound and high-latency operations.</p> </li> <li> <p>Deployment</p> <p>Deploying a Django application involves more than just transferring code to a server. It includes setting up a web server like Apache or Nginx, configuring a WSGI server like Gunicorn, handling static and media files, and setting up a database.</p> </li> </ol> <p>Understanding these concepts in detail can significantly enhance your ability to develop, deploy, and maintain web applications with Django, leveraging its full potential to create robust, scalable, and secure web solutions.</p>"},{"location":"interview/intro/#error-handling-and-testing","title":"Error Handling and Testing","text":"<ol> <li> <p>Exceptions</p> <p>Error handling is an essential aspect of writing reliable and robust Python programs. Python uses exceptions to handle errors and other exceptional events. An exception is an error that happens during the execution of a program. Exceptions are caught using try and except blocks.</p> <ul> <li> <p>try Block:</p> <p>You place the code that might throw an exception within a try block.</p> </li> <li> <p>except Block:</p> <p>If an exception occurs, the code inside the except block is executed. Multiple except blocks can catch different types of exceptions.</p> </li> <li> <p>else and finally:</p> <p>The else block can be used to execute code when the try block raises no exceptions, and the finally block lets you execute code, regardless of the result of the try and except blocks.</p> </li> </ul> </li> <li> <p>Assertions</p> <p>Assertions are a systematic way to check that the internal state of a program is as expected. An assertion is a sanity-check that you can turn on or turn off when you have finished testing the program. An expression is tested, and if the result comes up false, an exception is raised. Assertions are carried out through the assert statement.</p> </li> <li> <p>Unit Testing</p> <p>Python includes several modules for designing and running tests, called unit tests. Unit testing ensures that your code behaves as expected. The unittest framework, inspired by Java's JUnit, provides features for test automation, sharing of setup and shutdown code, aggregation of tests into collections, and independence of the tests from the reporting framework.</p> </li> </ol>"},{"location":"interview/intro/#using-model-inheritance","title":"Using model inheritance","text":"<p>Django supports model inheritance. It works in a similar way to standard class inheritance in Python. Django offers the following three options to use model inheritance:</p> <ul> <li>Abstract models: Useful when you want to put some common information into several models.</li> <li>Multi-table model inheritance: Applicable when each model in the hierarchy is considered a complete model by itself.</li> <li>Proxy models: Useful when you need to change the behavior of a model, for example, by including additional methods, changing the default manager, or using different meta options.</li> </ul>"},{"location":"interview/intro/#reference","title":"Reference","text":"<ul> <li>PYTHON FOR WEB Development: DJANGO &amp; FLASK UNCHAINED by Hayden Van Der Post Vincent Bisette</li> <li>Django 4 By Example Fourth Edition by Antonio Mel\u00e9 : 524</li> </ul>"},{"location":"interview/memonic/","title":"Memonic","text":"<p>memonic</p>"},{"location":"interview/serialization-versus-deserialization/","title":"Serialization","text":"<p>An object is something that lives in the application memory. We can invoke its method or access its attributes in our application. </p> <p>However, when we want to transfer or store an object, we will have to convert it into a storable or transferrable format, and that format will be a stream of bytes. It can then be stored in a text file, in a database, or be transmitted over the internet. </p> <p>The process of converting an object to a stream of bytes is called serialization. This stream of bytes persists the state of the object so that it can be recreated later. The recreation of the object from a stream of bytes is called deserialization.</p>"},{"location":"interview/serialization-versus-deserialization/#reference","title":"Reference","text":"<ul> <li>Python API Development Fundamentals - pg 126</li> </ul>"},{"location":"interview/theory/","title":"Theory","text":"<p>There are three main categories of cloud computing services out there.</p> <ol> <li>Software as a Service (SaaS)</li> <li>Platform as a Service (PaaS)</li> <li>Infrastructure as a Service (IaaS)</li> </ol>"},{"location":"python/args/","title":"Args","text":""},{"location":"python/args/#understanding-args-and-kwargs-in-python","title":"Understanding Args and Kwargs in Python","text":""},{"location":"python/args/#what-are-args","title":"What are Args?\"","text":"<ol> <li>*args are used to pass non-keyword arguments. Examples of non-keyword arguments are fun(12,14), fun(\u201cvalue1\u201d,\u201cvalue2\u201d).</li> <li>*args are usually used to prevent the program from crashing. If we do not know, numerous parameters will be passed to the function. This is used in other programming languages.</li> </ol> <p>It makes it easy to use any number of arguments without having to change your code. It provides more flexibility to your code since you can have as many arguments as you wish in the future.</p> <p>Example</p> <pre><code>def func(*args):\n    for arg in args:\n        print(arg)\n    func(11,22,33,\"Django\",\"Python\")\nlist = [11,22,33,\"Django\",\"Python\"]\n\nfunc(list)\n</code></pre> <pre><code>#OUTPUT\n11\n22\n33\nDjango\nPython\n\n#List\n[11, 22, 33, 'Django', 'Python']\n</code></pre>"},{"location":"python/args/#what-are-kwargs","title":"What are Kwargs?","text":"<p>**kwargs is a dictionary of keyword arguments. The double asterisk (<code>**</code>) symbol allows us to pass any number of arguments. A keyword argument is usually a dictionary.</p> <p>Here an example of a keyword argument is fun(a=1,b=17).</p> <p>Tips</p> <p>**kwargs are similar to *args, except you declare the variables and the amount within the same function arguments.</p>"},{"location":"python/args/#use-of-args-and-kwargs","title":"Use of Args and Kwargs","text":"<p>Args and kwargs are handy when you need to:</p> <ul> <li>Pass multiple arguments in functions</li> <li>Reduce code writing</li> <li>Make your code more readable</li> <li>Reuse the piece of code</li> </ul>"},{"location":"python/args/#using-both-args-and-kwargs-in-a-function","title":"Using Both Args and Kwargs in a Function","text":"<p>When using both args and kwargs in the same function definition, *args must occur before **kwargs.</p> <pre><code>def __init__(self, *args, **kwargs):\n</code></pre>"},{"location":"python/args/#reference","title":"Reference","text":"<ul> <li>Mastering Django A Beginner\u2019s Guide Edited by Sufyan bin Uzayr - <code>pg: 178</code></li> </ul>"},{"location":"python/content-management-system/","title":"CMS","text":""},{"location":"python/content-management-system/#content-management-system","title":"Content Management System","text":"<pre><code>pip install wagtail\nwagtail start mysite\ncd mysite\npip install -r requirements.txt\npython manage.py migrate\npython manage.py createsuperuser\npython manage.py runserver\n</code></pre>"},{"location":"python/content-management-system/#reference","title":"Reference","text":"<ul> <li> <p>List of content management system: wikipedia</p> </li> <li> <p>wagtail.org - official</p> </li> <li>wagtail: github</li> </ul>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/page/2/","title":"Index","text":""},{"location":"blog/page/3/","title":"Index","text":""},{"location":"blog/page/4/","title":"Index","text":""},{"location":"blog/archive/2024/page/2/","title":"2024","text":""},{"location":"blog/archive/2024/page/3/","title":"2024","text":""},{"location":"blog/archive/2024/page/4/","title":"2024","text":""},{"location":"tags/","title":"Tools","text":""},{"location":"tags/#tools","title":"Tools","text":"<ul> <li>Tmux</li> <li>Django</li> <li>Python</li> </ul>"},{"location":"tags/#django","title":"Django","text":"<ul> <li>Active link in django</li> <li>Ensuring Admin Access Control in Django Models</li> <li>Strengthening Your Django Applications with Defensive Programming</li> <li>Difference between TemplateView, ListView, and View</li> <li>Django Model Fields with TextChoices</li> <li>Django cors</li> <li>A Guide to CSRF Cookie Settings</li> <li>Django easy-thumbnails package</li> <li>Using Elasticsearch with Django and DRF</li> <li>Intro to Elasticsearch</li> <li>Managing development .env in Django</li> <li>Django in production</li> <li>Internationalization and Localization in Django: A Quick Guide</li> <li>Django Images not showing in the Cpanel or Shared Hosting</li> <li>Splitting django models.py into multiple files</li> <li>Django Admin Forms with formfield_overrides</li> <li>Customizing how models are displayed</li> <li>Get related blogs using django-taggit</li> <li>Django with ajax</li> <li>Django with Tailwind</li> <li>Enhancing Django Development with Model help_text</li> <li>Managing settings for multiple environments in django</li> <li>How to handle nullable &amp; non-nullable fields in django</li> <li>Preventing Unintended Form Resubmission in Web Applications</li> <li>A peek into str method in django</li> <li>Understanding Django Query Methods: objects.all() vs get_object_or_404()</li> </ul>"},{"location":"tags/#drf","title":"Drf","text":"<ul> <li>Viewset vs APIView</li> <li>Using Elasticsearch with Django and DRF</li> <li>Intro to Elasticsearch</li> <li>drf-yasg: Swagger</li> <li>Blog CRUD Application Using DRF \u2014 Viewsets</li> </ul>"},{"location":"tags/#production","title":"Production","text":"<ul> <li>Django in production</li> </ul>"},{"location":"tags/#programming","title":"Programming","text":"<ul> <li>Managing settings for multiple environments in django</li> <li>Exploring Static and Dynamic Model Choices in Django</li> </ul>"},{"location":"tags/#python","title":"Python","text":"<ul> <li>Active link in django</li> <li>Ensuring Admin Access Control in Django Models</li> <li>Understanding args and *kwargs in Python Functions</li> <li>Strengthening Your Django Applications with Defensive Programming</li> <li>Django Model Fields with TextChoices</li> <li>Django easy-thumbnails package</li> <li>Splitting django models.py into multiple files</li> <li>Django Admin Forms with formfield_overrides</li> <li>Customizing how models are displayed</li> <li>drf-yasg: Swagger</li> <li>Get related blogs using django-taggit</li> <li>Blog CRUD Application Using DRF \u2014 Viewsets</li> <li>Enhancing Django Development with Model help_text</li> <li>How to Set Up a Virtual Environment in Python</li> </ul>"},{"location":"tags/#simplejwt","title":"SimpleJWT","text":"<ul> <li>How to Implement Tokenization using JWT and Django</li> </ul>"},{"location":"tags/#elasticsearch","title":"elasticsearch","text":"<ul> <li>Using Elasticsearch with Django and DRF</li> <li>Intro to Elasticsearch</li> </ul>"},{"location":"tags/#tailwindcss","title":"tailwindcss","text":"<ul> <li>Django with Tailwind</li> </ul>"}]}