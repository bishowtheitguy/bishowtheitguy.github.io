{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#deploying-your-docs","title":"Deploying your docs","text":"<p>Deploying</p> <pre><code>my-project/\n    mkdocs.yml\n    docs/\norgname.github.io/\n\n$ cd ../orgname.github.io/\n$ mkdocs gh-deploy --config-file ../&lt;your-repo&gt;/mkdocs.yml --remote-branch &lt;master&gt;\n</code></pre>"},{"location":"index.html#plugins-used","title":"Plugins Used","text":"<ol> <li>MkDocs</li> <li>Material for MkDocs</li> <li>MkDocs GLightbox</li> <li>MkDocs Video</li> </ol>"},{"location":"index.html#suggestion","title":"Suggestion","text":"<ul> <li>best MkDocs plugins</li> <li> <p>Uick Guide: setup essentials</p> </li> <li> <p>Admonition</p> </li> <li>Admonitions</li> <li>Admonitions 2</li> </ul>"},{"location":"backend/draft.html","title":"draft","text":"<p>Django Folder Structure</p> <p>Django Naming Convention</p> <p>Boilerplate &amp; Scaffold</p> <p>Python</p> <p>Python</p> bash<pre><code># To run a Django server on a different port\n$ python manage.py runserver &lt;port_number&gt;\n$ python manage.py runserver 8001\n\n# To bind to a specific IP address\n$ python manage.py runserver &lt;ip_address&gt;:&lt;port_number&gt;\n$ python manage.py runserver 0.0.0.0:8001\n\n# This will make your Django server accessible on all network interfaces on port 8001.\n</code></pre> <p>django best practices</p> <p>django best practices: project vs apps</p> 2002, Can't connect to local MySQL server through socket <p>Q. django.db.utils.OperationalError: (2002, \"Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)\")</p> <p>=&gt; Use \"127.0.0.1\", instead of \"localhost\"</p> <pre><code>DATABASES = {\n      'default': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'django',\n            'USER': 'root',\n            'PASSWORD': '',\n            'HOST': '127.0.0.1',\n            'PORT': '3306',\n      }\n}\n</code></pre> Django MVT Architecture <p>In the context of the Django web framework, a \"view\" is not just a \"view\" in the traditional Model-View-Controller (MVC) sense. Instead, it is more aligned with the \"controller\" part of MVC. Django follows a slightly different design pattern known as Model-View-Template (MVT), where the view acts more like a controller.</p> <p>Here's a breakdown of the responsibilities in Django's MVT pattern:</p> <ul> <li> <p>Model:</p> <p>The model represents the data structure of your application. It typically consists of Python classes that define the fields and behavior of your data, including interactions with the database.</p> </li> <li> <p>View:</p> <p>In Django, a view is a Python function or class that receives HTTP requests and returns HTTP responses. It's responsible for processing requests, fetching data from the database (via QuerySets), and passing that data to templates for rendering.</p> </li> <li> <p>Template:</p> <p>Templates are HTML files containing placeholders and template tags. They are responsible for rendering the data received from the view into a user-readable format. Templates can include dynamic content using template tags and filters.</p> </li> </ul> <p>In <code>Django's MVT pattern</code>, the view acts as a controller that handles the business logic, database interactions, and data manipulation. It receives input from the user (HTTP requests), processes that input, interacts with the database through models and QuerySets, and passes the processed data to templates for rendering.</p> <p>So, while the view in Django is similar to the controller in traditional MVC architectures, it also incorporates some aspects of the \"view\" in terms of rendering data to the user. However, the primary responsibility of the view in Django is to handle request processing and data manipulation, making it more akin to the controller in MVC.</p> Registering Models with the Admin <p>We have to register out app's <code>model</code> such as MyEvent, MyUser with the <code>admin</code>.</p> <pre><code>from django.contrib import admin\nfrom .models import MyEvent, MyUser\n\nadmin.site.register(MyEvent)\nadmin.site.register(MyUser)\n</code></pre> <p>Q. Why do we need to register a model in Djano?</p> <p>When you register a model with the admin, you can use the admin to <code>add</code>, <code>edit</code> and <code>delete</code> model records.</p> Advanced models <p>Django QuertSet API provides a comprehensive array of methods and function for working with data.</p> <p>A Django <code>QuerySet</code> is a collection of database queries used to fetch data from the database and perform various operations on it. It represents a collection of objects retrieved from your database, typically filtered, ordered, and limited. QuerySets allow you to interact with your database in a Pythonic way, providing a powerful and expressive API for retrieving, manipulating, and querying data.</p> <p>## Basic Example</p> <pre><code>from myapp.models import Book\n\n# Retrieve all books\nall_books = Book.objects.all()\n\n# Filter books by a certain condition\nrecent_books = Book.objects.filter(published_date__year=2022)\n\n# Order books by a certain field\nsorted_books = Book.objects.order_by('title')\n\n# Retrieve a single book\nbook = Book.objects.get(title='Example Book')\n\n# Count the number of books\nnum_books = Book.objects.count()\n</code></pre> <p>Advanced Example:</p> <p>Suppose you have two models, <code>Author</code> and <code>Book</code>, where <code>Book</code> has a foreign key relationship with <code>Author</code>. Here's how you can use QuerySets for more complex operations:</p> <pre><code>from myapp.models import Author, Book\n\n# Retrieve all books by a specific author\nauthor = Author.objects.get(name='John Doe')\nbooks_by_author = Book.objects.filter(author=author)\n\n# Perform a join operation to get books published in a specific year by authors with a certain nationality\nbooks_published_in_2022 = Book.objects.filter(published_date__year=2022, author__nationality='American')\n\n# Retrieve the number of books written by each author\nfrom django.db.models import Count\nbooks_per_author = Author.objects.annotate(num_books=Count('book'))\n\n# Perform a complex query combining multiple conditions\ncomplex_query = Book.objects.filter(published_date__year=2022).exclude(author__nationality='British').order_by('-published_date')[:5]\n</code></pre> uWSGI (<code>Web Server Gateway Interface</code>) <p>Installation</p> <pre><code># installtion\npip install uwsgi\n\n# checking the version\nuwsg --version\n\n# running a web server\nuwsgi --http :8080 -w &lt;file&gt;:application\n</code></pre> project-level urls <code>vs</code> app-level urls <p>In Django, URL patterns can be defined at both the project level and the app level. Here's a brief explanation of each:</p> <ol> <li> <p>Project-level URLs:</p> <p>These are defined in the urls.py file at the project's root level. This file typically resides in the same directory as your settings.py file. Project-level URLs define the main URLs for your entire Django project. They are often used to include URLs from various apps within the project.</p> </li> <li> <p>App-level URLs:</p> <p>These are defined in the urls.py file within individual Django apps. Each app can have its own set of URLs, which are specific to the functionality provided by that app. App-level URLs are useful for organizing and encapsulating related views and functionality within the app.</p> </li> </ol> <p>Whether you should use both project-level and app-level URLs depends on the structure and complexity of your Django project:</p> <p>Small projects: For small projects with a limited number of apps and URLs, you might choose to define all URLs in the project-level urls.py file. This keeps the URL configuration simple and centralized.</p> <p>Medium to large projects: In larger projects with multiple apps and complex URL configurations, it's often beneficial to use both project-level and app-level URLs. Project-level URLs can serve as an entry point, including URLs from various apps, while each app can define its own URLs for its specific functionality.</p> <p>Here's an example of how you might structure your URLs in a Django project:</p> <pre><code>  project_name/\n  |-- manage.py\n  |-- project_name/\n  |   |-- __init__.py\n  |   |-- settings.py\n  |   |-- urls.py           # Project-level URLs\n  |   |-- wsgi.py\n  |-- app1/\n  |   |-- __init__.py\n  |   |-- models.py\n  |   |-- urls.py           # App-level URLs for app1\n  |   |-- views.py\n  |-- app2/\n  |   |-- __init__.py\n  |   |-- models.py\n  |   |-- urls.py           # App-level URLs for app2\n  |   |-- views.py\n</code></pre> <p>In this structure, the project-level urls.py file might include URLs from <code>app1.urls</code> and <code>app2.urls</code>, while each app (app1 and app2) has its own urls.py file defining URLs specific to that app's functionality. This approach allows for better organization and separation of concerns in larger projects.</p> <p>Programming</p> JS Functional Programming <p>The idea is not to throw away everything you\u2019ve learned and use and adopt a 100% functional way; rather, the guiding idea is evolution, not revolution.</p> <p>It\u2019s easy to apply a given function from some package or the other, but by coding everything out (<code>vanilla FP</code>, if you wish), it\u2019s my belief that you get to understand things more deeply.</p> OO design patterns Functional design patterns <ul> <li>Mastering JavaScript Functional Programming by Federico Kereki, 3rd Edition</li> </ul> What Is DevOps? <p>The term <code>DevOps</code> is derived from the combination of <code>two words</code>: developer and operations.</p> <p><code>DevOps</code> is used to define a movement born of the need for reducing barriers between the development and operations teams of a company. The goal of DevOps is to reduce time to market. This means adopting DevOps practices, to reduce the time needed, from the identification of a new requirement to the time it goes live for customers.</p> <p>The <code>DevOps</code> journey introduces such practices as continuous integration and continuous   delivery, which help to reduce time to market and produce better quality software.</p> <p>Common menus on websites often include:</p> <ol> <li>Home: The homepage of the website, typically linked to the logo in the header.</li> <li>About: Information about the company, organization, or website.</li> <li>Products/Services: If applicable, a menu item leading to a page showcasing the products or services offered.</li> <li>Blog/News: A section for articles, updates, or news related to the website's topic or industry.</li> <li>Contact: Contact information or a contact form for users to reach out.</li> <li>Portfolio/Projects: For showcasing past work or projects, often seen on agency or freelancer websites.</li> <li>FAQ: Frequently Asked Questions, if applicable.</li> <li>Testimonials: Customer testimonials or reviews, typically found on business websites.</li> <li>Events/Calendar: For listing upcoming events, conferences, or important dates.</li> <li>Resources: Links to downloadable resources, documents, or helpful tools.</li> <li>Search: A search bar to help users find specific content on the website.</li> <li>Login/Register: If the website requires user authentication, links to login or register for an account.</li> <li>Terms of Service/Privacy Policy: Legal pages outlining terms of use and privacy policies.</li> <li>Sitemap: A structured layout of the website's content, helpful for navigation and SEO.</li> <li>Social Media Links: Icons linking to the website's social media profiles.</li> </ol> <p>The specific menu items will vary depending on the purpose and content of the website. It's important to consider the needs of your audience and the goals of your website when determining which menu items to include. Additionally, the menu structure should be intuitive and easy to navigate for users.</p>"},{"location":"backend/draft.html#making-fields-optional","title":"Making Fields Optional","text":"models.py<pre><code>class MyUserModal:\n  name = models.URLField(\"Web Address\", blank=True)\n</code></pre> <p>I have set the <code>blank</code> field to <code>True</code>. The default is <code>False</code>, which makes the field required.</p>"},{"location":"backend/intro.html","title":"Intro","text":"<p>Backend</p> <ul> <li> <p> Django</p> </li> <li> <p> FastAPI</p> </li> </ul> <p>Solved Error in Ubuntu while instaling <code>mysqlclient</code></p> <pre><code>sudo apt-get install python3-dev default-libmysqlclient-dev build-essential\n\n# or\n\n# pkg-config: not found is a major hint at the problem and the solution - \n# you're missing build # tools and you need to install them.\n\napt-get install pkg-config build-essential libmysqlclient-dev\n</code></pre> <ul> <li> <p>Mysqlclient cannot install via pip, cannot find pkg-config name in Ubuntu</p> </li> <li> <p>Can not install apache-airflow-providers-mysql: pkg-config error</p> </li> </ul> <p>2002, \"Can't connect to local MySQL server through socket</p> <p>Use \"127.0.0.1\", instead of \"localhost\"</p> <ul> <li>2002, \"Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)\"</li> </ul>"},{"location":"backend/slides.html","title":"Backend","text":""},{"location":"backend/slides.html#presentation","title":"Presentation","text":""},{"location":"backend/django/codesnap.html","title":"codesnap","text":"<p>Warning</p> Defensive String Representation for About Model <p>A senior programmer might write the <code>__str__</code> method in a slightly more defensive and robust way.</p> <p>Here's an example of how they might do it(<code>shown in fig-1</code>):</p> <p>In this version, a few improvements have been made:</p> <ul> <li> <p>Conditional Concatenation: It checks if about_descrip is not empty before concatenating it with about_title. If <code>about_descrip</code> is empty, it simply returns <code>about_title</code>. This avoids potential errors if <code>about_descrip</code> is None or an empty string.</p> </li> <li> <p>Limiting Description Length: It limits the length of about_descrip to the first 50 characters. This helps to prevent excessively long strings from cluttering up output (you can adjust this number to fit your needs).</p> </li> <li> <p>Formatted String: It uses an f-string for string interpolation, which is more concise and readable.</p> </li> </ul> <p>By incorporating these practices, the code becomes more robust and easier to understand and maintain.</p> <p></p> How to view all app code in index.html admin.py<pre><code>@admin.register(About)\nclass AboutAdmin(admin.ModelAdmin):\n    list_display = ['title', 'description', 'image_preview']\n\n    def image_preview(self, obj):\n        if obj.image:\n            return mark_safe('&lt;img src=\"{url}\" width=\"100\" height=\"100\" /&gt;'.format(url=obj.image.url))\n        else:\n            return 'No Image'\n\n    image_preview.short_description = 'Image Preview'\n</code></pre> views.py<pre><code>from django.views.generic import TemplateView\nfrom .models import About, Contact\n\nclass IndexView(TemplateView):\n    template_name = 'index.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['about'] = About.objects.first()  # Assuming you have only one About instance\n        context['contact'] = Contact.objects.first()  # Assuming you have only one Contact instance\n        return context\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Index&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome to Our Website&lt;/h1&gt;\n    &lt;h2&gt;About Us&lt;/h2&gt;\n    &lt;p&gt;{{ about.description }}&lt;/p&gt;\n\n    &lt;h2&gt;Contact Us&lt;/h2&gt;\n    &lt;p&gt;{{ contact.description }}&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Example</p> <p>To add a nullable image field in Django, you can use the ImageField from django.db.models. By default, ImageField allows null values, so you just need to set null=True and blank=True attributes. Here's how you can do it:</p> <p>1. First, ensure you have Pillow installed. Pillow is a required dependency for handling images in Django.</p> <pre><code>pip install Pillow\n</code></pre> <p>2. In your Django model, define an ImageField and set null=True and blank=True attributes.</p> <pre><code>from django.db import models\n\nclass YourModel(models.Model):\n    image = models.ImageField(null=True, blank=True, upload_to='your_upload_path/')\n</code></pre> django nullable field <p>In Django models, null=True and blank=True are <code>two parameters</code> that can be set for a field to allow it to be optional.</p> <p>1. null=True: This parameter specifies that the database column associated with the field can store NULL values. It's a database-level option. If null=True is set, Django will store empty values as NULL in the database.</p> <p>2. blank=True: This parameter is used for form validation. When blank=True is set, the field is allowed to be left blank in forms. It's a validation-related option. Without blank=True, the field would be required in forms.</p> <p>Here's a breakdown of their roles:</p> <ul> <li>null=True: Affects database schema, allowing NULL values in the database column.</li> <li>blank=True: Affects form validation, allowing the field to be left blank in forms.</li> </ul> <p>Using null=True, blank=True together is common when you want a field to be optional both at the database level and in forms. For example, in the context of an image field, null=True allows the database to store records without images, and blank=True allows users to submit forms without uploading an image.</p> <ul> <li>Sort Apps in the Django Admin</li> </ul> <p>Reuse HasAddPermissionMixin in Django Admin for Blogs App</p> <p>Yes, you can reuse the <code>HasAddPermissionMixin</code> class in your <code>blogs</code> app's <code>admin.py</code> file, provided that you have access to it. You can either import it directly or place it in a module that both apps can access.</p> <p>Here's how you can reuse the <code>HasAddPermissionMixin</code> class in your <code>blogs</code> app's <code>admin.py</code> file:</p> <pre><code>from django.contrib import admin\nfrom .models import YourModel\nfrom websites.apps.admin import HasAddPermissionMixin\n\nclass YourModelAdmin(HasAddPermissionMixin, admin.ModelAdmin):\n    pass  # Add other admin customization as needed\n\nadmin.site.register(YourModel, YourModelAdmin)\n</code></pre> <p>In the above code, replace <code>YourModel</code> with the model you want to apply this mixin to. This will apply the <code>HasAddPermissionMixin</code> to your model admin, allowing you to control the add permission based on the existence of objects.</p> <p>Make sure that the <code>websites.apps.admin</code> module is importable from your <code>blogs</code> app. If it's not directly accessible, you may need to reorganize your code or import the mixin from a different location that both apps can access.</p>"},{"location":"backend/django/codesnap.html#ask-chatgpt","title":"ask chatgpt:","text":"<p>how does the seniort programmer writes this code:</p>"},{"location":"backend/django/django-admin.html","title":"django admin","text":"<p>Django comes with a built-in admin interface.</p> <p>In the context of <code>databases</code> or <code>models</code>, entities typically refer to the objects or items that are represented and stored within the database. In a database management system, entities are often mapped to tables, and each row in the table represents a specific instance of that entity.</p> <p>In the context of <code>Django's models</code>, entities usually refer to the objects that you define using Django's Object-Relational Mapping (ORM). In Django, you define entities using model classes, which represent tables in the database. Each instance of a model class corresponds to a row in the respective table, and each attribute of the model class typically corresponds to a column in the table.</p> <p>For example, consider a simple Django model representing a user:</p> python<pre><code>from django.db import models\n\nclass User(models.Model):\n    username = models.CharField(max_length=100)\n    email = models.EmailField()\n</code></pre> <p>In this example, User is the entity, and it's represented by the model class User. The attributes username and email define the properties of this entity, which will be stored as columns in the database table representing the User entity.</p> <p>Entities play a crucial role in database design and modeling as they represent real-world objects or concepts within the system being developed. They help in organizing and structuring data in a way that reflects the relationships and behaviors of the system's components.</p> <p>Example</p> <p>To rename the model name in the Django admin interface, you can use the verbose_name and verbose_name_plural attributes in the model's Meta class. Here's how you can do it:</p> Python<pre><code>from django.db import models\n\nclass ServiceItem(models.Model):\n    title = models.CharField(max_length=120)\n    description = models.TextField(null=True, blank=True)\n    image = models.ImageField(null=True, blank=True, upload_to=\"service/\")\n\n    class Meta:\n        db_table = \"bishow_service_item\"\n        verbose_name = \"Custom Service Item\"\n        verbose_name_plural = \"Custom Service Items\"\n</code></pre> <p>With this setup, in the Django admin interface, instead of \"Service Items\", you'll see \"Custom Service Items\" as the plural name, and instead of \"Service Item\", you'll see \"Custom Service Item\" as the singular name.</p> <code>list_display</code> attribute in a Django ModelAdmin class <p>The list_display attribute in a Django ModelAdmin class is used to specify which fields of the model should be displayed in the list view of the Django admin interface.</p> <p>When you register a model with the Django admin site, it provides a default list view where it shows a list of objects of that model. By default, Django admin will display a representation of each object that just says \"object\" followed by its primary key (e.g., \"<code>About object (1)</code>\").</p> <p>By specifying <code>list_display</code>, you're telling Django admin to customize this default list view by displaying specific fields from your model instead of just the default representation.</p> <p>For example, in your AboutAdmin class:</p> <pre><code>from django.contrib import admin\nfrom .models import About\n\nclass AboutAdmin(admin.ModelAdmin):\n    list_display = ('title', 'description')\n</code></pre> <p>You've specified that in the list view for the About model, Django admin should display the title and description fields of each object.</p> <p>This provides a more informative and user-friendly view of the data in the admin interface, making it easier for administrators to browse and manage the data.</p> <p>Confirm that the AboutAdmin class is correctly registered with the About model. It should look like this:</p> <pre><code>admin.site.register(About, AboutAdmin)\n</code></pre> how to display a <code>preview</code> of the image directly in the Django admin interface <p>If you want to display a preview of the image directly in the Django admin interface without using an HTML <code>&lt;img&gt;</code> tag, you can utilize Django's built-in functionality to generate thumbnail previews of images. Django's ImageField provides a Thumbnail widget that automatically generates a thumbnail preview for images.</p> <p>Here's how you can implement it:</p> Python<pre><code>from django.contrib import admin\nfrom django.utils.safestring import mark_safe\nfrom .models import About\n\nclass AboutAdmin(admin.ModelAdmin):\n    list_display = ('title', 'description', 'display_image')\n\n    def display_image(self, obj):\n        if obj.image:\n            return mark_safe('&lt;img src=\"{}\" width=\"100\" height=\"100\" /&gt;'.format(obj.image.url))\n        else:\n            return 'No Image'\n    display_image.short_description = 'Image Preview'\n\nadmin.site.register(About, AboutAdmin)\n</code></pre> <p>In this code:</p> <ul> <li>We still define the display_image method to return an image tag.</li> <li>We use Django's mark_safe function to mark the string as safe HTML. This is necessary to prevent Django from escaping the HTML when rendering.</li> <li>If there is no image associated with the About object, we return a text saying \"No Image\".</li> <li>The <code>display_image</code> method is assigned to the list_display attribute to display the image preview along with other fields.</li> </ul> <p>With this setup, the Django admin list view for the About model will display a preview of the image (if available) directly in the interface. If there's no image, it will display \"No Image\". Adjust the width and height attributes as needed to control the size of the displayed images.</p> what is <code>list_display</code> attribute? <p>In Django, the list_display attribute in a ModelAdmin class is a sequence (typically a tuple) of field names, specifying which fields of the model should be displayed in the list view of the Django admin interface.</p> <p>While you can use either a list or a tuple, it's a convention in Django to use a tuple for list_display. This is because list_display is not expected to be mutable; it's defining the structure of the admin interface, which should remain consistent.</p> <p>However, since Python allows both lists and tuples to be used in most contexts interchangeably, you can technically use either. Here's an example showing list_display being defined with both a list and a tuple:</p> Python<pre><code># Using a tuple\nclass MyModelAdmin(admin.ModelAdmin):\n    list_display = ('field1', 'field2', 'field3')\n\n# Using a list (not recommended, but works)\nclass MyModelAdmin(admin.ModelAdmin):\n    list_display = ['field1', 'field2', 'field3']\n</code></pre> <p>Both of the above are valid and will achieve the same result. However, using a tuple is more consistent with Django's style and intent for list_display.</p> <p>Abstract</p> <p>To reuse the display_image method without duplicating code, you can define it as a static method and use it across multiple ModelAdmin classes. Here's how you can refactor your code:</p> Python<pre><code>from django.contrib import admin\nfrom django.utils.safestring import mark_safe\nfrom .models import About, Project, ProjectItem\n\nclass ImageDisplayMixin:\n    @staticmethod\n    def display_image(obj):\n        if obj.image:\n            return mark_safe('&lt;img src=\"{}\" width=\"100\" height=\"100\" /&gt;'.format(obj.image.url))\n        else:\n            return 'No Image'\n    display_image.short_description = 'Image Preview'\n\nclass AboutAdmin(admin.ModelAdmin, ImageDisplayMixin):\n    list_display = ('title', 'description', 'display_image')\n\nclass ProjectAdmin(admin.ModelAdmin):\n    list_display = ('title', 'description')\n\nclass ProjectItemAdmin(admin.ModelAdmin, ImageDisplayMixin):\n    list_display = ('title', 'description', 'display_image')\n\nadmin.site.register(About, AboutAdmin)\nadmin.site.register(Project, ProjectAdmin)\nadmin.site.register(ProjectItem, ProjectItemAdmin)\n</code></pre> <p>In this code:</p> <ul> <li>We've created a mixin class called ImageDisplayMixin, which contains the display_image method.</li> <li>The display_image method is decorated with @staticmethod to indicate that it doesn't require access to instance data.</li> <li>Both <code>AboutAdmin</code> and <code>ProjectItemAdmin</code> classes inherit from <code>ImageDisplayMixin</code>, allowing them to reuse the display_image method without duplicating code.</li> <li>By using this approach, you avoid redundancy and keep your code DRY (Don't Repeat Yourself).</li> </ul> how to remove add button in admin interface BasicAdvanced <p>Yes, you can remove the \"<code>Add About</code>\" button from the Django admin interface if there is already one item present. This can be achieved by customizing the admin interface using the has_add_permission method in your ModelAdmin class.</p> <p>Here's how you can do it:</p> Python<pre><code>from django.contrib import admin\nfrom .models import About\n\nclass AboutAdmin(admin.ModelAdmin):\n    # other configurations for list_display, fields, etc.\n\n    def has_add_permission(self, request):\n        # Check if there are any existing About objects\n        if About.objects.exists():\n            # Return False to disable the \"Add About\" button\n            return False\n        # Return True to enable the \"Add About\" button\n        return True\n\nadmin.site.register(About, AboutAdmin)\n</code></pre> <p>In this code:</p> <ul> <li>We define the has_add_permission method in the AboutAdmin class.</li> <li>Inside this method, we check if there are any existing About objects in the database using About.objects.exists().</li> <li>If there are existing About objects, we return False to disable the \"<code>Add About</code>\" button.</li> <li>If there are no existing About objects, we return True to enable the \"<code>Add About</code>\" button.</li> </ul> <p>By implementing has_add_permission in this way, you can control whether the \"<code>Add About</code>\" button is displayed based on the presence of existing About objects in the database. If there is already an About object, the button will be hidden, preventing users from adding more About objects.</p> <p>The reason why HasAddPermissionMixin is not working as expected might be due to the order of inheritance in your ServiceAdmin class. In Python, the order of inheritance matters.</p> <p>When you inherit from multiple classes, Python resolves method lookups in the order specified by the inheritance list. This means that if a method is defined in both the child class and one of its parent classes, the version of the method defined in the child class will take precedence.</p> <p>In your case, HasAddPermissionMixin should come before admin.ModelAdmin in the inheritance list so that its has_add_permission method overrides the one from admin.ModelAdmin. Here's the corrected version:</p> Python<pre><code>from django.contrib import admin\nfrom django.utils.safestring import mark_safe\nfrom .models import About, Project, ProjectItem, Service, ServiceItem\n\n\nclass HasAddPermissionMixin:\n    \"\"\"\n    Mixin class to control the add permission based on the existence of objects.\n    \"\"\"\n    def has_add_permission(self, request):\n        model = self.model\n        return not model.objects.exists()\n\nclass ServiceAdmin(HasAddPermissionMixin, admin.ModelAdmin):\n    \"\"\"\n    Admin class for managing Service objects.\n    \"\"\"\n    list_display = ('title', 'description')\n</code></pre> <p>In this corrected version:</p> <ul> <li>HasAddPermissionMixin is listed before admin.ModelAdmin in the inheritance list of ServiceAdmin, ensuring that its has_add_permission method takes precedence.</li> <li>The ServiceAdmin class now inherits from HasAddPermissionMixin and admin.ModelAdmin in the correct order.</li> </ul> <p>With this setup, HasAddPermissionMixin should work as expected in the ServiceAdmin class.</p> category in django <pre><code>class ProjectItem(models.Model):\n    title = models.CharField(max_length=120)\n    description = models.TextField(null=True, blank=True)\n    image = models.ImageField(null=True, blank=True, upload_to=\"project/\")\n    link = models.CharField(null=True, blank=True, max_length=120)\n    category = models.ForeignKey('ProjectCategory', on_delete=models.CASCADE, related_name='items')\n\n    class Meta:\n        db_table = \"bishow_project_item\"\n        verbose_name = \"Project Item\"\n        verbose_name_plural = \"Project Items\"\n\nclass ProjectCategory(models.Model):\n    name = models.CharField(max_length=120)\n\n    class Meta:\n        db_table = \"bishow_project_category\"\n        verbose_name = \"Project Category\"\n        verbose_name_plural = \"Project Categories\"\n</code></pre> <p>To rename the app name in the Django admin interface,</p> <p>you can customize the display name by providing a custom AppConfig for your app and then specifying the verbose name. Here's how you can do it:</p> <p>Create an AppConfig class in your app's apps.py file:</p> <pre><code>  # myapp/apps.py\n\n  from django.apps import AppConfig\n\n  class MyAppConfig(AppConfig):\n        name = 'myapp'\n        verbose_name = 'New Display Name'\n</code></pre> <p></p>"},{"location":"backend/django/django-admin.html#reference","title":"Reference","text":"<ul> <li>Books by Agiliq - Django Books (FREE)</li> <li>Django Admin Cookbook</li> </ul>"},{"location":"backend/django/django-chatgpt.html","title":"django chatgpt","text":"<pre><code>django.db.models.fields\n</code></pre>"},{"location":"backend/django/django-chatgpt.html#static-category","title":"Static Category","text":"<p>To create a category dropdown field in a Django model, you typically use the models.CharField with choices. Here's how you can do it:</p> <pre><code>from django.db import models\n\nclass YourModel(models.Model):\n    CATEGORY_CHOICES = (\n        ('option1', 'Option 1'),\n        ('option2', 'Option 2'),\n        ('option3', 'Option 3'),\n        # Add more choices as needed\n    )\n\n    category = models.CharField(max_length=50, choices=CATEGORY_CHOICES)\n\n    # Your other fields here\n</code></pre>"},{"location":"backend/django/django-chatgpt.html#dynamic-category","title":"Dynamic Category","text":"<p>To create a dynamic dropdown menu where the admin can add new categories through the Django admin interface, you can utilize Django's built-in <code>ForeignKey field</code> or <code>ManyToManyField</code> if you want multiple categories per item. Here's how you can do it using <code>ForeignKey</code>:</p> <ol> <li> <p>Create a Category Model: First, create a model to represent your categories.</p> <pre><code>from django.db import models\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n</code></pre> </li> <li> <p>Register Models in admin.py: Register both models in your admin.py file to make them accessible in the Django admin interface.</p> <pre><code>from django.contrib import admin\nfrom .models import YourModel, Category\n\nadmin.site.register(YourModel)\nadmin.site.register(Category)\n</code></pre> </li> </ol>"},{"location":"backend/django/django-chatgpt.html#mark_safe","title":"mark_safe","text":"<pre><code>from django.utils.safestring import mark_safe\n</code></pre>"},{"location":"backend/django/django-chatgpt.html#pillow","title":"Pillow","text":"<p>Pillow is a Python Imaging Library (PIL) fork that provides extensive capabilities for opening, manipulating, and saving many different image file formats. It is a powerful library for image processing tasks in Python and is widely used in various applications, including web development, scientific computing, computer vision, and more.</p> <pre><code>pip install Pillow\n</code></pre> <p>In Django, Pillow is commonly used for handling image-related tasks such as uploading, processing, and serving images in web applications. Here's how Pillow is typically used in Django:</p> <ul> <li> <p><code>ImageField</code> in Models:</p> <p>Django's ImageField is used to store image files in the database. Pillow integrates seamlessly with ImageField, allowing you to handle image uploads and save them to the filesystem.</p> <pre><code>from django.db import models\n\nclass MyModel(models.Model):\n    image = models.ImageField(upload_to='images/')\n</code></pre> </li> </ul>"},{"location":"backend/django/django-chatgpt.html#django-built-in","title":"Django Built-in","text":"Django <code>accounts</code> IntroductionPractical <p>Django accounts typically refers to the user authentication system built using Django, a high-level Python web framework. In web development, user authentication is a common requirement where users need to register, log in, log out, and manage their accounts.</p> <p>Django provides a <code>built-in</code> authentication system that includes features such as user registration, login, logout, password management, and more. This system is highly customizable and can be extended to meet the specific requirements of different projects.</p> <p>When developers refer to \"Django accounts,\" they are often discussing the implementation and customization of these authentication features within a Django web application. This can include designing user registration forms, login views, password reset functionality, user profile pages, and other related features.</p> <p>Django accounts are an essential component of many web applications, as they allow users to securely access and interact with the application's features and data. By using Django's built-in authentication system, developers can streamline the development process and ensure that user accounts are managed securely and efficiently.</p> <p>Certainly! Below, I'll guide you through the process of setting up a basic Django project with user authentication. This will include creating a new Django project, setting up user authentication, and creating basic views and templates for user registration, login, and logout.</p> <p>Install Django: If you haven't already installed Django, you can do so using pip, Python's package manager:</p> <pre><code>pip install django\n\n# Create a new Django project:\ndjango-admin startproject myproject\n\n# Navigate to the project directory:\ncd myproject\n\n# Django's built-in authentication system is part of the django.contrib.auth module\n\n# Create a new Django app for user authentication:\npython manage.py startapp accounts\n</code></pre> <p>Create URL patterns: Define URL patterns for user authentication views in your project's urls.py file:</p> <pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('accounts/', include('accounts.urls')),\n]\n</code></pre> <p>Create URL patterns in accounts app: Create a new file called urls.py in the accounts app directory, and define URL patterns for authentication views:</p> <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login, name='login'),\n    path('logout/', views.logout, name='logout'),\n]\n</code></pre> <p>Create views: Create view functions for user registration, login, and logout in the views.py file inside the accounts app:</p> <pre><code>from django.shortcuts import render\n\ndef signup(request):\n    # Implement user registration logic here\n    return render(request, 'accounts/signup.html')\n\ndef login(request):\n    # Implement login logic here\n    return render(request, 'accounts/login.html')\n\ndef logout(request):\n    # Implement logout logic here\n    return render(request, 'accounts/logout.html')\n</code></pre> <p>Create templates: Create HTML templates for user registration, login, and logout inside a templates/accounts directory in your app. Name these templates signup.html, login.html, and logout.html, respectively. You can design these templates as per your project's requirements.</p> <pre><code># Migrate the database:\npython manage.py migrate\n\n# Run the development server:\npython manage.py runserver\n</code></pre> <p>Now, you should be able to access the user authentication views at URLs like <code>/accounts/signup/</code>, <code>/accounts/login/</code>, and <code>/accounts/logout/</code>. You can customize the views, templates, and functionality further based on your project's requirements. Additionally, you may want to implement features like password reset, user profile management, etc., as needed.</p> folder structure of accounts<pre><code>myproject/\n\u251c\u2500\u2500 accounts/\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u2502   \u251c\u2500\u2500 accounts/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 signup.html\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 login.html\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 logout.html\n\u2502   \u251c\u2500\u2500 views.py\n\u2502   \u251c\u2500\u2500 urls.py\n\u251c\u2500\u2500 myproject/\n\u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 ...\n</code></pre> <p>Efficient Data Presentation in Django Templates: Integrating Multiple Models into Your Index Page</p> <p>To display the data from the models <code>About</code>, <code>Project</code>, <code>ProjectCategory</code>, <code>ProjectItem</code>, <code>Service</code>, and <code>ServiceItem</code> in your index.html template, you'll need to pass the data from these models to the template through your view function or class-based view.</p> <p>Here's how you can modify your view to include data from all these models:</p> views.pyindex.html <pre><code>from django.shortcuts import render\nfrom django.views.generic import TemplateView\nfrom .models import About, Project, ProjectCategory, ProjectItem, Service, ServiceItem\n\nclass IndexView(TemplateView):\n    template_name = 'index.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n\n        # Retrieve the About instance\n        about_info = About.objects.first()\n        context['about_info'] = about_info\n\n        # Retrieve all projects\n        projects = Project.objects.all()\n        context['projects'] = projects\n\n        # Retrieve all project categories\n        project_categories = ProjectCategory.objects.all()\n        context['project_categories'] = project_categories\n\n        # Retrieve all service items\n        service_items = ServiceItem.objects.all()\n        context['service_items'] = service_items\n\n        return context\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Index&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;About&lt;/h1&gt;\n    &lt;p&gt;{{ about_info.title }}&lt;/p&gt;\n    &lt;p&gt;{{ about_info.description }}&lt;/p&gt;\n\n    &lt;h1&gt;Projects&lt;/h1&gt;\n    &lt;ul&gt;\n        {% for project in projects %}\n            &lt;li&gt;\n                &lt;h2&gt;{{ project.title }}&lt;/h2&gt;\n                &lt;p&gt;{{ project.description }}&lt;/p&gt;\n            &lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n\n    &lt;h1&gt;Project Categories&lt;/h1&gt;\n    &lt;ul&gt;\n        {% for category in project_categories %}\n            &lt;li&gt;{{ category.name }}&lt;/li&gt;\n            &lt;ul&gt;\n                {% for item in category.items.all %}\n                    &lt;li&gt;{{ item.title }}&lt;/li&gt;\n                    &lt;p&gt;{{ item.description }}&lt;/p&gt;\n                {% endfor %}\n            &lt;/ul&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n\n    &lt;h1&gt;Service Items&lt;/h1&gt;\n    &lt;ul&gt;\n        {% for item in service_items %}\n            &lt;li&gt;\n                &lt;h2&gt;{{ item.title }}&lt;/h2&gt;\n                &lt;p&gt;{{ item.description }}&lt;/p&gt;\n            &lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In Django, the context variable is a dictionary that is passed from the view to the template. It contains data that you want to make available to your template for rendering.</p> <p>In the provided code snippet:</p> <pre><code>projects = Project.objects.all()\ncontext['projects'] = projects\n</code></pre> <ul> <li>Project.objects.all() retrieves all instances of the Project model from the database.</li> <li>projects is a queryset containing all instances of the Project model.</li> <li>context['projects'] = projects assigns the queryset projects to the key 'projects' in the context dictionary.</li> </ul> <p>The context dictionary is then passed to the template when rendering the view. This allows you to access the data in the template using the keys of the context dictionary. For example, in your template, you would use {{ projects }} to access the list of projects retrieved from the database.</p> <p>Understanding Queryset Retrieval in Django's Model Views: all() vs first() and Looping in Templates</p> <p>The difference between <code>Project.objects.all()</code> and <code>Project.objects.first()</code> lies in the data they retrieve from the database:</p> <p>1. Project.objects.all(): This retrieves all instances of the Project model from the database. It returns a queryset, which is a list-like object containing all the instances.</p> <p>2. Project.objects.first(): This retrieves the first instance of the Project model from the database. It returns a single instance of the model, not a queryset.</p> <p>So, when you use <code>Project.objects.all()</code>, you get all instances of the Project model, and when you use <code>Project.objects.first()</code>, you get only the first instance.</p> all()first() <p>In the context of your IndexView class-based view, if you want to display all projects, you would typically use <code>Project.objects.all()</code> and iterate over them in your template using a loop. For example:</p> python<pre><code># Retrieve all projects\nprojects = Project.objects.all()\ncontext['projects'] = projects\n</code></pre> <p>Then in your template, you would loop through projects to display each project:</p> html<pre><code>{% for project in projects %}\n    &lt;h2&gt;{{ project.title }}&lt;/h2&gt;\n    &lt;p&gt;{{ project.description }}&lt;/p&gt;\n{% endfor %}\n</code></pre> <p>On the other hand, if you only need to display information about a single project (for instance, the first project), you could use <code>Project.objects.first()</code>:</p> python<pre><code># Retrieve the first project\nfirst_project = Project.objects.first()\ncontext['first_project'] = first_project\n</code></pre> <p>And then in your template, you would display information about this single project:</p> html<pre><code>&lt;h2&gt;{{ first_project.title }}&lt;/h2&gt;\n&lt;p&gt;{{ first_project.description }}&lt;/p&gt;\n</code></pre> <p>So, to summarize:</p> <ul> <li>Use <code>Project.objects.all()</code> when you want to retrieve and display all instances of the Project model.</li> <li>Use <code>Project.objects.first()</code> when you only need to retrieve and display information about the first instance of the Project model.</li> <li>If you use <code>Project.objects.all()</code>, you typically need to loop through the queryset in your template to display each project.</li> </ul>"},{"location":"backend/django/django-form.html","title":"django form","text":"<p>Types of Form in Django</p> <p>1. Form</p> <p>Django Forms (<code>django.forms.Form</code>)</p> <p>2. ModelForm</p> <p>Model Forms (<code>django.forms.ModelForm</code>)</p> Django Forms library <p></p> <pre><code>#from django.forms import Form, ModelForm\n</code></pre>"},{"location":"backend/django/django-form.html#the-django-forms-library","title":"The Django Forms library","text":"<p>The Django Forms library allows you to quickly define a form using a Python class. This is done by creating a <code>subclass</code> of the base <code>Django Form class</code>.</p> <ul> <li>We refer to our classes as forms, similar to how we subclass Django Models to create Model classes. </li> <li>Forms contain one or more fields of a certain type (such as text fields, number fields, or email fields). </li> <li>You\u2019ll notice this sounds like Django Models, and forms are similar to Models but use different field classes.</li> </ul> <pre><code>from django import forms\n\nclass ExampleForm(forms.Form):\n    text_input = forms.CharField()\n    password_input =\n    forms.CharField(widget=forms.PasswordInput)\n</code></pre> <p>Web Development with Django by Bharath Chandra K S - 2nd, 2023</p>"},{"location":"backend/django/django-form.html#working-with-form-views","title":"Working with <code>form views</code>","text":"<p>A form view is just like any other view class, except that a form view class is designed to process and handle form objects and form submissions. </p> <p>Django offers four main form view classes, listed here:</p> <ul> <li>FormView</li> <li>CreateView</li> <li>UpdateView</li> <li>DeleteView</li> </ul> <p>These can all be found in the <code>django.views.generic.edit</code> library.</p> <p>Website Contact Section</p> viewsmodelscontactcontact successurl Conf <p>In your ContactFormView in <code>form_valid()</code> method, you're trying to call <code>form.save(commit=False)</code>. But <code>commit=False</code> is used in model forms, not in regular forms. </p> <p>Since you're using a regular form, you won't have this attribute available. Here's the corrected version:</p> views.py<pre><code># contact/views.py\nfrom django.shortcuts import render, redirect\nfrom django.views.generic import FormView, TemplateView\nfrom .forms import ContactForm\nfrom .models import ContactMessage\n\nclass ContactFormView(FormView):\n    template_name = 'contacts/contact.html'\n    form_class = ContactForm\n    success_url = '/contact/success/'\n\n    def form_valid(self, form):\n        name = form.cleaned_data['name']\n        email = form.cleaned_data['email']\n        message = form.cleaned_data['message']\n\n        # Create and save ContactMessage instance\n        contact_message = ContactMessage.objects.create(name=name, email=email, message=message)\n\n        return super().form_valid(form)\n\nclass ContactSuccessView(TemplateView):\n    template_name = 'contact/contact_success.html'\n</code></pre> models.py<pre><code># contact/models.py\nfrom django.db import models\n\nclass ContactMessage(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    message = models.TextField()\n    timestamp = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n</code></pre> contact.html<pre><code>&lt;!-- contact/templates/contact/contact.html --&gt;\n&lt;form method=\"post\"&gt;\n{% csrf_token %}\n{{ form.as_p }}\n&lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> contact_success.html<pre><code>&lt;!-- contact/templates/contact/contact_success.html --&gt;\n&lt;h2&gt;Message sent successfully!&lt;/h2&gt;\n</code></pre> urls.py<pre><code># myproject/urls.py\nfrom django.urls import path\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom contact.views import ContactFormView, ContactSuccessView\n\nurlpatterns = [\n    path('contact/', ContactFormView.as_view(), name='contact'),\n    path('contact/success/', ContactSuccessView.as_view(), name='contact_success'),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</code></pre> <p>Success</p> <p>To implement the contact section in the Django admin dashboard, you need to register the <code>ContactMessage</code> model with the admin site. Here's how you can do it:</p> <pre><code>from django.contrib import admin\nfrom .models import ContactMessage\n\n@admin.register(ContactMessage)\nclass ContactMessageAdmin(admin.ModelAdmin):\n    list_display = ('name', 'email', 'message', 'timestamp')\n    search_fields = ('name', 'email', 'message')\n</code></pre> <p>In this code:</p> <ul> <li>@admin.register(ContactMessage) is a decorator that registers the <code>ContactMessage</code> model with the admin site.</li> <li><code>ContactMessageAdmin</code> is a class that inherits from <code>admin.ModelAdmin</code>, allowing you to customize the appearance and behavior of the model in the admin interface.</li> <li><code>list_display</code> specifies which fields should be displayed in the list view of contact messages in the admin interface.</li> <li><code>search_fields</code> specifies the fields by which the contact messages can be searched in the admin interface.</li> </ul> <p>With this setup, you can now access and manage contact form submissions in the Django admin dashboard. When you run your Django server and navigate to the admin site (<code>/admin</code> by default), you should see the Contact Messages section where you can view, search, and manage contact form submissions.</p> Registering a Model with the Django Admin Interface <p>Both admin.site.register(ContactMessage) and @admin.register(ContactMessage) are used to register a model with the Django admin interface, but they differ in syntax and usage style. Here's a breakdown of each:</p> 1. Old Approach2. Decorator Approachdecorator <p>1. admin.site.register(ContactMessage):</p> <p>This method is the traditional way of registering models with the Django admin interface. It's used by directly accessing the <code>site</code> attribute of the <code>admin</code> module. This method is still perfectly valid and widely used, especially in older Django projects or when registering multiple models.</p> python<pre><code>from django.contrib import admin\nfrom .models import ContactMessage\n\nadmin.site.register(ContactMessage)\n</code></pre> <p>2. @admin.register(ContactMessage):</p> <p>This method is a decorator-based approach introduced in Django 1.7. It provides a more convenient and readable way to register models with the admin interface. It's generally preferred for its clarity and brevity, especially for registering a single model.</p> python<pre><code>from django.contrib import admin\nfrom .models import ContactMessage\n\n@admin.register(ContactMessage)\nclass ContactMessageAdmin(admin.ModelAdmin):\n    # Customization for the admin interface\n    pass\n</code></pre> <ul> <li>@admin.register(ModelName)</li> <li>@admin.display()</li> <li>@admin.action()</li> <li>@admin.fieldsets()</li> </ul> <p>Both methods achieve the same result of registering the <code>ContactMessage</code> model with the admin interface. The choice between them often comes down to personal preference, team conventions, and the complexity of your project.</p> <p>For simple cases, where you're just registering a model without any additional customization, the @admin.register() decorator provides a concise and clear syntax. However, if you have more complex customization needs or if you're registering multiple models, using admin.site.register() might be more appropriate.</p> <p>To disable or hide the add button in admin dashboard</p> python<pre><code>from django.contrib import admin\nfrom .models import ContactMessage\n\nclass ContactMessageAdmin(admin.ModelAdmin):\n    # Customize the admin interface for ContactMessage model\n    def has_add_permission(self, request):\n        # Disable the ability to add new contacts\n        return False\n\n# Register the ContactMessage model with the customized admin interface\nadmin.site.register(ContactMessage, ContactMessageAdmin)\n</code></pre> <p>This approach ensures that users cannot add new contacts via the admin interface while still allowing them to view and manage existing contact entries. Adjust the code as needed to fit your specific requirements and project structure.</p> <p>{{ form.as_p }}</p> BasicIntermediateAdvanced <pre><code>&lt;form method=\"post\"&gt;\n    {% csrf_token %}\n    {{ form.as_p }}\n    &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>In Django templates, {{ form.as_p }} is a shortcut for rendering each form field as a paragraph (</p><p> element). Each form field label and input element pair will be wrapped in a </p><p> tag. This is a simple way to render a form in HTML.</p> <p>If you want to use Bootstrap for styling your form, you can integrate Bootstrap classes directly into your template. Here's how you can modify your template to use Bootstrap classes for layout:</p> <pre><code>&lt;div class=\"col-md-12\"&gt;\n    &lt;h5&gt;Contact&lt;/h5&gt;\n    &lt;form method=\"post\" class=\"form\"&gt;\n        {% csrf_token %}\n        &lt;div class=\"form-group\"&gt;\n            {{ form.name.label_tag }}\n            {{ form.name }}\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            {{ form.email.label_tag }}\n            {{ form.email }}\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            {{ form.message.label_tag }}\n            {{ form.message }}\n        &lt;/div&gt;\n        &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre> <p>In this modified template:</p> <ul> <li>Each form field is wrapped in a  element with the class <code>form-group</code>, which is a Bootstrap class used for styling form elements. <li>The form label (<code>{{ form.field.label_tag }}</code>) and input element (<code>{{ form.field }}</code>) are placed within the same form-group div.</li> <li>The submit button is styled using Bootstrap's <code>btn</code> and <code>btn-primary</code> classes to make it a Bootstrap-styled button.</li> <p>This layout adheres to Bootstrap's styling conventions and ensures that your form is styled consistently with the rest of your Bootstrap-based website. Adjust the classes and styling as needed to fit your specific design requirements.</p> <pre><code>&lt;form method=\"post\"&gt;\n    {% csrf_token %}\n\n    &lt;div class=\"mb-3\"&gt;\n        {{ form.name.label_tag }}\n        &lt;input type=\"{{ form.name.field.widget.input_type }}\" name=\"{{ form.name.html_name }}\" id=\"{{ form.name.id_for_label }}\" class=\"form-control\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        {{ form.email.label_tag }}\n        &lt;input type=\"{{ form.email.field.widget.input_type }}\" name=\"{{ form.email.html_name }}\" id=\"{{ form.email.id_for_label }}\" class=\"form-control\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        {{ form.message.label_tag }}\n        &lt;textarea name=\"{{ form.message.html_name }}\" id=\"{{ form.message.id_for_label }}\" class=\"form-control\"&gt;&lt;/textarea&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> </li></ul> <p>Danger</p> <p>Q: Can't save a form in Django (object has no attribute 'save')</p> <p>A: save is available only for <code>ModelForm</code> by default, not for <code>forms.Form</code></p> <p>Example</p> htmlContactForm classform_class <pre><code>&lt;!-- Render the contact form --&gt;\n&lt;form method=\"post\"&gt;\n    {% csrf_token %}\n    {{ form.as_p }}\n    &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> views.py<pre><code>from django.views.generic import TemplateView\nfrom .forms import ContactForm\n\nclass ContactIndexView(TemplateView):\n    template_name = 'index.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        # Include an instance of your form in the context\n        context['form'] = ContactForm()\n        return context\n</code></pre> views.py<pre><code>from django.views.generic import TemplateView\nfrom .forms import ContactForm\n\nclass ContactIndexView(TemplateView):\n    template_name = 'index.html'\n    # Add this line to reference the form class\n    form_class = ContactForm\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n\n        # Include an instance of your form in the context\n        context['form'] = self.form_class()\n\n        return context\n</code></pre> <p><code>TemplateView</code> and <code>FormView</code></p> <p>TemplateView and FormView are both <code>class-based views</code> provided by Django, but they serve different purposes.</p> <p>TemplateView:</p> <ul> <li>TemplateView is used when you want to display a template without any form processing involved.</li> <li>It's typically used for rendering static content or content that doesn't require any data processing or form submissions.</li> <li>It doesn't handle form submissions or provide methods for processing form data.</li> <li>You can use TemplateView to render templates and pass context data to the template, but it doesn't include any form handling logic.</li> </ul> <p>FormView:</p> <ul> <li>FormView is used when you want to display a form, process submitted form data, and handle form validation.</li> <li>It's designed to handle form submissions, validate form data, and perform actions based on the form submission, such as saving data to a database.</li> <li>It provides built-in methods for handling form submission (<code>form_valid()</code> and <code>form_invalid()</code>), which allow you to define custom logic for what happens when the form is submitted successfully or contains errors.</li> <li>FormView typically works with Django forms (<code>django.forms.Form</code> or <code>django.forms.ModelForm</code>) and is suitable for scenarios where you need to handle form submissions and perform form validation.</li> </ul> <p>In your case, if the form is displaying correctly with FormView but not with <code>TemplateView</code>, it suggests that there might be an issue with how you're setting up the TemplateView or how you're including the form in the template. Make sure that the ContactForm instance is correctly included in the context of the <code>TemplateView</code> and that the template is rendering the form properly. If the form is not displaying with <code>TemplateView</code>, it might indicate that the form instance is not being passed to the template context correctly or that there might be an issue with the template rendering logic.</p> Mixins Approach 1Approach 2 <p>To display the <code>ContactFormView</code> form in both <code>contacts/contact.html</code> and <code>index.html</code>, you have a couple of options. One common approach is to reuse the same view class (<code>ContactFormView</code>) for both URLs, but specify different template names for each URL pattern. Here's how you can achieve this:</p> viewurlscontacts/contact.htmlindex html views.py<pre><code>from django.urls import reverse_lazy\nfrom django.views.generic import FormView\nfrom .forms import ContactForm\nfrom .models import ContactMessage\n\nclass ContactFormView(FormView):\n    template_name = 'contacts/contact.html'\n    form_class = ContactForm\n    success_url = reverse_lazy('contact_success')\n\n    def form_valid(self, form):\n        name = form.cleaned_data['name']\n        email = form.cleaned_data['email']\n        message = form.cleaned_data['message']\n\n        # Create and save ContactMessage instance\n        contact_message = ContactMessage.objects.create(name=name, email=email, message=message)\n\n        self.request.session.pop('form_data', None)\n\n        return super().form_valid(form)\n</code></pre> urls.py<pre><code>from django.urls import path\nfrom .views import ContactFormView\n\nurlpatterns = [\n    path('contact/', ContactFormView.as_view(), name='contact'),\n    path('', ContactFormView.as_view(template_name='index.html'), name='index'),\n]\n</code></pre> contact.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Contact Form&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Contact Form&lt;/h1&gt;\n    &lt;form method=\"post\"&gt;\n        {% csrf_token %}\n        {{ form.as_p }}\n        &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Index&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Index Page&lt;/h1&gt;\n    &lt;p&gt;This is the index page.&lt;/p&gt;\n\n    &lt;!-- Include the same contact form here --&gt;\n    &lt;form method=\"post\"&gt;\n        {% csrf_token %}\n        {{ form.as_p }}\n        &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Another approach to displaying the same form in multiple templates while keeping your views DRY (Don't Repeat Yourself) is by using a mixin. Mixins allow you to share common functionality among different views.</p> viewsurl views.py<pre><code>from django.views.generic.edit import FormMixin\nfrom .forms import ContactForm\n\nfrom django.urls import reverse_lazy\nfrom django.views.generic import TemplateView\nfrom .models import ContactMessage\n\nclass ContactFormMixin(FormMixin):\n    form_class = ContactForm\n    success_url = reverse_lazy('contact_success')\n    template_name = 'contacts/contact.html'\n\n    def form_valid(self, form):\n        name = form.cleaned_data['name']\n        email = form.cleaned_data['email']\n        message = form.cleaned_data['message']\n\n        # Create and save ContactMessage instance\n        contact_message = ContactMessage.objects.create(name=name, email=email, message=message)\n\n        self.request.session.pop('form_data', None)\n\n        return super().form_valid(form)\n\nclass ContactFormView(ContactFormMixin, FormView):\n    pass\n\nclass ContactSuccessView(TemplateView):\n    template_name = 'contacts/contact_success.html'\n\nclass IndexView(ContactFormMixin, TemplateView):\n    template_name = 'index.html'\n</code></pre> urls.py<pre><code>from django.urls import path\nfrom .views import ContactFormView, ContactSuccessView, IndexView\n\nurlpatterns = [\n    path('', IndexView.as_view(), name='index'),\n    path('contact/', ContactFormView.as_view(), name='contact'),\n    path('contact/success/', ContactSuccessView.as_view(), name='contact_success'),\n]\n</code></pre> <p>project <code>vs</code> apps <code>guidelines</code></p> <p>Defining URL patterns in Django involves organizing them in a structured manner, both at the project level and the app level. Here are some guidelines and best practices for managing project URLs and app URLs:</p> Project URLs:App URLs: <p>1. Use <code>include()</code> for App URLs: Use Django's <code>include()</code> function to include URLs from individual apps in your project's <code>urls.py</code>. This keeps the project URLs modular and allows you to organize them by functionality.</p> python<pre><code>from django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('myapp/', include('myapp.urls')),\n    # Other app URLs included here\n]\n</code></pre> <p>2.Prefix App URLs: Prefix URLs for each app with a common path to avoid conflicts and provide clarity. For example, if you have an app for managing contacts, prefix its URLs with <code>contacts/</code>.</p> <p>1. Use Namespaced URLs: Use namespaced URLs within your app to avoid conflicts with other apps. Define a unique app_name in your app's <code>urls.py</code> and use it to namespace your URLs.</p> urls.py<pre><code>app_name = 'myapp'\n\nurlpatterns = [\n    path('some-url/', views.some_view, name='some_view'),\n    # Other URLs...\n]\n</code></pre> <p>2. Group URLs by Functionality: Organize URLs within your app's <code>urls.py</code> based on their functionality or resource. For example, group all user-related URLs together, all product-related URLs together, etc.</p> <p>3. Use Class-based Views: Prefer using <code>class-based views</code> over <code>function-based views</code> as they provide better code organization and reuse. Use as_view() to convert class-based views to callable views in your URL patterns.</p> <p>General Tips:</p> <ul> <li> <p>Comments and Documentation: Add comments and documentation to your URLs to explain their purpose, especially if the project is complex or involves multiple developers.</p> </li> <li> <p>Consistency: Maintain consistency in URL naming conventions, URL structure, and URL organization across your project. Consistency makes it easier to understand and navigate the codebase.</p> </li> <li> <p>Avoid Hardcoding URLs: Use Django's <code>reverse()</code> or <code>reverse_lazy()</code> functions to reverse-resolve URLs instead of hardcoding them. This makes your code more robust and easier to maintain if URLs change in the future.</p> </li> <li> <p>Keep URLs Concise and Descriptive: Use concise yet descriptive URLs that clearly convey the purpose of the resource or view being accessed.</p> </li> </ul> <p>By following these guidelines and best practices, you can effectively manage and organize your project URLs, making your codebase more maintainable and understandable.</p> What is Namespace URLS in <code>django</code> apps <p>Namespaced URLs in Django allow you to organize URLs within your app and avoid conflicts with URLs from other apps. Here's what it means and how to use it:</p> <p>What are Namespaced URLs?</p> <p>In Django, a namespace is a way to group a set of URL patterns under a common name. This is particularly useful when you have multiple apps in your project, each with its own set of URL patterns. By namespacing the URLs, you can ensure that URLs from different apps don't clash with each other. How to Use Namespaced URLs?</p> <p>To use namespaced URLs, you need to follow these steps:</p> <p>1. Define an app_name in <code>urls.py</code>: In your app's <code>urls.py</code> file, define an <code>app_name</code> variable to specify the namespace for the URLs in that app.</p> python<pre><code>app_name = 'myapp'\n</code></pre> <p>2. Specify Namespaced URLs: When defining URL patterns in your app's <code>urls.py</code>, use the <code>app_name</code> specified earlier as the namespace for the URLs.</p> python<pre><code>from django.urls import path\nfrom . import views\n\napp_name = 'myapp'\n\nurlpatterns = [\n    path('some-url/', views.some_view, name='some_view'),\n    # Other URLs...\n]\n</code></pre> <p>3. Referencing Namespaced URLs: When referencing URLs in templates or views, use the <code>{% url %}</code> template tag or <code>reverse()</code> function, specifying the namespace along with the URL name.</p> <ul> <li>Using the <code>{% url %}</code> template tag:</li> </ul> html<pre><code>&lt;a href=\"{% url 'myapp:some_view' %}\"&gt;Some View&lt;/a&gt;\n</code></pre> <ul> <li>Using the <code>reverse()</code> function in views:</li> </ul> python<pre><code>from django.urls import reverse\n\nurl = reverse('myapp:some_view')\n</code></pre> <p>When to Use Namespaced URLs?</p> <p>Namespaced URLs are particularly useful when:</p> <ul> <li>You have multiple apps in your Django project.</li> <li>Your project structure involves reusable apps that can be used in different projects.</li> <li>You want to organize URLs within each app and avoid conflicts between URL names.</li> </ul> <p>Namespaced URLs help keep your codebase organized, maintainable, and less error-prone, especially in larger projects with multiple apps. They also provide a clear and concise way to reference URLs within templates and views.</p>"},{"location":"backend/django/django-form.html#reference","title":"Reference","text":""},{"location":"backend/django/django-middleware.html","title":"django middleware","text":"<p>Middleware is a framework of hooks into Django\u2019s request/response processing. It\u2019s a light, low-level \u201cplugin\u201d system for globally altering Django\u2019s input or output.</p>"},{"location":"backend/django/django-middleware.html#reference","title":"Reference","text":"<ul> <li>Django Middleware</li> </ul>"},{"location":"backend/django/django-model.html","title":"django model","text":""},{"location":"backend/django/django-model.html#models-relations-inheritance","title":"Models, Relations, &amp; Inheritance","text":""},{"location":"backend/django/django-model.html#django-models","title":"Django Models","text":"<p>In Django, the model is the object mapped to the database.</p> picture <p></p> <p><code>Book</code> : Mastering Django by Nigel George - 2022</p> Supported Databases <p><code>Django 3.0</code> and higher officially supports five databases:</p> <ul> <li>PostgreSQL</li> <li>MySQL</li> <li>SQLite</li> <li>Oracle</li> <li>MariaDB</li> </ul> <p>There are also several third-party applications available if you need to connect to an unofficially supported database.</p>"},{"location":"backend/django/django-model.html#model","title":"Model","text":""},{"location":"backend/django/django-model.html#working-with-model-field-relationships","title":"Working with model field relationships","text":"<p>Django provides three relationship types for linking tables:</p> <ul> <li>Many\u2013to\u2013one</li> <li>Many\u2013to\u2013many</li> <li>One\u2013to\u2013one</li> </ul> <p>A <code>many-to-one</code> relationship is defined by using a <code>ForeignKey</code> field, and the other two relationship types are defined using the self-explanatory <code>ManyToManyField</code> and <code>OneToOneField</code>. These fields are named appropriately after the relationship type that they represent.</p> <p>The three field types \u2014 <code>ForeignKey</code>, <code>ManyToManyField</code>, and <code>OneToOneField</code>.</p> ForeignKeyForeignKeyManyToManyField <pre><code># /becoming_a_django_entdev/chapter_3/models.py\n...\nclass Vehicle(models.Model):\n    ...\n    vehicle_model = models.ForeignKey(\n        VehicleModel,\n        on_delete = models.CASCADE,\n        verbose_name = 'Model',\n        related_name = 'model_vehicle',\n        blank = True,\n        null = True,\n    )\n    engine = models.ForeignKey(\n        Engine,\n        on_delete = models.CASCADE,\n        verbose_name = 'Engine',\n        related_name = 'engine_vehicle',\n        blank = True,\n        null = True,\n    )\n</code></pre> <pre><code># /becoming_a_django_entdev/chapter_3/models.py\n...\nclass Engine(models.Model):\n    ...\n    vehicle_model = models.ForeignKey(\n        VehicleModel,\n        on_delete = models.CASCADE,\n        verbose_name = 'Model',\n        related_name = 'model_engine',\n        blank = True,\n        null = True,\n    )\n</code></pre> <pre><code># /becoming_a_django_entdev/chapter_3/models.py\n...\nclass Seller(models.Model):\n    name = models.CharField(\n        verbose_name = 'Seller Name',\n        max_length = 150,\n        blank = True,\n        null = True,\n    )\n    vehicle = models.ManyToManyField(\n        Vehicle,\n        verbose_name = 'Vehicles',\n        related_name = 'vehicle_sellers',\n        related_query_name = 'vehicle_seller',\n        blank = True,\n    )\n</code></pre>"},{"location":"backend/django/django-model.html#customizing-models","title":"Customizing models","text":"<p>Writing methods</p> <p>Writing a model method is similar to writing a Meta subclass, except instead of writing a class, we are now writing a function inside that class using the <code>def</code> keyword.</p> <p>The four most helpful and most used methods are defined here:</p> <ul> <li><code>def save(self, *args, **kwargs)</code></li> <li><code>def delete(self, *args, **kwargs)</code></li> <li><code>def get_absolute_url(self)</code></li> <li><code>def __str__(self)</code></li> </ul>"},{"location":"backend/django/django-model.html#decorators","title":"Decorators","text":"<p>A decorator is a standard Python design pattern that allows developers to extend the functionality of an object without permanently changing the behavior of that object. The concept of decorators can be applied to virtually any class or method that exists in a project.</p> <ul> <li> <p><code>@property</code></p> <p>A @property decorator allows us to write a method to act as a regular property of a model instance, rather than act as a function. </p> </li> </ul>"},{"location":"backend/django/django-model.html#extending-models","title":"Extending models","text":"<p>Extending a model is a way to write a set of fields and methods that can be shared in many different classes. This is also known as inheritance, which is a fundamental principle of the Python language, letting us write code once and reuse it over and over again. It is also a way to reuse or modify a class provided by Django itself, such as the built-in User model, which is a very common model to extend.</p>"},{"location":"backend/django/django-model.html#using-the-django-shell","title":"Using the Django shell","text":""},{"location":"backend/django/django-model.html#generating-a-secret_key-variable","title":"Generating a SECRET_KEY variable","text":"<p>A <code>SECRET_KEY</code> variable in Django is used as a hash to secure things, such as your <code>sessions</code>, <code>cookie storage</code>, <code>password tokenization</code>, and all other methods of cryptographic signing that act to secure your site. Instead of using an online tool to generate this key, where the transmission either to or from that source could be compromised, you could generate your own using the Django shell.</p> <pre><code>$ python3 manage.py shell\n$ from secret_key_generator import secret_key_generator\n$ print(secret_key_generator.generate())\n</code></pre>"},{"location":"backend/django/django-model.html#using-the-meta-subclass","title":"Using the Meta subclass","text":"<p>Model metadata is an inner class of a model called Meta. </p> <p>It is not required and completely optional but it does make using Django much more useful when it is included in your models. Metadata provides all of the \"other\" information that is not defined in model field arguments. The settings that are defined inside this class are called meta options, and there are quite a lot to choose from.</p> <pre><code>from django.db import models\n\nclass MyModel(models.Model):\n    # Model fields here\n\n    class Meta:\n        verbose_name = \"Custom Singular Name\"\n        verbose_name_plural = \"Custom Plural Name\"\n        ordering = ['field1', '-field2']\n        unique_together = ['field1', 'field2']\n        indexes = [\n            models.Index(fields=['field1'], name='field1_idx'),\n            models.Index(fields=['field2'], name='field2_idx'),\n        ]\n        permissions = [\n            ('can_view', 'Can view records'),\n            ('can_edit', 'Can edit records'),\n        ]\n</code></pre> <p>Django <code>auto_now</code> vs <code>auto_now_add</code></p> <p>In Django, auto_now and auto_now_add are options for DateTimeField and DateField fields in models. They are used to automatically set the field to the current date and time when an object is created or updated. Here's the difference between the two:</p> <p>1. auto_now: When this option is set to <code>True</code>, the field will be updated with the current date and time every time the model's save() method is called. This means that the field will always reflect the most recent time the object was saved to the database.</p> <p>2. auto_now_add: When this option is set to <code>True</code>, the field will be set to the current date and time when the object is first created, and it will not be updated subsequently. This is useful for fields that should have a fixed creation timestamp.</p> <p>Here's an example of how they can be used in a Django model:</p> <pre><code>from django.db import models\n\nclass MyModel(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    # Other fields...\n</code></pre> <p>In this example, <code>created_at</code> will be set to the current timestamp when an instance of MyModel is created, and <code>updated_at</code> will be updated with the current timestamp every time the instance is saved.</p> <p>When to use <code>auto_now</code> and <code>auto_now_add</code> depends on the specific requirements of your application:</p> <ul> <li> <p>Use auto_now_add when you want to record the time when an object was created and you don't want this field to be updated later.</p> </li> <li> <p>Use auto_now when you want to keep track of the last time an object was updated.</p> </li> </ul> <p>However, there are situations where you might not want to use these options:</p> <ul> <li> <p>Avoid using <code>auto_now</code> and <code>auto_now_add</code> if you need to manually set these fields in some cases. For example, if you're importing data and need to set specific creation or update timestamps, using these options will override your manual settings.</p> </li> <li> <p>Avoid using <code>auto_now</code> if you have cases where you want to update other fields without updating the timestamp field.</p> </li> </ul> <p>In summary, <code>auto_now</code> and <code>auto_now_add</code> are useful shortcuts for handling timestamp fields in Django models, but you should consider your application's specific requirements and potential edge cases when deciding whether to use them.</p> Example of auto_now and auto_add_now <p>In a typical blog model scenario, you would want to record both the creation date of the blog post and the last modification date. For this purpose, you can use both auto_now_add and auto_now options for DateTimeField.</p> <p>Here's how you might implement it:</p> <pre><code>from django.db import models\n\nclass Blog(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n</code></pre> <p>In this model:</p> <ul> <li><code>created_at</code> will automatically store the date and time when the blog post is first created.</li> <li><code>updated_at</code> will automatically update to the current date and time whenever the blog post is saved.</li> </ul> <p>This setup ensures that you have both the creation date and the last modification date stored for each blog post. It's a common and efficient approach for most blog applications.</p> <p>If you only need the creation date and don't care about the last modification date, you can just use <code>auto_now_add=True</code> for the <code>created_at</code> field:</p> <pre><code>class Blog(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n</code></pre> <p>This simplifies the model, but you lose the ability to track when the post was last updated.</p> <p>Ultimately, the best option depends on your specific requirements. If you need both creation and modification dates, the first approach is appropriate. If you only need the creation date, you can use the simplified version.</p>"},{"location":"backend/django/django-model.html#modeladmin-class","title":"ModelAdmin class","text":"<p>In Django admin, readonly_fields and fields are attributes of the ModelAdmin class that allow you to customize which fields are displayed and whether they are editable in the admin interface.</p> <p>attributes</p> <ol> <li>fields</li> <li>readonly_fields</li> <li>list_display</li> <li>ordering</li> <li>list_per_page</li> </ol>"},{"location":"backend/django/django-model.html#reference","title":"Reference","text":"<p>Becoming an Enterprise Django Developer by Michael Dinder (pg-122)</p> <ul> <li>Blog</li> <li>Working with Django Models in Python: Best Practices </li> <li>Best practices working with Django models in python</li> <li>Django Tips #22 Designing Better Models</li> </ul>"},{"location":"backend/django/django-secretkey.html","title":"Generate Secretkey","text":"<p>In Django, there isn't a built-in <code>secret_key_generator</code> function. The typical way to generate a secret key in Django is to use the <code>django.core.management.utils.get_random_secret_key()</code> function.</p> <p>Generate secret key for django project</p> Python<pre><code>python3 manage.py shell\n</code></pre> bash<pre><code>&gt;&gt;&gt; from  django.core.management.utils  import  get_random_secret_key\n&gt;&gt;&gt; print(get_random_secret_key())\n</code></pre> <p>This will generate a random secret key for you. You don't need to import secret_key_generator because it's not a part of Django. </p> <p>Tip</p> <p>In Django, the <code>get_random_secret_key()</code> function generates a random secret key of 50 characters in length by default. However, you can customize the length of the generated key by passing an integer argument to the function specifying the desired length. For example:</p> <pre><code>from django.core.management.utils import get_random_secret_key\n\n# Generate a random secret key of length 64\nprint(get_random_secret_key(64))\n</code></pre> <p>This will print a random secret key of 64 characters in length. You can adjust the length as needed for your application.</p>"},{"location":"backend/django/django-template.html","title":"django template","text":"<p>Adding Templates</p> <p>The first thing to learn is where to put templates in a Django project. By default, Django's template loader looks inside each app for templates that go with it.</p> <p>Now, let us create a templates folder.</p> <p><code>mkdir templates</code></p> <p>Next, we have to add the new template to the settings.py file inside the django project so that Django knows where our new templates directory is. Add the following to the TEMPLATES setting under \"DIRS.\"</p> <pre><code>TEMPLATES = [\n    {\n        ...\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        ...\n    }\n]\n</code></pre> <p><code>Book</code>: Python Flask and Django by emenwa global</p> <p>class &amp; views</p> <p>We will use the built-in TemplateView to show our template in our view. Edit the <code>views.py</code> file.</p> <pre><code>from django.views.generic import TemplateView\n\nclass HomePageView(TemplateView):\n    template_name = \"home.html\"\n</code></pre> <p>Since <code>HomePageView</code> is now a Python class, we had to capitalize it. Unlike functions, classes should always start with a capital letter. The logic for showing our template is already built into the TemplateView. All we need to do is tell it the name of the template.</p> <p>project urls</p> <pre><code>from django.contrib import admin\nfrom django.urls import path\nfrom django.urls import include\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"page.urls\")),\n]\n</code></pre> <p>app urls</p> <p>one big difference: when using Class-Based Views, you always add as view() to the end of the view name.</p> <pre><code>from django.urls import path\nfrom .views import HomePageView\n\nurlpatterns = [\n    path(\"\", HomePageView.as_view(), name=\"home\"),\n]\n</code></pre>"},{"location":"backend/django/django-template.html#extending-templates","title":"Extending Templates","text":"<p>The best thing about templates is how you can extend them. Most websites have headers or footers that you see on every page. How can you do that?</p> <p>First, we make a file called base.html within the templates folder.</p> <p>base.html</p> <pre><code>&lt;header&gt;\n    &lt;a href=\"{% url 'home' %}\"&gt;Home&lt;/a&gt;\n    &lt;a href=\"{% url 'about' %}\"&gt;About&lt;/a&gt;\n&lt;/header&gt;\n\n{% block content %}\n{% endblock content %}\n</code></pre> <p>home.html</p> <pre><code>{% extends \"base.html\" %}\n\n{% block content %}\n&lt;h1&gt;Welcome to my website&lt;/h1&gt;\n{% endblock content %}\n</code></pre>"},{"location":"backend/django/django-template.html#static-dir","title":"Static <code>dir</code>","text":"<pre><code>mkdir static\n\n# to create a CSS subfolder:\nmkdir static/css\n</code></pre> <pre><code># settings.py\nSTATIC_URL = \"static/\"\n\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\n</code></pre> <p>Example</p> <p>The difference between the two declarations lies in the method used to construct the path to the <code>static</code> directory:</p> <p>1. Using the / Operator:</p> <pre><code>STATICFILES_DIRS = [\n    BASE_DIR / \"static\"\n]\n</code></pre> <p>This approach uses the <code>/</code> operator for path concatenation. However, this syntax is not standard in Python and may cause an error unless you have overridden the behavior of the <code>/</code> operator to handle path concatenation.</p> <p>2. Using os.path.join():</p> <pre><code>STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static')\n]\n</code></pre> <p>This approach uses the <code>os.path.join()</code> function to construct the path to the static directory. It is the standard and recommended way to join path components in Python, ensuring compatibility across different operating systems.</p> <p>In summary, the second declaration that uses <code>os.path.join(BASE_DIR, 'static')</code> is correct and standard. It ensures that the path is constructed correctly regardless of the operating system being used. The first declaration using the / operator may not work as expected and is not a common practice in Python for constructing paths.</p> static folder <p>Yes, that's correct. STATICFILES_DIRS and STATIC_ROOT serve different purposes, so they typically point to different directories.</p> <p>1. STATICFILES_DIRS:</p> <p>STATICFILES_DIRS is used during development to specify additional directories where Django should look for static files. These directories can contain static files that are not tied to specific apps or are shared across multiple apps. This setting allows you to include third-party static files, custom project-wide static files, or override static files provided by apps or libraries.</p> <p>For example:</p> <pre><code>STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n    #   '/path/to/external/static/files/',\n]\n</code></pre> <p>2. STATIC_ROOT:</p> <p>STATIC_ROOT is used for deployment purposes. It specifies the directory where Django collects all the static files from your project during the deployment process. These collected static files are meant to be served directly by a web server like Nginx or Apache in a production environment.</p> <p>For example:</p> <pre><code>STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n</code></pre> <p>After running collectstatic, Django gathers static files from both the app-specific static directories and the additional directories specified in STATICFILES_DIRS, and places them into the directory specified by STATIC_ROOT.</p> <p>In summary, STATICFILES_DIRS and STATIC_ROOT should point to different directories. STATICFILES_DIRS is for specifying additional directories where Django should look for static files during development, while STATIC_ROOT is for specifying the directory where Django should collect all static files for deployment.</p> <p>STATIC_URL is a setting in Django used to specify the base URL from which static files will be served. It defines the URL prefix to access static files in your web application.</p> <p>By default, STATIC_URL is set to '/static/' in Django projects, but you can customize it to fit your application's requirements. For example, if you want to serve static files from a different URL or path, you can modify STATIC_URL accordingly in your project's settings.</p>"},{"location":"backend/django/django-template.html#reference","title":"Reference","text":"<ul> <li>Working with Static and Media Files in Django</li> <li>Managing Media Files in Django </li> <li>Django Media Files</li> <li>Storing Django Static and Media Files on Amazon S3</li> <li>Handling Media Files in Django</li> <li>Static files and Media files: django forum</li> <li>Set up Static and Media files in Django: A Quick and Easy Guide</li> <li>Adding Media Directory In Django </li> </ul>"},{"location":"backend/django/django-tools.html","title":"Django Tool","text":""},{"location":"backend/django/django-tools.html#testing-urls","title":"Testing URLs:","text":"<p>You can test URLs using <code>Django's test client</code> to see how your views respond to different requests. For example:</p> <p>Example</p> <pre><code>&gt;&gt;&gt; from django.test import Client\n&gt;&gt;&gt; client = Client()\n&gt;&gt;&gt; response = client.get('/myapp/myurl/')\n&gt;&gt;&gt; print(response.status_code)\n</code></pre> Note <p>In your settings.py, locate the ALLOWED_HOSTS setting and add 'testserver' to the list. If you're using the wildcard '*', make sure 'testserver' is included there.</p> <pre><code># settings.py\n\nALLOWED_HOSTS = ['yourdomain.com', 'testserver']\n</code></pre> <p>By adding 'testserver' to the ALLOWED_HOSTS setting, Django will allow requests with the HTTP_HOST header set to 'testserver' during testing.</p>"},{"location":"backend/django/django-tools.html#using-django-extensions","title":"Using Django Extensions:","text":"<p>Install and utilize Django Extensions, a package that adds various useful functionalities to Django, including shell_plus, which loads all models into the shell namespace to make interacting with them easier.</p> bash<pre><code>$ pip install django-extensions\n$ python manage.py shell_plus\n</code></pre> <p>To enable django_extensions in your project you need to add it to <code>INSTALLED_APPS</code> in your projects <code>settings.py</code> file:</p> <pre><code>INSTALLED_APPS = (\n    ...\n    'django_extensions',\n    ...\n)\n</code></pre>"},{"location":"backend/django/django-tools.html#django-debug-toolbar","title":"Django Debug Toolbar:","text":"<p>Install and use Django Debug Toolbar to analyze and optimize your application during development.</p> bash<pre><code>$ pip install django-debug-toolbar\n</code></pre> <p>Then, add it to your <code>INSTALLED_APPS</code> and configure it properly in your settings file.</p> <pre><code>INSTALLED_APPS = [\n    # ...\n    \"debug_toolbar\",\n    # ...\n]\n</code></pre>"},{"location":"backend/django/django-tools.html#reference","title":"Reference","text":"<ul> <li> <p>Documentation: Testing tools</p> </li> <li> <p>Django Extensions</p> </li> <li>django-extensions: github</li> <li>django-debug-toolbar: readthedocs.io</li> </ul>"},{"location":"backend/django/django-view.html","title":"django view","text":""},{"location":"backend/django/django-view.html#django-views","title":"Django Views","text":"<p>Django\u2019s views are the information brokers of a Django application. A view sources data from your database (or an external data source or service) and delivers it to a template. </p> <ul> <li>For a web application, the view delivers web page content and templates; </li> <li>for a RESTful API this content could be formatted JSON data.</li> </ul> <p>Example</p> <p>So, technically, there are three ways to write a view in Django:</p> <ul> <li>function-based views (FBVs), </li> <li>class-based views (CBVs), &amp;</li> <li>generic class-based views (GCBVs).</li> </ul> <p><code>Book</code>: Python Flask and Django by emenwa global,part2-django </p> <p>As per Django Documentation,</p> <p>A view function is a Python function that takes a Web request and returns a Web response. This response can be the HTML contents of a Web page, or a redirect, or a 404 error, or an XML document, or an image, anything that a web browser can display.</p> <p></p> <p>Django views roughly correspond to controllers in MVC, and Django templates to views in MVC.</p> <p></p> <p></p> <p>Example</p> views.pyapp: <code>urls.py</code>about.html views.py<pre><code>from django.shortcuts import render\nfrom django.views.generic import TemplateView\nfrom .models import About, Project, ProjectCategory, ProjectItem, Service, ServiceItem\n\n# Create your views here.\n\nclass IndexView(TemplateView):\n    template_name = 'index.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n\n        # Retrieve the first About instance\n        abouts = About.objects.first()\n        context['abouts'] = abouts\n\n        # Retrieve all projects\n        projects = Project.objects.first()\n        context['projects'] = projects\n\n        # Retrieve all project categories\n        project_categories = ProjectCategory.objects.all()\n        context['project_categories'] = project_categories\n\n        # Retrieve all project items\n        project_items = ProjectItem.objects.all()\n        context['project_items'] = project_items\n\n        # Retrieve all services\n        services = Service.objects.first()\n        context['services'] = services\n\n        # Retrieve all service items\n        service_items = ServiceItem.objects.all()\n        context['service_items'] = service_items\n\n        return context\n\nclass AboutView(TemplateView):\n    template_name = 'about.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n\n        # Retrieve the About instance\n        about = About.objects.first()\n        context['about'] = about\n\n        return context\n</code></pre> <pre><code>from django.urls import path\nfrom .views import IndexView, AboutView\n\nurlpatterns = [\n    path('', IndexView.as_view(), name='index'),\n    path('about/', AboutView.as_view(), name='about'),\n    # Other URL patterns\n]\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;About Us&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;h1&gt;About Us&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;section&gt;\n            {% if about %}\n                &lt;h2&gt;{{ about.title }}&lt;/h2&gt;\n                &lt;p&gt;{{ about.description }}&lt;/p&gt;\n                &lt;!-- You can display other fields of the About model here --&gt;\n            {% else %}\n                &lt;p&gt;No information available.&lt;/p&gt;\n            {% endif %}\n        &lt;/section&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\n        &lt;!-- Footer content --&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> get_context_data() IntroductionIn Depth<code>**kwargs</code> <p>Yes, <code>get_context_data()</code> is a built-in method provided by Django for class-based views. It's a method that you can override in your own view classes to customize the context data that is passed to the template when rendering.</p> <p>When you subclass a Django class-based view, such as TemplateView, you have the option to override <code>get_context_data()</code> to provide additional context data or modify existing context data before it is passed to the template for rendering.</p> <p>Here's the general structure of <code>get_context_data()</code> in a Django class-based view:</p> python<pre><code>class YourViewClass(View):\n    # other methods and attributes...\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        # Add or modify context data here\n        return context\n</code></pre> <p>By overriding <code>get_context_data()</code>, you can customize the context data for your views, allowing you to pass any additional information to your templates that may be necessary for rendering.</p> <p>In Django, when you're working with class-based views, get_context_data() is a method used to populate the context dictionary that will be passed to the template rendering engine.</p> <p><code>super().get_context_data(**kwargs)</code> calls the <code>get_context_data()</code> method of the parent class in the method resolution order (MRO). In this case, since your view class (IndexView) inherits from TemplateView, <code>super().get_context_data(**kwargs)</code> calls the <code>get_context_data()</code> method of the TemplateView class.</p> <p>The purpose of <code>super().get_context_data(**kwargs)</code> is to ensure that any context data added by the parent class (TemplateView in this case) is included in the context dictionary. This allows you to extend the context data provided by the parent class while adding your own custom context data in the IndexView.</p> <p>By doing this, you can maintain any default behavior or context data provided by the parent class while adding or modifying context data specific to your IndexView.</p> <p>In Python, <code>**kwargs</code> is a special syntax used in function definitions to collect any keyword arguments that are not explicitly defined. The <code>**kwargs</code> syntax allows you to pass a variable number of keyword arguments to a function. Here's how it works:</p> python<pre><code>def example_function(**kwargs):\n    print(kwargs)\n\nexample_function(a=1, b=2, c=3)\n</code></pre> <p>In this example, <code>**kwargs</code> collects the keyword arguments a, b, and c into a dictionary within the function. When you call <code>example_function(a=1, b=2, c=3)</code>, it prints:</p> <pre><code>{'a': 1, 'b': 2, 'c': 3}\n</code></pre> <p>The <code>**kwargs</code> syntax allows you to pass any number of keyword arguments to the function, and the function will receive them as a dictionary with the keyword names as keys and the corresponding values as values.</p> <p>In the context of Django views, <code>**kwargs</code> is often used in the <code>get_context_data()</code> method to accept any additional keyword arguments that might be passed when calling the method. This allows for flexibility when extending or customizing views, as additional keyword arguments can be passed to <code>get_context_data()</code> without modifying its signature.</p> <p>templates <code>folder structure</code></p> ExampleTheory <p>The structure of the templates folder in a Django project can vary based on developer preferences, project requirements, and the scale of the project. However, there are some common practices that senior developers may follow to organize the templates folder effectively:</p> <p>1.App-Named Subfolders:</p> <ul> <li>One common approach is to create a subfolder within the templates directory for each Django app in your project.</li> <li>For example, if you have apps named <code>app1</code>, <code>app2</code>, and <code>app3</code>, you might have subfolders like <code>templates/app1</code>, <code>templates/app2</code>, and <code>templates/app3</code>.</li> <li>This structure keeps templates organized and helps avoid naming conflicts between templates from different apps.</li> </ul> <p>2. Shared Templates:</p> <ul> <li>Alongside app-specific templates, there might be templates that are shared  across multiple apps or are used globally within the project.</li> <li>These shared templates can be placed directly within the templates directory or within a separate subfolder like <code>templates/shared</code>.</li> </ul> <p>3. Include and Extend Patterns:</p> <ul> <li>Senior developers might use Django's template inheritance features to create a hierarchy of templates.</li> <li>Common elements such as headers, footers, and navigation menus might be placed in base templates, which are then extended by more specific templates for each page or section of the site.</li> <li>These base templates are often stored in a separate subfolder like <code>templates/base</code>.</li> </ul> <p>4. Static Files:</p> <ul> <li>If your project includes static files such as CSS, JavaScript, or images that are specific to templates, they are typically stored within each app's static folder rather than the templates folder.</li> <li>However, sometimes there might be template-specific static files, such as images used only in certain templates, which can be organized similarly within the templates directory.</li> </ul> <p>5. Project-Level Templates:</p> <ul> <li>In some cases, there might be <code>templates</code> that are used across the entire project but don't belong to any specific app.</li> <li>These templates can be stored directly within the templates directory or within a subfolder like <code>templates/project</code>.</li> </ul> <p>Here's an example of what the structure might look like:</p> <pre><code>project_name/\n\u251c\u2500\u2500 project_name/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2514\u2500\u2500 wsgi.py\n\u251c\u2500\u2500 app1/\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u2502   \u251c\u2500\u2500 app1/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 template1.html\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 template2.html\n\u2502   \u2502   \u2514\u2500\u2500 base/\n\u2502   \u2502       \u2514\u2500\u2500 base.html\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 app2/\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u2502   \u251c\u2500\u2500 app2/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 template3.html\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 template4.html\n\u2502   \u2502   \u2514\u2500\u2500 base/\n\u2502   \u2502       \u2514\u2500\u2500 base.html\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 templates/\n    \u251c\u2500\u2500 shared/\n    \u2502   \u251c\u2500\u2500 navbar.html\n    \u2502   \u2514\u2500\u2500 footer.html\n    \u2514\u2500\u2500 project/\n        \u2514\u2500\u2500 homepage.html\n</code></pre> <p>This structure keeps the templates organized, making it easier to maintain and understand the project's structure, especially as it grows.</p> <p>The decision of whether to keep template HTML files within the app or solely in the templates folder is influenced by several factors, and different senior programmers may have varying preferences based on project requirements and best practices. Here are some considerations:</p> <p>The decision of whether to keep template HTML files within the app or solely in the templates folder is influenced by several factors, and different senior programmers may have varying preferences based on project requirements and best practices. Here are some considerations:</p> <p>1. Separation of Concerns:</p> <ul> <li>Keeping templates within each app's directory maintains a clear separation of concerns. Each app encapsulates its templates along with its models, views, and other related files. This can make it easier to understand and maintain the codebase, especially for larger projects with many apps.</li> </ul> <p>2. Reusability:</p> <ul> <li>Placing templates within the templates folder allows for better reuse across multiple apps. Templates that are shared between apps can be easily accessed from a central location.</li> <li>However, if templates are tightly coupled with the functionality of a specific app and are unlikely to be reused elsewhere, keeping them within the app's directory may be more appropriate.</li> </ul> <p>3. Project Structure:</p> <ul> <li>Some developers prefer a flatter directory structure to make it easier to locate and manage templates. In such cases, keeping all templates within the templates folder may be preferred.</li> <li>Others prefer a more hierarchical structure, where templates are organized within each app's directory. This can help maintain a clear structure, especially in larger projects with many apps.</li> </ul> <p>4. Project Preferences and Guidelines:</p> <ul> <li>Senior programmers may follow existing project conventions or guidelines established by the team or organization. Consistency within the project codebase is often prioritized over individual preferences.</li> <li>If the project already has a convention in place, it's generally best to adhere to that convention for consistency and maintainability.</li> </ul> <p>5. Integration with Third-party Apps:</p> <p>If your project relies heavily on third-party apps or packages that provide their own templates, keeping app-specific templates separate can help avoid conflicts and make it easier to manage dependencies.</p> <p>In conclusion, there isn't a one-size-fits-all answer, and the decision ultimately depends on factors such as project size, complexity, reuse potential, and team preferences. Both approaches have their advantages, and it's important to weigh these considerations when deciding where to place template files. It's common for senior programmers to consider these factors and make informed decisions based on project requirements and best practices.</p>"},{"location":"backend/django/django-view.html#reference","title":"Reference","text":"<ul> <li>Django Tutorial - geeksforgeeks</li> <li>Django w3schools</li> <li>Django javatpoint</li> <li>Django crud: function based views</li> <li>Django crud: class based views</li> <li>Django project MVT structure</li> <li>Django Tutorial: realPython</li> </ul>"},{"location":"backend/django/intro.html","title":"Intro","text":"<p>Django really is the <code>framework for perfectionists with deadlines</code>.</p> <p>Django is an opinionated, full-stack web application framework. It comes with many batteries that you can use to build a fully functional web application, including static and media file management.</p> <p>Django\u2019s Parts</p> <p>Django Run Server</p> <pre><code>$ python manage.py runserver 127.0.0.1:7000\n\n$ python manage.py runserver 7000\n\n$ python manage.py runserver 0:7000\n</code></pre>"},{"location":"backend/django/intro.html#djangos-parts","title":"Django\u2019s Parts","text":"<p>Django is built on three core parts:</p> <ol> <li>A mapper between URLs and view code</li> <li>An abstraction for interacting with a database</li> <li>A templating system to manage your HTML like code</li> </ol>"},{"location":"backend/django/intro.html#big-picture","title":"Big Picture","text":"A Django View is Not a Controller <p>Check out <code>Figure 3-1</code> on the next page, does it look familiar?</p> <p>This is one of my diagrams, but there are plenty of similar versions out there. A common way of explaining Django\u2019s architecture in terms of MVC is to describe it as a Model-Template-View (MTV) or Model-View-Template (MVT). </p> <p>There\u2019s no difference between MTV and MVT\u2014they\u2019re two different ways to describe the same thing, which adds to the confusion.</p> <p></p> <p>The misleading part of this diagram is the view. The view in Django is most often described as being equivalent to the controller in MVC, but it\u2019s not\u2014it\u2019s still the <code>view</code>.</p> <p></p> <p>Note how I have drawn a line between the client- and server-side. Like all client/server architectures, Django uses request and response objects to communicate between the client and the server. As Django is a web framework, we\u2019re talking about HTTP request and response objects.</p> <p></p> <p>The next point to note is that the Django framework encapsulates the model, view logic and business logic. </p> <p>In some tutorials, it\u2019s said that the Django framework is the controller, but that isn\u2019t true either\u2014the <code>Django framework</code> can do much more than respond to user input and interact with data.</p> <p>A perfect example of this extra power is Django\u2019s middleware, which sits between the view and the client-side. Django\u2019s middleware performs critical security and authentication checks before sending the response to the browser.</p> HTTP Request/Response Cycle <p>A network protocol is a set of rules for formatting and processing data. It's like a common language for computers that lets them talk to each other even if they are on opposite sides of the world and have very different hardware and software.</p> <p>HTTP is a protocol that works with a client-server model of computing. When you go to a website, your computer, or \"client,\" sends a \"request,\" and a \"server\" sends back a \"response.\" The client doesn't have to be a computer, though. It could be a cell phone or any other device that can connect to the internet. But the process is the same: a client sends an HTTP request to a URL, and the server sends an HTTP response back.</p> <p>In the end, a web framework like Django takes HTTP requests to a given URL and sends back an HTTP response with the information needed to render a webpage. All done. Usually, this process involves finding the correct URL, connecting to a server, logic, styling with HTML, CSS, JavaScript, or static assets, and then sending the HTTP response.</p> <p>This is what the abstract flow looks like:</p> <p>HTTP Request -&gt; URL -&gt; Django combines database, logic, styling -&gt; HTTP Response</p> <p><code>Book</code>: Python Flask and Django by emenwa global</p> Model-View-Controller (MVC) and Model-View-Template (MVT) <p>Model-View-Controller (MVC) and Model-View-Template (MVT)</p> <p>The Model-View-Controller (MVC) sequence has become a popular way to split up an application's data, logic, and display into separate parts over time. This makes it easier for a programmer to figure out what the code means. The MVC pattern is used by many web frameworks, such as Ruby on Rails, Spring (Java), Laravel (PHP), ASP.NET (C#), and many others.</p> <p>There are three main parts to the traditional MVC pattern:</p> <ul> <li>Model: Takes care of data and the primary project logic</li> <li>View: Gives the model's data in a specific format.</li> <li>Controller: Takes input from the user and does application-specific logic.</li> </ul> <p>Django's method, often called Model-View-Template, only loosely follows the traditional MVC method (MVT). Developers who have worked with web frameworks before might find this confusing at first. In reality, Django's approach is a 4-part pattern that also includes URL Configuration. A better way to describe it would be something like MVTU.</p> <p>Here's how the Django MVT pattern works:</p> <ul> <li>Model: Manages data and core business logic</li> <li>View: Tells the user what data is sent to them, but not how it is shown.</li> <li>Template: Shows the information in HTML, with CSS, JavaScript, and Static Assets as options.</li> <li>URL Configuration: Regular-expression components set up for a View</li> </ul> <p>This interaction is a crucial part of Django, but it can be hard to understand for new users, so let's draw a diagram of how an HTTP request and response cycle works. When a URL like https://djangoproject.com is typed in, the first thing that happens in our Django project is that a URL pattern (contained in urls.py) that matches it is found. The URL pattern is linked to a single view (in views.py) that combines the data from the model (in models.py) and the styling from a template (any file ending in .html). After that, the view gives the user an HTTP response.</p> <p>The flow looks like below:</p> <p>HTTP Request -&gt; URL -&gt; View -&gt; Model and Template -&gt; HTTP Response</p> <p><code>Book</code>: Python Flask and Django by emenwa global</p> <p>Koncept HolyGrail</p> <p>manage.py shell vs django shell</p> mutable &amp; immutable objects how to master Django framework <p>To master the Django framework, it's essential to gain proficiency in several key areas. Here are some of the most important topics to learn:</p> <p>1. Understanding Models:</p> <p>Django's ORM (Object-Relational Mapping) allows you to interact with your database using Python objects. Learn how to define models to represent your application's data, work with relationships between models, and use Django's querysets for database operations.</p> <p>2. Views and URLs:</p> <p>Understand how views process HTTP requests and generate responses. Learn how to map URLs to views using URL patterns, and explore Django's function-based views and class-based views.</p> <p>3. Templates and Template Language:</p> <p>Django uses a powerful templating engine to generate dynamic HTML content. Learn how to create templates, use template inheritance and inclusion, and leverage Django's template language for data rendering and logic.</p> <p>4. Forms:</p> <p>Django provides tools for working with HTML forms and handling form submissions. Learn how to create forms using Django's form classes, validate user input, and process form submissions in views.</p> <p>5. Authentication and Authorization:</p> <p>Understand how to implement user authentication and authorization in Django. Learn about Django's built-in authentication system, including user authentication views, user models, and permissions.</p> <p>6. Admin Interface:</p> <p>Django includes a customizable admin interface for managing site content. Learn how to register models with the admin interface, customize admin views, and implement custom admin actions and filters.</p> <p>7. Middleware:</p> <p>Middleware components are a key part of Django's request/response processing pipeline. Learn how to write custom middleware to perform tasks such as request/response modification, authentication, or logging.</p> <p>8. Class-Based Views (CBVs):</p> <p>While Django supports function-based views, class-based views offer a more organized and reusable approach to view development. Mastering CBVs can help you create more modular and maintainable code.</p> <p>9. RESTful APIs with Django REST Framework:</p> <p>If your application needs to expose a RESTful API, learn how to use Django REST Framework (DRF) to build APIs quickly and efficiently. DRF provides tools for serialization, authentication, pagination, and more.</p> <p>10. Testing:</p> <p>Writing tests is crucial for ensuring the reliability and correctness of your Django applications. Learn how to write unit tests, integration tests, and functional tests using Django's testing framework.</p> <p>11. Security Best Practices:</p> <p>Understand common security vulnerabilities and best practices for securing Django applications. Topics include protecting against CSRF attacks, XSS attacks, SQL injection, and ensuring secure user authentication.</p> <p>12. Deployment:</p> <p>Learn how to deploy Django applications to production environments. Understand deployment options such as using WSGI servers like Gunicorn, configuring web servers like Nginx or Apache, and setting up databases and caching solutions.</p> <p>By focusing on these key topics and building projects that utilize these concepts, you'll develop a strong foundation in Django development and be well-equipped to create robust and scalable web applications. Additionally, staying up-to-date with the latest developments in the Django ecosystem and exploring advanced topics as you gain experience will further enhance your mastery of the framework.</p> Basic of CBVs in Django <p>Certainly! Class-Based Views (CBVs) in Django provide a more structured and reusable way to handle HTTP requests compared to function-based views. Here's a comprehensive list of commonly used CBVs that you should learn:</p> <p>1. View:</p> <p>The base class for all views. It doesn't perform any actions itself but serves as the superclass for other views.</p> <p>2. TemplateView:</p> <p>Renders a template in response to a GET request. This is useful for rendering simple static pages or pages that don't require data manipulation.</p> <p>3. RedirectView:</p> <p>Redirects the user to a different URL. It's useful for implementing redirects in response to specific conditions or actions.</p> <p>4. ListView:</p> <p>Renders a list of objects from a queryset. It's often used to display a list of items from a database table or any other iterable data source.</p> <p>5. DetailView:</p> <p>Renders a detail page for a single object retrieved from a queryset. It's used to display detailed information about a specific object, typically identified by a unique identifier such as a primary key.</p> <p>6. CreateView:</p> <p>Handles the creation of new objects. It renders a form for creating a new object and processes the submitted data.</p> <p>7. UpdateView:</p> <p>Handles the updating of existing objects. It renders a form pre-filled with the data of an existing object and processes the submitted data to update the object.</p> <p>8. DeleteView:</p> <p>Handles the deletion of existing objects. It renders a confirmation page before deleting the object and then performs the deletion upon confirmation.</p> <p>9. FormView:</p> <p>Renders a form and handles its submission. It's useful for scenarios where you need custom logic for form processing.</p> <p>10. DetailView:</p> <p>Renders a detail page for a single object retrieved from a queryset. It's used to display detailed information about a specific object, typically identified by a unique identifier such as a primary key.</p> <p>11. ArchiveIndexView:</p> <p>Renders a list of objects grouped by date. It's useful for displaying archives of objects, such as blog posts grouped by publication date.</p> <p>12. YearArchiveView:</p> <p>Renders a list of objects for a specific year. It's typically used in conjunction with ArchiveIndexView to navigate through archives by year.</p> <p>13. MonthArchiveView:</p> <p>Renders a list of objects for a specific month within a year. It's used to display archives filtered by month.</p> <p>14. DayArchiveView:</p> <p>Renders a list of objects for a specific day within a month and year. It's used to display archives filtered by day.</p> <p>15. TodayArchiveView:</p> <p>Renders a list of objects for the current day. It's a shortcut for DayArchiveView with today's date.</p> <p>16. DateDetailView:</p> <p>Renders a detail page for a single object for a specific date. It's useful for displaying detailed information about an object based on its date.</p> <p>These are the core CBVs provided by Django. Mastering these classes will enable you to efficiently handle common web development tasks and build robust applications using Django's class-based views architecture.</p> Example of Class-Based View (CBV) in Django: modelsviewshtmlurlsquestions <p>Let's consider a scenario where you want to display a list of books using a ListView. First, you'll define a model for the books in your models.py:</p> models.py<pre><code># models.py\nfrom django.db import models\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.CharField(max_length=100)\n    publication_date = models.DateField()\n\n    def __str__(self):\n        return self.title\n</code></pre> <p>Then, you'll create a ListView to display a list of books in your views.py:</p> views.py<pre><code># views.py\n\nfrom django.views.generic import ListView\nfrom .models import Book\n\nclass BookListView(ListView):\n    model = Book\n    template_name = 'book_list.html'  # specify the template name\n    context_object_name = 'books'     # specify the context variable name for the list of objects\n    ordering = ['-publication_date']  # specify the default ordering of the queryset\n</code></pre> <p>Next, you'll create a template to render the list of books. Create a file named book_list.html in your templates directory:</p> book_list.html<pre><code>&lt;!-- book_list.html --&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Book List&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Book List&lt;/h1&gt;\n    &lt;ul&gt;\n        {% for book in books %}\n            &lt;li&gt;{{ book.title }} - {{ book.author }} ({{ book.publication_date }})&lt;/li&gt;\n        {% empty %}\n            &lt;li&gt;No books available.&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Finally, you'll set up the URL mapping in your urls.py to associate the ListView with a URL:</p> urls.py<pre><code># urls.py\n\nfrom django.urls import path\nfrom .views import BookListView\n\nurlpatterns = [\n    path('books/', BookListView.as_view(), name='book-list'),\n]\n</code></pre> <p>Now, when a user navigates to <code>/books/</code> in the browser, Django will use the BookListView to fetch the list of books from the database and render them using the book_list.html template.</p> <p>is the context_object_name random variable name or ?</p> <p>No, context_object_name is not a random variable name. It's a specific attribute of Django's ListView class-based view (CBV) that allows you to specify the name of the variable that will be used to pass the list of objects to the template context.</p> <p>When you define a ListView in Django, it automatically retrieves a list of objects from the specified model and passes them to the template context. By default, this list is passed using the variable name object_list. However, you can customize this variable name using the context_object_name attribute.</p> <p>For example, in the following code snippet:</p> <pre><code>class BookListView(ListView):\n    model = Book\n    template_name = 'book_list.html'\n    context_object_name = 'books'\n</code></pre> <p>The context_object_name is set to 'books', which means that in the book_list.html template, the list of books will be available as the variable books.</p> <p>So, in the template:</p> <pre><code>{% for book in books %}\n    {{ book.title }}\n{% endfor %}\n</code></pre> <p>Here, books is the name specified by context_object_name, and it represents the list of books retrieved by the ListView. You can choose any meaningful name for context_object_name based on your application's context.</p> <p>This is just one example of how you can use a CBV in Django. CBVs provide a flexible and reusable way to handle different types of views in your web application, allowing you to write clean and maintainable code.</p> Mastering CBVs in Django <p>Mastering Class-Based Views (CBVs) in Django requires a combination of understanding the underlying concepts and practical application. Here's a structured approach to mastering CBVs:</p> <p>1. Understand the Basics:</p> <ul> <li>Familiarize yourself with the different types of CBVs provided by Django, such as ListView, DetailView, CreateView, UpdateView, DeleteView, etc.</li> <li>Read the Django documentation thoroughly to understand the purpose and usage of each CBV.</li> <li>Review the source code of Django's built-in CBVs to gain insights into how they are implemented.</li> </ul> <p>2. Hands-on Practice:</p> <ul> <li>Start by creating simple projects or applications where you can apply CBVs.</li> <li>Implement basic functionalities such as displaying lists of objects, viewing details, creating, updating, and deleting objects using CBVs.</li> <li>Experiment with different CBVs and observe how they behave in different scenarios.</li> <li>Refactor existing function-based views to class-based views to understand the differences and benefits.</li> </ul> <p>3. Explore Customization:</p> <ul> <li>Dive deeper into customization options provided by CBVs. Learn how to override methods and attributes to tailor the behavior of CBVs to your specific requirements.</li> <li>Practice extending built-in CBVs to add additional functionality or modify existing behavior without rewriting the entire view.</li> </ul> <p>4. Advanced Topics:</p> <ul> <li>Explore more advanced topics related to CBVs, such as mixin classes, multiple inheritance, and view composition.</li> <li>Learn about best practices for structuring CBVs in large-scale applications to maintain code readability and reusability.</li> <li>Experiment with integrating third-party libraries or frameworks with CBVs, such as Django REST Framework for building RESTful APIs.</li> </ul> <p>5. Review and Refine:</p> <ul> <li>Regularly review your code and seek feedback from peers or mentors to identify areas for improvement.</li> <li>Refactor your codebase to incorporate best practices and design patterns related to CBVs.</li> <li>Stay updated with the latest developments in the Django ecosystem, including new features and improvements related to CBVs.</li> </ul> <p>6. Build Real Projects:</p> <ul> <li>Work on real-world projects that require complex functionality and utilize CBVs extensively.</li> <li>Apply your knowledge of CBVs to solve practical problems and implement features efficiently.</li> <li> <p>Reflect on your project experiences and identify lessons learned to improve your understanding and mastery of CBVs.</p> </li> <li> <p>Contribute to Open Source:</p> </li> <li> <p>Consider contributing to open-source projects that use CBVs. This allows you to collaborate with experienced developers, gain exposure to different coding styles, and contribute to the Django community.</p> </li> </ul> <p>By following this structured approach and combining theoretical understanding with practical application, you can gradually master Class-Based Views in Django and become proficient in building robust web applications. Remember that mastery comes with continuous learning, practice, and experimentation.</p> Question about CBVs in django <p>In Django's Class-Based Views (CBVs), the as_view() method is a crucial part of the view setup process. It's used to convert a class-based view into a view function that Django can use to handle HTTP requests.</p> <p>When you define a CBV, you're essentially defining a Python class that encapsulates the logic for processing a particular type of HTTP request. However, Django's URL routing system expects to work with functions rather than classes. So, to make your CBV compatible with Django's URL routing mechanism, you use the as_view() method.</p> <p>Here's how it works:</p> <p>1. Defining the CBV:</p> <p>First, you define your CBV by creating a subclass of one of Django's built-in CBV classes, such as ListView, DetailView, CreateView, etc. For example:</p> <pre><code>from django.views.generic import ListView\nfrom .models import MyModel\n\nclass MyListView(ListView):\n    model = MyModel\n    template_name = 'myapp/my_model_list.html'\n</code></pre> <p>2. Using as_view() in URL Configuration:</p> <p>When you include your CBV in your URL configuration (usually in urls.py), you use the as_view() method to convert the CBV into a view function that Django's URL dispatcher can work with. For example:</p> <pre><code>from django.urls import path\nfrom .views import MyListView\n\nurlpatterns = [\n    path('my-list/', MyListView.as_view(), name='my-list'),\n]\n</code></pre> <p>3. Instantiating the CBV:</p> <p>When Django's URL dispatcher matches a URL pattern to a view function, it will instantiate the CBV using the as_view() method and call the appropriate method (such as get() or post()) to handle the HTTP request.</p> <p>Behind the scenes, the as_view() method creates a function that:</p> <ul> <li>Instantiates the CBV class.</li> <li>Calls the appropriate method (dispatch()) on the instance to handle the HTTP request.</li> <li>Returns the HTTP response generated by the CBV.</li> </ul> <p>This process allows Django's URL routing system to seamlessly work with CBVs, providing a more object-oriented and modular approach to handling HTTP requests compared to traditional function-based views.</p> Detail on routers <p>In traditional Django applications that serve HTML content using Django's built-in views and templates, routers are not typically used. Routers are primarily associated with Django REST Framework (DRF), which is an additional library used for building RESTful APIs in Django.</p> <p>In traditional Django applications:</p> <p>1. URL Configuration:</p> <p>URL patterns are typically defined in the urls.py module of your Django application. You manually specify the URL patterns and map them to corresponding views or view functions.</p> <p>2. Views:</p> <p>Views in traditional Django applications are typically implemented as functions or class-based views (CBVs) within your Django application. These views are responsible for processing HTTP requests and returning HTTP responses, usually in the form of HTML content generated with Django's template engine.</p> <p>3. Templates:</p> <p>HTML templates are used to generate the content that is returned to the user's browser. Django's template engine allows you to define dynamic HTML content by embedding Python-like code within HTML templates.</p> <p>In summary, if you are building a traditional Django application that serves HTML content, you won't typically use routers. Routers are specifically designed for building RESTful APIs with Django REST Framework, where URL routing and resource management are different from traditional Django applications.</p> <p>However, if you are building a RESTful API using Django REST Framework, routers provide a convenient and efficient way to define URL patterns for your API endpoints, organize your API resources, and manage URL configurations.</p>"},{"location":"backend/django/intro.html#koncept-holygrail","title":"Koncept HolyGrail","text":"<p><code>dir()</code> lists attributes and methods of an object, while <code>help()</code> provides detailed documentation about specific objects, including classes, functions, and modules.</p>"},{"location":"backend/django/intro.html#django","title":"Django","text":"<pre><code>$ django-admin shell\n\n$ import django\n$ dir(django)\n$ help(django)\n</code></pre>"},{"location":"backend/django/intro.html#djangorestframework-rest_framework","title":"<code>djangorestframework</code> rest_framework","text":"<pre><code>$ py manage.py shell\n\n$ import rest_framework\n$ dir(rest_framework)\n$ help(rest_framework)\n\n$ import rest_framework.generics\n$ dir(rest_framework.generics)\n$ help(rest_framework.generics) \n</code></pre>"},{"location":"backend/django/intro.html#difference-between-py-managepy-shell-django-admin-shell","title":"Difference between <code>py manage.py shell</code> &amp; <code>django-admin shell</code>","text":"<p>python manage.py shell loads the Django project's environment, while django-admin shell provides a general Python shell without Django-specific setup.</p> <pre><code># django-admin shell provides a general Python shell without Django-specific setup.\ndjango-admin shell\n\n# python manage.py shell loads the Django project's environment.\npy manage.py shell\n</code></pre>"},{"location":"backend/django/intro.html#mutable-versus-immutable-objects","title":"Mutable versus immutable objects","text":"<p>Mutability is a fundamental concept of the Python language and is broken down into mutable and immutable objects. </p> <p>An object is said to be mutable if its values can change over time. If an object's value will not change, then that object is said to be immutable. In Python, an object's mutability is also defined by the data type that it is. For example, mutable objects are represented using a <code>list</code>, <code>dictionary</code>, <code>set</code>, or <code>QuerySet</code>. </p> <p>Immutable objects are defined by using the <code>bool</code>, <code>decimal</code>, <code>float</code>, <code>int</code>, <code>range</code>, <code>string</code>, and <code>tuple</code> data types. Queries will perform better if the object being searched is immutable rather than mutable. </p> <p>Most of the time, the difference is miniscule, literally in nano-or milliseconds. When your project goes live and your database starts to collect thousands, if not millions, of records, the time it takes to query something will then be noticed when it takes seconds, if not minutes or tens of minutes, to complete a single query.</p> <p>Becomming Enterprise Developer (pg-122)</p>"},{"location":"backend/django/intro.html#reference","title":"Reference","text":"Note <ul> <li> <p>Django in Action MEAP V01 by Christopher Trudeau - Manning publication</p> </li> <li> <p>Django Popular Apps</p> </li> <li> <p>18 Django Apps To Build And Ship a Product Quickly</p> </li> <li>Django Packages</li> <li>10 Django Packages Every Developer Must Know</li> <li>The 15 Best Django Packages for Your Application </li> <li>Top 12 Django Packages and Libraries</li> </ul> <ul> <li>django apps : github</li> <li> <p>django change default runserver port</p> </li> <li> <p>Django Best Practices: Code Structure, Naming Conventions, and Design Patterns</p> </li> </ul> <ul> <li>Books</li> <li>Mastering Django by Nigel George - 2022</li> <li>Web Development with Django - 2023</li> </ul>"},{"location":"backend/drf/drf-functionbasedviews.html","title":"drf fbv","text":"<p>Django has two types of views;</p> <ul> <li>function-based views (FBVs), &amp;</li> <li>class-based views (CBVs)</li> </ul> <p>Django originally started out with only FBVs, but then added CBVs as a way to templatize functionality so that you didn\u2019t have to write boilerplate (i.e. the same code) code over and over again.</p>"},{"location":"backend/drf/drf-functionbasedviews.html#function-based-views-fbvs","title":"Function-based views (FBVs)","text":"<p>FBVs code here:</p> <p>Todo App (using FBVs)</p> <p>Let's look at how a simple todo application that allows CRUD operations would be written using only FBVs.</p> <pre><code># todo/views.py\n\nfrom django.shortcuts import render, get_object_or_404, redirect\n\nfrom .forms import TaskForm, ConfirmForm\nfrom .models import Task\n\n\ndef task_list_view(request):\n    return render(request, 'todo/task_list.html', {\n        'tasks': Task.objects.all(),\n    })\n\n\ndef task_create_view(request):\n    if request.method == 'POST':\n        form = TaskForm(data=request.POST)\n        if form.is_valid():\n            form.save()\n            return HttpResponseRedirect(reverse('task-list'))\n\n    return render(request, 'todo/task_create.html', {\n        'form': TaskForm(),\n    })\n\n\ndef task_detail_view(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    return render(request, 'todo/task_detail.html', {\n        'task': task,\n    })\n\n\ndef task_update_view(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n\n    if request.method == 'POST':\n        form = TaskForm(instance=task, data=request.POST)\n        if form.is_valid():\n            form.save()\n            return HttpResponseRedirect(reverse('task-detail', args={pk: pk}))\n\n    return render(request, 'todo/task_update.html', {\n        'task': task,\n        'form': TaskForm(instance=task),\n    })\n\n\ndef task_delete_view(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n\n    if request.method == 'POST':\n        form = ConfirmForm(data=request.POST)\n        if form.is_valid():\n            task.delete()\n            return HttpResponseRedirect(reverse('task-list'))\n\n    return render(request, 'todo/task_delete.html', {\n        'task': task,\n        'form': ConfirmForm(),\n    })\n</code></pre> <p>You can get the full source code on GitHub.</p>"},{"location":"backend/drf/drf-functionbasedviews.html#class-based-views-cbvs","title":"Class-based views (CBVs)","text":"<p>CBVs code here:</p> <p></p> <p>Todo App (using CBVs)</p> <p>Now, let's rewrite our todo application to only use CBVs:</p> <pre><code># todo/views.py\n\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.views import View\n\nfrom .forms import TaskForm, ConfirmForm\nfrom .models import Task\n\n\nclass TaskListView(View):\n\n    def get(self, request, *args, **kwargs):\n        return render(request, 'todo/task_list.html', {\n            'tasks': Task.objects.all(),\n        })\n\n\nclass TaskCreateView(View):\n\n    def get(self, request, *args, **kwargs):\n        return render(request, 'todo/task_create.html', {\n            'form': TaskForm(),\n        })\n\n    def post(self, request, *args, **kwargs):\n        form = TaskForm(data=request.POST)\n        if form.is_valid():\n            task = form.save()\n            return redirect('task-detail', pk=task.pk)\n\n        return self.get(request)\n\n\nclass TaskDetailView(View):\n\n    def get(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n\n        return render(request, 'todo/task_detail.html', {\n            'task': task,\n        })\n\n\nclass TaskUpdateView(View):\n\n    def get(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        return render(request, 'todo/task_update.html', {\n            'task': task,\n            'form': TaskForm(instance=task),\n        })\n\n    def post(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        form = TaskForm(instance=task, data=request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('task-detail', pk=task.pk)\n\n        return self.get(request, pk)\n\n\nclass TaskDeleteView(View):\n\n    def get(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        return render(request, 'todo/task_confirm_delete.html', {\n            'task': task,\n            'form': ConfirmForm(),\n        })\n\n    def post(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        form = ConfirmForm(data=request.POST)\n        if form.is_valid():\n            task.delete()\n            return redirect('task-list')\n\n        return self.get(request, pk)\n</code></pre> <p>Also, let's not forget to make our urls.py call <code>as_view()</code>:</p> <pre><code># todo/urls.py\n\nfrom django.urls import path\n\nfrom .views import TaskListView, TaskDetailView, TaskCreateView, TaskUpdateView, TaskDeleteView\n\n\nurlpatterns = [\n    path('', TaskListView.as_view(), name='task-list'),\n    path('create/', TaskCreateView.as_view(), name='task-create'),\n    path('&lt;int:pk&gt;/', TaskDetailView.as_view(), name='task-detail'),\n    path('update/&lt;int:pk&gt;/', TaskUpdateView.as_view(), name='task-update'),\n    path('delete/&lt;int:pk&gt;/', TaskDeleteView.as_view(), name='task-delete'),\n]\n</code></pre> <p>You can get the full source code on Github</p>"},{"location":"backend/drf/drf-functionbasedviews.html#djangos-generic-cbvs","title":"Django's Generic CBVs","text":"<p>Django's generic CBVs are great for solving common problems like retrieving, creating, modifying, and deleting objects as well as pagination and archive views. They speed up the development process too.</p> <pre><code>from django.views.generic import CreateView\n\n\nclass TaskCreateView(CreateView):\n    model = Task\n    context_object_name = 'task'\n    fields = ('name', 'description', 'is_done')\n    template_name = 'todo/task_create.html'\n</code></pre>"},{"location":"backend/drf/drf-functionbasedviews.html#djangos-built-in-cbv-types","title":"Django's Built-in CBV Types","text":""},{"location":"backend/drf/drf-functionbasedviews.html#reference","title":"Reference","text":"<ul> <li>Django : Class Based Views vs Function Based Views</li> <li>Class Based vs Function Based Views \u2013 Which One is Better to Use in Django?</li> <li>Class-based vs Function-based Views in Django</li> <li>What Are Django\u2019s Class-Based Views and How to Use Them Effectively</li> </ul>"},{"location":"backend/drf/drf-viewsets.html","title":"drf viewsets","text":""},{"location":"backend/drf/drf-viewsets.html#djangorestframework","title":"djangorestframework","text":""},{"location":"backend/drf/drf-viewsets.html#drf-views","title":"DRF Views","text":"<p>The essential component of DRF views is the <code>APIView</code> class, which subclasses Django's <code>View</code> class.</p> <p><code>APIView</code> class is a base for all the views that you might choose to use in your DRF application.</p> <p>Whether it be-</p> <ul> <li>function-based views</li> <li>class-based views</li> <li>mixins</li> <li>generic view classes</li> <li>viewsets</li> </ul> <p>they all use the <code>APIView</code> class.</p> <p></p>"},{"location":"backend/drf/drf-viewsets.html#class-based-views","title":"Class-based Views","text":"<p>Class-based views extend the <code>APIView</code> class. With them, you determine how requests will be handled and which policy attributes you're going to use.</p> <pre><code>from rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass DeleteAllItems(APIView):\n    def delete(self, request):\n        Item.objects.all().delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n</code></pre>"},{"location":"backend/drf/drf-viewsets.html#policy-attributes","title":"Policy Attributes","text":"<p>If you want to override the default settings for your class-based views, you can use <code>policy attributes</code>.</p> <p>In the following example, we changed the permissions and how a response is rendered with the <code>permission_classes</code> and <code>renderer_classes</code> policy attributes: </p><pre><code>from rest_framework.permissions import IsAuthenticated\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass ItemsNotDone(APIView):\n\n    permission_classes = [IsAuthenticated]  # policy attribute\n    renderer_classes = [JSONRenderer]       # policy attribute\n\n    def get(self, request):\n\n        user_count = Item.objects.filter(done=False).count()\n        content = {'not_done': user_count}\n\n        return Response(content)\n</code></pre>"},{"location":"backend/drf/drf-viewsets.html#function-based-views","title":"Function-based Views","text":"<p>There are two ways to directly implement <code>APIView</code>: With a function or with a class. If you're writing a view in the form of a function, you'll need to use the <code>@api_view</code> decorator.</p> <p><code>@api_view</code> is a decorator that converts a <code>function-based</code> view into an APIView subclass (thus providing the <code>Response</code> and <code>Request</code> classes). It takes a list of allowed methods for the view as an argument.</p> <pre><code>from rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\n@api_view(['DELETE'])\ndef delete_all_items(request):\n    Item.objects.all().delete()\n    return Response(status=status.HTTP_200_OK)\n</code></pre>"},{"location":"backend/drf/drf-viewsets.html#policy-decorators","title":"Policy Decorators","text":"<p>If you want to override the default settings for your function-based view, you can use policy decorators. You can use one or multiple of the following</p> <ul> <li><code>@renderer_classes</code></li> <li><code>@parser_classes</code></li> <li><code>@authentication_classes</code></li> <li><code>@throttle_classes</code></li> <li><code>@permission_classes</code></li> </ul> <p>Those decorators correspond to APIView subclasses. Because the <code>@api_view</code> decorator checks if any of the following decorators are used, they need to be added below the <code>api_view</code> decorator.</p> <pre><code>from rest_framework.decorators import api_view, permission_classes, renderer_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.response import Response\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])  # policy decorator\n@renderer_classes([JSONRenderer])       # policy decorator\ndef items_not_done(request):\n    user_count = Item.objects.filter(done=False).count()\n    content = {'not_done': user_count}\n\n    return Response(content)\n</code></pre>"},{"location":"backend/drf/drf-viewsets.html#viewsets","title":"ViewSets","text":"<p>A ViewSet class is simply a type of <code>class-based View</code>.</p> <p>There are four types of ViewSets, from the most basic to the most powerful:</p> <ol> <li>ViewSet</li> <li>GenericViewSet</li> <li>ReadOnlyModelViewSet</li> <li>ModelViewSet</li> </ol>"},{"location":"backend/drf/drf-viewsets.html#reference","title":"Reference","text":"<ul> <li>Django REST Framework Views - ViewSets</li> <li>viewsets - django-rest-framework.org</li> </ul>"},{"location":"backend/drf/python-microservices.html","title":"python microservices","text":""},{"location":"backend/drf/python-microservices.html#python-questions","title":"Python Questions","text":""},{"location":"backend/drf/python-microservices.html#topics","title":"Topics","text":"<ul> <li>What are Microservices?</li> <li>Project Introduction</li> <li>Django Setup</li> <li>Adding Docker Files</li> <li>Connect Django with MySQL with Docker</li> <li>Models &amp; Serializers</li> <li>Rest APIs with ViewSets</li> <li>User Endpoint with APIView</li> <li>Flask Setup with Docker</li> <li>Connect Flask with Mysql</li> <li>Models</li> <li>Flask Migrations</li> <li>RabbitMQ</li> <li>Django Producer and Consumer</li> <li>Flask Producer and Consumer</li> <li>Queue Service</li> <li>Data Consistency</li> <li>Internal Http Requests</li> <li>Finishing the python apps</li> <li>React Setup</li> <li>Products CRUD</li> <li>Completing the Main App</li> </ul> <ul> <li>Learn About Python Microservices - freecodecamp</li> <li>Python Microservices Web App - Full Course (youtube)</li> <li>Microservices in Python: Django, RabbitMQ and Pika</li> <li>Building Scalable Applications with Django, Celery, and RabbitMQ: A Step-by-Step Guide</li> </ul>"},{"location":"backend/fastAPI/fast-api.html","title":"Fast API","text":"<p>FastAPI targets development of web APIs. FastAPI was mainly designed to build APIs, and its default input is <code>JSON</code>. FastAPI itself does not include a web server but recommends <code>Uvicorn</code>.</p> <pre><code>$ pip install fastapi uvicorn\n</code></pre> <p>You can start <code>Uvicorn</code> and the FastAPI web application in two ways:</p> <ol> <li>externally (or)</li> <li>internally</li> </ol>"},{"location":"backend/fastAPI/fast-api.html#1-to-start-uvicorn-externally-via-the-command-line","title":"1. To start Uvicorn externally, via the command line","text":"<pre><code># Start Uvicorn with the command line\n$ uvicorn hello:app --reload\n\n# The hello refers to the hello.py file, and app is the FastAPI variable name within it.\n</code></pre>"},{"location":"backend/fastAPI/fast-api.html#2-to-start-uvicorn-internally-in-the-application-itself","title":"2. To start Uvicorn internally in the application itself","text":"<pre><code># Start Uvicorn internally\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/hi\")\ndef greet():\n  return \"Hello? World?\"\n\nif __name__ == \"__main__\":\n  import uvicorn\n  uvicorn.run(\"hello:app\", reload=True)\n</code></pre> <p>In either case, that reload tells Uvicorn to restart the web server if hello.py changes.</p>"},{"location":"backend/fastAPI/fast-api.html#test-fastapi-after-installing","title":"Test FastAPI after Installing","text":"<p>To make sure the installation worked, we can open a Python interactive shell and try to import the <code>FastAPI</code> package:</p> <pre><code>$ python\n\n&gt;&gt;&gt; from fastapi import FastAPI\n</code></pre>"},{"location":"backend/fastAPI/fast-api.html#installing-the-httpie-command-line-utility","title":"Installing the HTTPie command-line utility","text":"<ul> <li><code>FastAPI</code> automatic documentation (we'll talk about this later in the book)</li> <li><code>Postman</code>, a GUI tool to perform HTTP requests</li> <li><code>cURL</code>, the well-known and widely used command-line tool to perform   network requests</li> <li><code>HTTPie</code>, a command-line tool aimed at making HTTP   requests with an intuitive syntax, JSON support, and syntax highlighting.</li> </ul> <pre><code># GET\n$ http GET https://603cca51f4333a0017b68509.mockapi.io/todos\n\n#POST\n$ http -v POST https://603cca51f4333a0017b68509.mockapi.io/todos text=\"My new task\"\n\n#\n$ http -v GET https://603cca51f4333a0017b68509.mockapi.io/todos \"My-Header: My-Header-Value\"\n</code></pre>"},{"location":"backend/fastAPI/fast-api.html#web-tools","title":"Web Tools","text":"<p>The main Python web tools (FastAPI):</p> <ul> <li><code>FastAPI</code>: The web framework itself</li> <li><code>Uvicorn</code>: An asynchronous web server</li> <li><code>HTTPie</code>: A text web client, similar to curl</li> <li><code>Requests</code>: A synchronous web client package</li> <li><code>HTTPX</code>: A synchronous/asynchronous web client package</li> </ul>"},{"location":"backend/fastAPI/fast-api.html#sqlalchemy","title":"SQLAlchemy","text":"<p>SQLAlchemy is the most popular ORM library and can establish communication between any Python-based application and database platform.</p> <p>This ORM is a boilerplated interface that aims to create a database-agnostic data layer that can connect to any database engine. But compared to other ORMs, SQLAlchemy is DBA-friendly because it can generate optimized native SQL statements.</p> <pre><code>pip install SQLAlchemy\n</code></pre>"},{"location":"backend/fastAPI/fast-api.html#installing-the-database-driver","title":"Installing the database driver","text":"<p>SQLAlchemy will not work without the required database driver. It is mandatory to install the <code>psycopg2</code> dialect since the database of choice is PostgreSQL:</p> <pre><code>pip install psycopg2\n</code></pre>"},{"location":"backend/fastAPI/fast-api.html#reference","title":"Reference","text":"<ul> <li>FastAPI: Modern Python Web Development by Bill Lubanovic</li> </ul>"},{"location":"backend/package/0.draft.html","title":"Draft Package","text":"<p>djangopackages</p> list of django packages <p>When working with Django, there are several essential packages beyond <code>django-debug-toolbar</code> that can enhance your development process, improve security, or provide additional functionality. Here's a list of some essential packages:</p> <p>1. Django Rest Framework (DRF): If you're building RESTful APIs with Django, DRF provides powerful tools for serialization, authentication, and views.</p> <p>2. Celery: Celery is a distributed task queue that can be used for running tasks asynchronously. It's commonly used for background processing, such as sending emails or processing data.</p> <p>3. django-crispy-forms: This package helps you manage Django forms. It allows you to easily control the rendering of forms in your templates.</p> <p>4. django-allauth: If you need user authentication in your Django project, django-allauth provides a flexible and customizable solution with support for social authentication.</p> <p>5. django-cors-headers: If you're building a backend that serves APIs consumed by frontend applications, CORS (Cross-Origin Resource Sharing) headers can be necessary. This package simplifies configuring CORS headers in your Django application.</p> <p>6. django-environ: It simplifies handling environment variables in your Django project, making it easier to manage settings across different environments (development, staging, production, etc.).</p> <p>7. django-filter: This package provides a simple way to filter queryset dynamically in your Django views, especially useful when dealing with RESTful APIs.</p> <p>8. django-ckeditor: If you need a rich text editor in your Django application, django-ckeditor integrates CKEditor into your forms.</p> <p>9. django-debug-toolbar-template-timings: This is an extension for django-debug-toolbar that adds template rendering times to the toolbar, helping you identify performance bottlenecks.</p> <p>10. django-extensions: This package provides various extensions for Django, including management commands, model mixins, and template tags, which can boost productivity during development.</p> <p>11. django-redis: If you're using Redis with Django (for caching, session storage, etc.), django-redis provides a simple way to integrate Redis into your Django project.</p> <p>12. django-webpack-loader: If you're using Webpack to manage your frontend assets, django-webpack-loader can help you integrate Webpack with Django's template engine.</p> <p>These are just a few examples of essential packages for Django development. Depending on your specific project requirements, you may find additional packages that suit your needs. Always remember to review a package's documentation and community support before integrating it into your project.</p>"},{"location":"backend/package/0.draft.html#modules-vs-libraries-vs-packages-in-django","title":"Modules vs Libraries vs Packages in django","text":""},{"location":"backend/package/0.draft.html#reference","title":"Reference","text":"<ul> <li>9 Django Packages That Every Web Development Project Needs</li> <li>10 Essential Django Packages Every Developer Should Know</li> <li>14 Django packages you should know</li> <li>Top 10 Django Packages That Every Developer Should Use </li> <li>Essential Python Packages Every Django Developer Should Know</li> <li>Top 10 Django Packages Every Developer Should Know</li> </ul>"},{"location":"backend/package/dj-rest-auth.html","title":"dj-rest-auth","text":"<p><code>dj-rest-auth</code> package</p> <p>First we will add log in, log out, and password reset API endpoints. These come out-of-the-box with the popular <code>dj-rest-auth</code> package.</p>"},{"location":"backend/package/dj-rest-auth.html#step-1-installation","title":"Step 1: Installation","text":"<pre><code>pip install dj-rest-auth==2.1.11\n</code></pre>"},{"location":"backend/package/dj-rest-auth.html#step-2-updated-installed_apps","title":"Step 2: Updated <code>INSTALLED_APPS</code>","text":"<p>Add the new app to the <code>INSTALLED_APPS</code> config in our <code>django_project/settings.py</code> file.</p> settings.py<pre><code>INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n\n    # 3rd-party apps\n    \"rest_framework\",\n    \"corsheaders\",\n    \"rest_framework.authtoken\",\n    \"dj_rest_auth\", # new\n\n    # Local\n    \"accounts.apps.AccountsConfig\",\n    \"posts.apps.PostsConfig\",\n]\n</code></pre>"},{"location":"backend/package/dj-rest-auth.html#step-3-update-urlspy","title":"Step 3: Update <code>urls.py</code>","text":"<p>Update our <code>django_project/urls.py</code> file with the <code>dj_rest_auth</code> package. We\u2019re setting the URL routes to <code>api/v1/dj-rest-auth</code>. Make sure to note that URLs should have a dash <code>-</code> not an underscore <code>_</code>, which is an easy mistake to make.</p> urls.py<pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/v1/\", include(\"posts.urls\")),\n    path(\"api-auth/\", include(\"rest_framework.urls\")),\n    path(\"api/v1/dj-rest-auth/\", include(\"dj_rest_auth.urls\")), # new\n]\n</code></pre> <p>And we\u2019re done! If you have ever tried to implement your own user authentication endpoints, it is truly amazing how much time and headache <code>dj-rest-auth</code> saves for us. Now we can spin up the server to see what <code>dj-rest-auth</code> has provided.</p> <p>Run the server</p> <pre><code>python manage.py runserver\n</code></pre> <p>API Log In Endpoint</p> <pre><code># Login\nhttp://127.0.0.1:8000/api/v1/dj-rest-auth/login/\n\n# Logout\nhttp://127.0.0.1:8000/api/v1/dj-rest-auth/logout/\n\n# Password Reset\nhttp://127.0.0.1:8000/api/v1/dj-rest-auth/password/reset\n\n# Password Reset Confirm\nhttp://127.0.0.1:8000/api/v1/dj-rest-auth/password/reset/confirm\n</code></pre>"},{"location":"backend/package/dj-rest-auth.html#reference","title":"Reference","text":"<ul> <li>Django for APIs by William S. Vincent, page number: 140</li> </ul>"},{"location":"backend/package/django-allauth.html","title":"django-allauth","text":"<p>User Registration</p> <p>Next up is our user registration, or sign up, endpoint. Traditional Django does not ship with built-in views or URLs for user registration and neither does Django REST Framework. Which means we need to write our own code from scratch; a somewhat risky approach given the seriousness\u2013 and security implications\u2013of getting this wrong.</p> <p>A popular approach is to use the third-party package <code>django-allauth</code> which comes with user registration as well as a number of additional features to the Django auth system such as social authentication via Facebook, Google, Twitter, etc.</p> <p>If we add <code>dj_rest_auth.registration</code> from the <code>dj-rest-auth</code> package then we have user registration endpoints too!</p>"},{"location":"backend/package/django-allauth.html#step-1-install-django-allauth","title":"Step 1: Install <code>django-allauth</code>","text":"<pre><code>pip install django-allauth~=0.48.0\n</code></pre> <p>Then update our <code>INSTALLED_APPS</code> setting. We must add several new configs:</p> <ul> <li><code>django.contrib.sites</code></li> <li><code>allauth</code></li> <li><code>allauth.account</code></li> <li><code>allauth.socialaccount</code></li> <li><code>dj_rest_auth.registration</code></li> </ul> <pre><code>INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"django.contrib.sites\", # new\n\n    # 3rd-party apps\n    \"rest_framework\",\n    \"corsheaders\",\n    \"rest_framework.authtoken\",\n    \"allauth\", # new\n    \"allauth.account\", # new\n    \"allauth.socialaccount\", # new\n    \"dj_rest_auth\",\n    \"dj_rest_auth.registration\", # new\n\n    # Local\n    \"accounts.apps.AccountsConfig\",\n    \"posts.apps.PostsConfig\",\n]\n</code></pre> <p><code>django-allauth</code> needs to be added to the <code>TEMPLATES</code> configuration after existing context processors as well as setting the <code>EMAIL_BACKEND</code> to console and adding a <code>SITE_ID</code> of 1.</p> settings.py<pre><code>TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n                \"django.template.context_processors.request\", # new\n            ],\n        },\n    },\n]\n\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\" # new\nSITE_ID = 1 # new\n</code></pre> <p>The email back-end config is needed since by default an email will be sent when a new user is registered, asking them to confirm their account. Rather than also set up an email server, we will output the emails to the console with the <code>console.EmailBackend</code> setting.</p> <p><code>SITE_ID</code> is part of the built-in Django \u201csites\u201d framework97 , which is a way to host multiple websites from the same Django project. We only have one site we are working on here but <code>django-allauth</code> uses the sites framework, so we must specify a default setting.</p> <p>Ok. We\u2019ve added new apps so it\u2019s time to update the database.</p> <pre><code>python manage.py migrate\n</code></pre> <p>Then add a new URL route for registration.</p> <pre><code>    # django_project/urls.py\n    from django.contrib import admin\n    from django.urls import path, include\n    urlpatterns = [\n        path(\"admin/\", admin.site.urls),\n        path(\"api/v1/\", include(\"posts.urls\")),\n        path(\"api-auth/\", include(\"rest_framework.urls\")),\n        path(\"api/v1/dj-rest-auth/\", include(\"dj_rest_auth.urls\")),\n        path(\"api/v1/dj-rest-auth/registration/\", include(\"dj_rest_auth.registration.urls\")), # new\n    ]\n</code></pre> <p>And we\u2019re done. We can run the local server.</p> <pre><code>python manage.py runserver\n</code></pre> <p>There is now a user registration endpoint at:</p> <pre><code>http://127.0.0.1:8000/api/v1/dj-rest-auth/registration/.\n</code></pre>"},{"location":"backend/package/django-allauth.html#conclusion","title":"Conclusion","text":"<p>As a result, a popular, powerful, and secure approach is to rely on the third-party packages dj-rest-auth and django-allauth to minimize the amount of code we have to write from scratch.</p>"},{"location":"backend/package/django-allauth.html#reference","title":"Reference","text":"<ul> <li>Django for APIs by William S. Vincent</li> </ul>"},{"location":"backend/package/django-autoslug.html","title":"django-autoslug","text":"<p><code>django-autoslug</code> library</p> <p>The AutoSlugField is not a built-in field provided by Django itself. It appears to be from a third-party library called django-autoslug. This library provides a field for Django models that automatically generates a unique slug for each instance of the model.</p> <p>To use AutoSlugField, you need to install the django-autoslug library via pip. You can do this by running:</p> Bash<pre><code>pip install django-autoslug\n</code></pre> <p>Once installed, you can import AutoSlugField in your Django model file and use it like any other field. Here's a basic example of how you might use it:</p> Python<pre><code>  from django.db import models\n  from autoslug import AutoSlugField\n\n  class YourModel(models.Model):\n  title = models.CharField(max_length=100)\n  slug = AutoSlugField(populate_from='title', unique=True)\n</code></pre> <p>In this example, the slug field will automatically generate a slug based on the title field whenever a new instance of YourModel is created. The unique=True parameter ensures that each generated slug is unique within the database.</p>"},{"location":"backend/package/django-debug-toolbar.html","title":"django-debug-toolbar","text":"<p>Abstract</p> <ul> <li>debug toolbar :youtube</li> <li>official doc debug</li> </ul> Django Settings Exampleprod vs local in settings.pyDJANGO_SETTINGS_MODULE <pre><code>if settings.DEBUG:\n    import debug_toolbar\n\n    urlpatterns += [\n        path('__debug__/', include(debug_toolbar.urls)),\n    ]\n\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n\n#or\n\nif settings.DEBUG:\n    import debug_toolbar\n    urlpatterns = [\n        path('__debug__/', include(debug_toolbar.urls)),\n    ] + urlpatterns\n</code></pre> <p>Separating Django settings for production and local development environments is a common practice to ensure that sensitive information (like database credentials, secret keys, debug mode, etc.) used in production remains secure and different from those used in development. Here's how a senior programmer might typically approach this:</p> <p>1. Create Separate Settings Files: The senior programmer would typically create separate <code>settings.py</code> files for each environment.</p> <p>For example:</p> <ul> <li>settings.py: Main settings file containing common settings.</li> <li>settings_production.py: Settings specific to the production environment.</li> <li>settings_local.py: Settings specific to the local development environment.</li> </ul> <p>2. Common Settings: Keep common settings in the main <code>settings.py</code> file. These are settings that are shared between both production and local environments.</p> <p>3. Environment-Specific Settings: Place environment-specific settings in their respective files (<code>settings_production.py</code> for production and <code>settings_local.py</code> for local development). This includes sensitive information like database credentials, secret keys, debug mode settings, etc.</p> <p>4. Use Environment Variables: Instead of hardcoding sensitive information directly into the settings files, utilize environment variables. This allows for greater flexibility and security. For instance, you might read the database credentials from environment variables in both <code>settings_production.py</code> and <code>settings_local.py</code>.</p> <p>5. Use Conditional Imports: In <code>settings.py</code>, import the environment-specific settings based on the current environment.</p> <p>For example:</p> <pre><code>import os\n\nif os.environ.get('DJANGO_SETTINGS_MODULE') == 'project.settings_production':\n    from .settings_production import *\nelse:\n    from .settings_local import *\n</code></pre> <p>6. Set DJANGO_SETTINGS_MODULE: Ensure that the DJANGO_SETTINGS_MODULE environment variable is set appropriately for each environment. For production, it should point to <code>project.settings_production</code>, and for local development, it should point to <code>project.settings_local</code>.</p> <p>7. Version Control: Ensure that sensitive settings are not committed to version control repositories. Use techniques like <code>.gitignore</code> to exclude sensitive files or environment variables from being tracked by version control systems.</p> <p>8. Documentation: Clearly document the purpose and usage of each settings file to help other developers understand the project's configuration.</p> <p>By following these practices, the senior programmer ensures that the Django project can seamlessly switch between different environments while maintaining security and consistency across deployments.</p> <p><code>DJANGO_SETTINGS_MODULE</code> is an environment variable used by Django to determine which settings file to use for a particular Django project.</p> <p>When you run a Django management command (such as <code>runserver</code>, <code>makemigrations</code>, <code>migrate</code>, etc.) or deploy a Django application, Django needs to know which settings file to load to configure the project. This is where the <code>DJANGO_SETTINGS_MODULE</code> environment variable comes into play.</p> <p>The value of <code>DJANGO_SETTINGS_MODULE</code> specifies the Python path to the settings module for the Django project. For example, if your project is named <code>myproject</code> and your settings module is named <code>settings</code>, then the value of <code>DJANGO_SETTINGS_MODULE</code> would be <code>myproject.settings</code>.</p> <p>Here's how it works:</p> <ol> <li>When you run a Django management command, Django looks for the <code>DJANGO_SETTINGS_MODULE</code> environment variable.</li> <li>If <code>DJANGO_SETTINGS_MODULE</code> is set, Django loads the settings module specified by its value.</li> <li>If <code>DJANGO_SETTINGS_MODULE</code> is not set, Django falls back to the default settings module (<code>settings.py</code>).</li> </ol> <p>You can set the DJANGO_SETTINGS_MODULE environment variable in various ways:</p> <ul> <li>Manually in your shell or terminal before running Django commands or deploying your application.</li> <li>In your development environment, you might set it in your IDE's configuration or in your virtual environment's activation script.</li> <li>In production environments, it's often set in the server configuration or deployment scripts.</li> </ul> <p>For example, if you're using Bash or a compatible shell, you can set the environment variable like this:</p> <pre><code>export DJANGO_SETTINGS_MODULE=myproject.settings\n</code></pre> <p>And in Windows Command Prompt or PowerShell:</p> <pre><code>set DJANGO_SETTINGS_MODULE=myproject.settings\n</code></pre> <p>Or, you can specify it inline when running Django management commands:</p> <pre><code>python manage.py runserver --settings=myproject.settings\n</code></pre> <p>By setting <code>DJANGO_SETTINGS_MODULE</code> appropriately, you can ensure that Django loads the correct settings for your project in different environments.</p> <ul> <li>Django Settings official doc</li> </ul>"},{"location":"backend/package/jwt-guide.html","title":"jwt installation","text":""},{"location":"backend/package/jwt-guide.html#jwt","title":"jwt","text":""},{"location":"backend/package/jwt-guide.html#virtual-env","title":"Virtual env","text":"<pre><code>$ python -m venv venv\n$ cd venv/Scripts\n$ activate\n</code></pre>"},{"location":"backend/package/jwt-guide.html#installation","title":"Installation","text":"<pre><code>$ pip install django\n\n$ pip install djangorestframework\n$ pip install markdown\n$ pip install django-filter\n\n$ pip install djangorestframework-simplejwt\n\n# pip install python-dotenv\n\n$ pip install mysqlclient\n</code></pre>"},{"location":"backend/package/jwt-guide.html#installed-apps","title":"Installed apps","text":"<pre><code>INSTALLED_APPS = [\n    ...'\n    'rest_framework',\n    'rest_framework_simplejwt',\n    ...\n]\n</code></pre>"},{"location":"backend/package/jwt-guide.html#env-example","title":".env example","text":"<pre><code>SECRET_KEY=\"\"\nDB_NAME=django_db\nDB_USER=root\nDB_PASS=\nDB_HOST=localhost\nDB_PORT=3308\n</code></pre>"},{"location":"backend/package/jwt-guide.html#project-settings","title":"Project Settings","text":"<pre><code># settings.py\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\nSECRET_KEY = os.environ.get('SECRET_KEY')\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': os.environ.get('DB_NAME'), #here\n        'USER': os.environ.get('DB_USER'), #here\n        'PASSWORD': os.environ.get('DB_PASS'), #here\n        'HOST': '127.0.0.1',\n        'PORT': '3306',\n        'OPTIONS': {'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\"},\n    }\n}\n\n# Add\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n}\n</code></pre>"},{"location":"backend/package/jwt-guide.html#reference","title":"Reference","text":"<ul> <li>Django Environment - python-dotenv</li> <li>python-dotenv</li> <li>Generating Secret key in django app</li> <li>mkdocs dropdown - github</li> <li>mkdocs dropdown - stackoverflow </li> </ul>"},{"location":"backend/package/jwt-installation.html","title":"jwt guide","text":""},{"location":"backend/package/jwt-installation.html#jwt","title":"JWT","text":""},{"location":"backend/package/jwt-installation.html#django","title":"Django","text":"<pre><code>// Installation\n\n$ pip install django\n</code></pre>"},{"location":"backend/package/jwt-installation.html#django-rest-framework","title":"Django REST framework","text":"<pre><code>// Installation\n\n$ pip install djangorestframework\n$ pip install markdown\n$ pip install django-filter \n\n$ pip install djangorestframework, markdown, django-filter\n</code></pre>"},{"location":"backend/package/jwt-installation.html#installed-apps","title":"Installed Apps","text":"<pre><code>// you have to add 'rest_framework' to your INSTALLED_APPS setting.\n\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n]\n</code></pre>"},{"location":"backend/package/jwt-installation.html#simple-jwt","title":"Simple JWT","text":"<p>Simple JWT provides a JSON Web Token authentication backend for the Django REST Framework. A JSON Web Token authentication plugin for the Django REST Framework.</p>"},{"location":"backend/package/jwt-installation.html#_1","title":"jwt guide","text":"<pre><code>// Installation\n\n$ pip install djangorestframework-simplejwt\n</code></pre> <pre><code>// add rest_framework_simplejwt to INSTALLED_APPS.\n\nINSTALLED_APPS = [\n    ...\n    'rest_framework_simplejwt',\n    ...\n]\n</code></pre>"},{"location":"backend/package/jwt-installation.html#project-configuration","title":"Project Configuration","text":"<p>Then, your django project must be configured to use the library. In <code>settings.py</code>, add <code>rest_framework_simplejwt.authentication.JWTAuthentication</code> to the list of authentication classes:</p> <pre><code>REST_FRAMEWORK = {\n    ...\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        ...\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n    ...\n}\n</code></pre> <p>Also, in your root <code>urls.py</code> file (or any other url config), include routes for Simple JWT\u2019s <code>TokenObtainPairView</code> and <code>TokenRefreshView</code> views:</p> <pre><code>from rest_framework_simplejwt.views import (\n    TokenObtainPairView,\n    TokenRefreshView,\n)\n\nurlpatterns = [\n    ...\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    ...\n]\n</code></pre> <ul> <li>Simple JWT</li> </ul>"},{"location":"backend/package/python-dotenv.html","title":"python dotenv","text":""},{"location":"backend/package/python-dotenv.html#python-dotenv","title":"Python-dotenv","text":"<p>Python-dotenv reads key-value pairs from a .env file and can set them as environment variables</p> <pre><code>$ pip install python-dotenv\n</code></pre> <pre><code>// .env.example\n</code></pre> <ul> <li>python-dotenv</li> </ul>"},{"location":"backend/package/python-mysqlclient.html","title":"mysqlclient","text":""},{"location":"backend/package/python-mysqlclient.html#_1","title":"mysqlclient","text":"<pre><code>$ pip install mysqlclient\n</code></pre> <ul> <li>mysqlclient </li> </ul>"},{"location":"backend/package/tinymce.html","title":"tinymce","text":"<pre><code># 1: Install django-tinymce using pip\npip install django-tinymce\n\n# 2: Add tinymce to INSTALLED_APPS in settings.py for your project:\n\nINSTALLED_APPS = (\n    ...\n    'tinymce',\n    ...\n)\n\n# 3: Add tinymce.urls to urls.py for your project:\n\nurlpatterns = patterns('',\n    ...\n    path('tinymce/', include('tinymce.urls')),\n    ...\n)\n</code></pre>"},{"location":"backend/package/tinymce.html#reference","title":"Reference","text":"<ul> <li>tinymce: Django Editor</li> </ul>"},{"location":"career/developer-plan.html","title":"Developer","text":"<p>The Secret to Learning about Technology Quickly and Continuously</p> <p>main topic</p> <ul> <li>Knowledge versus skills</li> <li>Finding focus and priorities</li> <li>Applying just-in-time learning</li> <li>Practicing deliberately to learn a tech</li> <li>Implementing important good habits</li> </ul>"},{"location":"career/developer-plan.html#knowledge-versus-skills","title":"Knowledge versus skills","text":"Info <p>When you learn a new skill, think about how you will apply that skill. Actively search for a way to incorporate your new skill into your day-to-day coding projects. Using the skills you gain right away will help you to build the muscle memory for the new skill and assimilate it into your library of knowledge.</p> <p>Have you ever spent hours learning something that you are not using in a project right now, and a few months later, when you need it, you remember next to nothing, and have to refresh it? And does that refreshing feel like almost having to relearn everything? There is a reason for that feeling and it is the difference between knowledge and skills.</p> <p>An effective way to think about knowledge is that it is a collection of memories that are disconnected from each other. Because they are disconnected, it takes some time for you to remember those things when you need them. And once you recover one memory, it does not help you recover other memories. This is like learning about the history of bicycles and how they were invented. Although you may love bikes, it is hard to remember the names and dates and who did what. There is a better way.</p> <p>Have you ever heard the popular saying that goes like this: once you learn how to ride a bicycle, you never forget? This is because riding a bicycle is not knowledge; it\u2019s a skill. An effective way to think about skills is that they are collections of memories that are connected to each other. Once you recover one of those memories, they all come together and are accessed in a much faster way by your brain.</p> <p>That is why, once you acquire the skill, you just sit on the bicycle and go. You do not need to remember each fact about riding a bike. It just comes to you, without effort. The most important thing about skills for you to keep in mind is that although you can acquire knowledge by reading or listening, you can only develop skills by doing. There is no amount of reading, listening, watching videos, or following amazing tutorials that will ever get you to ride a bicycle. The only way is to go down to the park and try, fall, try again, and eventually, do it.</p> <p>This is the same for every developer skill that you want to master. To really learn something, you must do things, instead of simply studying to acquire the knowledge.</p> <p>When you write your CV or resume or prepare your LinkedIn profile, do you list in it all the books you read and YouTube videos you watched? Do you list all the knowledge you have? Or do you put more focus on the projects you worked on and the experiences you acquired?</p> <p>Even when just starting, you will clearly be better off including everything you did, even if they were just personal and volunteer projects, because, at the end of the day, it is your experience and skills that really matter.</p> <p></p>"},{"location":"career/developer-plan.html#reference","title":"Reference","text":"<ul> <li>Developer Career Masterplan by Heather VanCura, Bruno Souza - packt</li> </ul>"},{"location":"career/python-certification.html","title":"Certification","text":"<p>PCEP\u2122 \u2013 Certified Entry-Level Python Programmer</p> <p></p> <p>...</p>"},{"location":"career/python-certification.html#reference","title":"Reference","text":"<ul> <li>python certification: pcep</li> </ul>"},{"location":"career/study-technique.html","title":"Roadmap","text":""},{"location":"career/study-technique.html#study-technique","title":"Study technique","text":"<ol> <li>Spaced Repetition    Spaced repetition, sometimes called <code>spaced practice</code>, <code>interleaved practice</code>, or <code>spaced retrieval</code>, is a study method that involves separating your study sessions into spaced intervals.</li> </ol> <p>One of the most popular examples of spaced repetition algorithms is <code>Anki</code>, based on another popular algorithm, <code>SuperMemo</code>.</p> <p></p>"},{"location":"career/study-technique.html#space-repetition","title":"space-repetition","text":""},{"location":"career/study-technique.html#reference","title":"Reference","text":"<ul> <li>The 7 Best Study Methods for All Types of Students</li> </ul>"},{"location":"career/tech-stack.html","title":"Tech Stack","text":""},{"location":"career/tech-stack.html#react-and-django-stack","title":"React and Django Stack","text":"Django StackReact Stack <pre><code>Rest stack for Django:\n\n- drf\n- Celery\n- Postgresql\n- redis\n- elastic search\n\n- rabbitmq\n- graphene\n\nDjango + Graphene =&gt; Apollo + React\n</code></pre> <pre><code>- Razzle JS,\n- Apollo,\n- react-loadable,\n- helmet,\n- react-router\n- redux\n</code></pre>"},{"location":"career/tech-stack.html#testing-framework","title":"Testing Framework","text":"React Testing FrameworksDjango Testing Frameworks <ol> <li> <p>Jest:</p> <p>Jest is a widely-used JavaScript testing framework that works seamlessly with React applications. It provides features like snapshot testing, mocking, and a test runner. Jest is often the default choice for React projects.</p> <pre><code># For Jest\nnpm install --save-dev jest\n</code></pre> </li> <li> <p>React Testing Library:</p> <p>This library is built on top of DOM Testing Library and provides utilities for testing React components. It encourages testing components as users would interact with them, promoting a more user-centric approach to testing.</p> <pre><code># For React Testing Library\nnpm install --save-dev @testing-library/react @testing-library/jest-dom\n</code></pre> </li> <li> <p>Enzyme:</p> <p>Enzyme is a testing utility for React developed by Airbnb. It provides a set of tools to make it easier to test React components' output and behavior. Enzyme is compatible with Jest and other testing frameworks.</p> <pre><code>npm install --save-dev enzyme enzyme-adapter-react-16 enzyme-to-json\n</code></pre> </li> </ol> <ol> <li> <p>Django Test Framework (built-in):</p> <p>Django comes with its built-in testing framework. It includes support for unit tests, functional tests, and integration tests. Tests are usually placed in a tests module within each Django app.</p> </li> <li> <p>pytest-django:</p> <p>pytest-django is a plugin for the popular Python testing framework pytest. It provides additional functionality for testing Django applications and is known for its concise syntax and powerful fixtures.</p> <pre><code>pip install pytest pytest-django\n</code></pre> </li> </ol>"},{"location":"career/tech-stack.html#integration-testing","title":"Integration Testing:","text":"<ol> <li> <p>Cypress (for React):</p> <p>Cypress is an end-to-end testing framework for web applications. It allows you to write and run integration tests for your React applications. Cypress provides a real-time interactive test runner.</p> <pre><code>npm install --save-dev cypress\n</code></pre> </li> <li> <p>Selenium (for Django):</p> <p>Selenium is a tool for automating web browsers. It can be used for integration testing of Django applications by simulating user interactions with the browser. The Django project itself provides tools like django-selenium to simplify integration with Selenium.</p> <pre><code>pip install selenium\n</code></pre> </li> </ol>"},{"location":"career/tech-stack.html#testing-django-and-react-together","title":"Testing Django and React Together:","text":"<ol> <li> <p>Django Rest Framework Test (for API testing):</p> <p>If your React frontend communicates with a Django backend through a RESTful API, you can use Django Rest Framework Test for testing your API endpoints.</p> </li> <li> <p>TestCafe (for end-to-end testing):</p> <p>TestCafe is a JavaScript end-to-end testing framework that allows you to test web applications in various browsers. It can be used to test the interaction between your React frontend and Django backend.</p> <pre><code>npm install -g testcafe\n</code></pre> </li> <li> <p>Jest-Django (for Jest and Django integration):</p> <p>Jest-Django is a Jest transformer and utility functions for working with Django. It helps when writing tests for JavaScript code that interacts with Django templates or uses Django's static files.</p> <pre><code>npm install --save-dev jest-django\n</code></pre> </li> </ol>"},{"location":"career/tech-stack.html#configuration","title":"Configuration","text":"<p>After installation, you may need to configure the testing frameworks according to your project structure. For example, setting up Jest configurations in a jest.<code>config.js</code> file or configuring pytest with <code>pytest.ini</code>.</p> <p>Remember to consult the official documentation for each testing framework for more detailed configuration and usage instructions. Additionally, make sure your project's dependencies and versions are compatible with the chosen testing tools.</p> Jest Configuration (jest.config.js)pytest Configuration (pytest.ini) <p>Create a <code>jest.config.js</code> file in the root of your project. This file is used to configure Jest. Here's a simple example:</p> jest.config.js<pre><code>module.exports = {\n// Set the test environment (browser-like)\ntestEnvironment: \"jsdom\",\n\n// Extend Jest with testing-library assertions\nsetupFilesAfterEnv: [\"@testing-library/jest-dom/extend-expect\"],\n\n// Ignore specific paths during tests\ntestPathIgnorePatterns: [\"/node_modules/\", \"/build/\"],\n\n// Add more configuration options as needed\n};\n</code></pre> <p>Create a <code>pytest.ini</code> file in the root of your project. This file is used to configure pytest. Here's a basic example:</p> <pre><code>[pytest]\n\n# Set the Django settings module\nDJANGO_SETTINGS_MODULE = your_project.settings\n\n# Enable code coverage for your Django app\naddopts = --cov=your_app_name\n\n# Specify the file naming convention for test files\npython_files = tests.py test_*.py *_tests.py\n</code></pre> <p>Make sure to replace <code>your_project</code> and <code>your_app_name</code> with your actual Django project and app names.</p> <p>These configurations are just starting points, and you might need to customize them based on your project structure and specific needs. Consult the official documentation for Jest and pytest for more advanced configuration options and details.</p>"},{"location":"career/tech-stack.html#additional-tips","title":"Additional Tips:","text":"<p>Jest Configuration for React Projects:</p> <p>If you're working on a React project, you might want to extend Jest to work with Babel for transpiling JSX and ES6 code. Install the necessary packages:</p> <pre><code>npm install --save-dev babel-jest @babel/preset-env @babel/preset-react\n</code></pre> jest.config.jspytest.ini <p>Then, update your <code>jest.config.js</code>:</p> jest.config.js<pre><code>module.exports = {\n// ...other configurations\ntransform: {\n    \"^.+\\\\.jsx?$\": \"babel-jest\", // Transform JSX with Babel\n},\n// ...other configurations\n};\n</code></pre> <p>Pytest Configuration for Django:</p> <p>If you're using pytest with Django, you might want to add additional configurations for Django-related testing:</p> pytest.ini<pre><code>[pytest]\nDJANGO_SETTINGS_MODULE = your_project.settings\n\n# Specify Django settings module during tests\naddopts = --cov=your_app_name --ds=your_project.settings\n\npython_files = tests.py test_*.py *_tests.py\n</code></pre> <p>Adjust the file names and paths according to your project structure.</p> <p>Remember to install the necessary Python packages for pytest and code coverage:</p> <pre><code>pip install pytest pytest-django pytest-cov\n</code></pre> <p>Customize these configurations based on your project's needs, and consult the documentation for Jest and pytest for more in-depth details and options.</p> <p>Notes</p> <p>When setting up testing for a project, it's essential to consider the specific requirements and preferences of your team. The mentioned frameworks and libraries are widely used and well-documented, making them good choices for testing React and Django applications.</p>"},{"location":"career/tech-stack.html#reference","title":"Reference","text":"<ul> <li>django stack</li> </ul>"},{"location":"frontend/redux-middleware.html","title":"redux middleware","text":"<p>Redux Middleware is code that lets us intercept redux actions before they reach the reducer. <code>redux-thunk</code> is an example of Redux Middleware, along with other popular <code>redux</code> libraries like <code>redux-logger</code> , <code>redux-promise-middleware</code> , and <code>redux-saga</code> (an alternative to <code>redux-thunk</code> ).</p> <p></p>"},{"location":"frontend/redux-middleware.html#redux-thunk-gives-redux-side-effects","title":"Redux Thunk Gives Redux Side-Effects","text":"<p>In <code>redux</code>, actions creators are functions that return an action, which is a plain javascript objects with a <code>type</code> property.</p> <ul> <li><code>redux-thunk</code> is a Redux Middleware that lets your action creators return a function called a thunk, instead of an action. </li> <li>This thunk can return an action when invoked but it also has access to the Redux store's <code>dispatch</code> function, meaning it can also dispatch other actions. </li> <li>Typically, API calls are invoked inside these thunks and different actions are dispatched depending on these API responses.</li> </ul> <p>For example, below are two action creators, the first returns a plain redux action. The second returns a <code>thunk</code>, thanks to <code>redux-thunk</code>.</p> <pre><code>// action creators\n\n// Action Creator returns action\nloadUser = (userData) =&gt; ({\n  type: \"LOAD_USER_DATA\", userData\n})\n\n/* \n  Action Creator which returns function which dispatches other actions\n*/\nfetchUser = (usersUrl) =&gt; (dispatch) =&gt; {\n  dispatch({ type: \"DISPLAY_LOADING_SCREEN\" })\n\n  return fetch(usersUrl)\n    .then(response =&gt; response.json())\n    .then((json) =&gt; {\n      if (json.success) {\n        dispatch({ type: \"LOAD_USER_DATA\", json.userData })\n      } else {\n        dispatch({ type: \"LOAD_USER_FAILED\" })\n      }\n    })\n}\n</code></pre>"},{"location":"frontend/redux-middleware.html#summary","title":"Summary","text":"<ul> <li><code>redux-thunk</code> lets us create actions which are functions that can dispatch other functions instead of just objects.</li> <li><code>redux-thunk</code> is an example of Redux Middleware and as such, needs to adhere to the Redux Middleware signature of <code>validMiddleware =&gt; (store) =&gt; (next) =&gt; (action)</code></li> <li>The core logic of <code>redux-thunk</code> is essentially a simple if statement that checks if the action is a thunk (ie. a function) and invokes it if it is. By default, it exports the Middleware with no <code>extraArgument</code> but it then attaches the <code>createThunkMiddleware</code> function onto the exported Middleware to be used if needed.</li> </ul>"},{"location":"frontend/redux-middleware.html#reference","title":"Reference","text":"<ul> <li>Understanding redux thunk</li> <li>What is the use of middleware Redux thunk ?</li> </ul>"},{"location":"frontend/rtk-guide.html","title":"rtk guide","text":"<ul> <li>official redux rtk</li> <li>Understanding Redux Toolkit</li> <li>reduxt toolkit</li> </ul>"},{"location":"frontend/slides.html","title":"Frontend","text":""},{"location":"frontend/slides.html#presentation","title":"Presentation","text":""},{"location":"frontend/package/intro.html","title":"Introduction","text":"<p>JavaScript utility libraries commonly used in React development.</p> <ul> <li> <p><code>lodash</code>:</p> <p><code>Lodash</code> is a widely used utility library in the JavaScript ecosystem, and it provides a comprehensive set of functions for working with arrays, objects, strings, and more.</p> <pre><code> // 1. Installation\n npm install lodash\n\n // 2. Importing\n import _ from 'lodash'; // Import the entire library\n // or\n import { map, filter, debounce } from 'lodash'; // Import specific functions\n\n // Example Debounce\n import _ from 'lodash';\n\n const debouncedFunction = _.debounce((value) =&gt; {\n     console.log('Debounced:', value);\n }, 300);\n</code></pre> </li> <li> <p>Underscore.js:</p> <p><code>Underscore.js</code> is similar to Lodash and provides a set of utility functions for working with arrays, objects, functions, and more. It predates Lodash and served as an inspiration for it.</p> </li> <li> <p>axios:</p> <p><code>axios</code> is a promise-based HTTP client that simplifies making HTTP requests. It is commonly used for handling API requests in React applications.</p> </li> <li> <p>React Query:</p> <p><code>React Query</code> is a library for managing, caching, and synchronizing data in React applications. It provides hooks for fetching and updating data with a focus on simplicity and performance.</p> </li> <li> <p>Ramda:</p> <p><code>Ramda</code> is a functional programming library that focuses on immutability and functional composition. It provides functions for functional programming paradigms and is suitable for projects that adopt a more functional style.</p> </li> <li> <p>Immer:</p> <p><code>Immer</code> is a library that simplifies state management by enabling a more convenient way to work with immutable data structures. It is often used in combination with React's state to make state updates more concise.</p> </li> </ul>"},{"location":"frontend/package/antd/index.html","title":"Intro","text":""},{"location":"frontend/package/antd/index.html#and","title":"and","text":"<pre><code>$ pnpm add antd\n$ pnpm add @ant-design/icons\n</code></pre>"},{"location":"frontend/package/antd/antd-form-validator.html","title":"Antd Form Validation","text":""},{"location":"frontend/package/antd/antd-form-validator.html#antd-form-validation","title":"Antd Form Validation","text":"<p><code>Components/modals/quickAddPerson.js</code></p> BasicAdvanced <pre><code>const validateEmail = (_, value) =&gt; {\n    // Basic email validation using a regular expression\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n    if (!value || emailRegex.test(value)) {\n        return Promise.resolve();\n    }\n\n    return Promise.reject(\"Invalid email address\");\n};\n\n&lt;Form.Item\n    name=\"email\"\n    label=\"Email\"\n    rules={[\n        {\n            required: true,\n            message: \"Please enter your email\",\n        },\n        {\n            validator: validateEmail,\n        },\n    ]}\n&gt;\n    &lt;Input placeholder=\"Email\" /&gt;\n&lt;/Form.Item&gt;\n</code></pre>"},{"location":"frontend/package/antd/antd-form.html","title":"Antd Form","text":"<p>Ant Design provides the <code>form.getFieldValue</code> and <code>form.setFieldsValue</code> methods to get and set form field values, respectively</p> jsx<pre><code>const [form] = Form.useForm();\n\nconst otherFieldValue = form.getFieldValue(\"otherField\");\n\nform.setFieldsValue({\n    currentField: /* New value based on custom logic */,\n});\n\nuseEffect(() =&gt; {\n    // Set default values based on external data\n    form.setFieldsValue({\n      username: externalData.username,\n      email: externalData.email,\n    });\n}, [externalData, form]);\n</code></pre>"},{"location":"frontend/package/antd/controlled-components.html","title":"Controlled Component","text":""},{"location":"frontend/package/antd/controlled-components.html#controlled-components-with-form-component","title":"Controlled Components with Form Component:","text":"<p>Ant Design provides a <code>Form</code> component that simplifies form handling. You can use controlled components and the <code>Form</code> component together to manage form state and validation easily.</p> jsx<pre><code>import { Form, Input, Button } from \"antd\";\nimport { useState } from \"react\";\n\nfunction MyForm() {\n  const [form] = Form.useForm();\n  const [formData, setFormData] = useState({});\n\n  const onFinish = (values) =&gt; {\n    console.log(\"Form submitted:\", values);\n    // Perform further actions with form data\n  };\n\n  return (\n    &lt;Form form={form} onFinish={onFinish}&gt;\n      &lt;Form.Item name=\"username\" label=\"Username\"&gt;\n        &lt;Input /&gt;\n      &lt;/Form.Item&gt;\n      &lt;Form.Item name=\"password\" label=\"Password\"&gt;\n        &lt;Input.Password /&gt;\n      &lt;/Form.Item&gt;\n      &lt;Form.Item&gt;\n        &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n          Submit\n        &lt;/Button&gt;\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n  );\n}\n</code></pre>"},{"location":"frontend/package/lodash/debounce.html","title":"debounce","text":"<p><code>npm install lodash</code></p> jsx<pre><code>import React, { useState, useEffect } from \"react\";\nimport { Select } from \"antd\";\nimport debounce from \"lodash/debounce\";\n\nconst { Option } = Select;\n\nconst DebouncedSelect = () =&gt; {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const debouncedSearch = debounce((value) =&gt; {\n    // Your search logic here, e.g., making an API call\n    console.log(\"Searching for:\", value);\n  }, 300); // 300ms debounce delay\n\n  useEffect(() =&gt; {\n    debouncedSearch(searchTerm);\n  }, [searchTerm, debouncedSearch]);\n\n  const handleSearch = (value) =&gt; {\n    setSearchTerm(value);\n  };\n\n  return (\n    &lt;Select\n      showSearch\n      onSearch={handleSearch}\n      style={{ width: 200 }}\n      placeholder=\"Search...\"\n    &gt;\n      &lt;Option value=\"1\"&gt;Option 1&lt;/Option&gt;\n      &lt;Option value=\"2\"&gt;Option 2&lt;/Option&gt;\n      &lt;Option value=\"3\"&gt;Option 3&lt;/Option&gt;\n    &lt;/Select&gt;\n  );\n};\n\nexport default DebouncedSelect;\n</code></pre>"},{"location":"frontend/package/lodash/debounce.html#debounce-with-hoc","title":"Debounce with Hoc","text":"<p>separate the debounce logic and the HOC into separate files for better organization</p> 1. Debounce utility file2. HOC file3. Component file debounce.js<pre><code>// debounce.js\nconst debounce = (func, delay) =&gt; {\n    let timeoutId;\n    return function (...args) {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() =&gt; func.apply(this, args), delay);\n    };\n};\n\nexport default debounce;\n</code></pre> withDebounce.js<pre><code>import React from 'react';\nimport debounce from './debounce';\n\nconst withDebounce = (WrappedComponent) =&gt; {\n    return class WithDebounce extends React.Component {\n        debouncedFunction = debounce((...args) =&gt; {\n            console.log('Debounced function called with args:', args);\n        }, 500); // 500ms debounce delay\n\n        render() {\n            return (\n                &lt;WrappedComponent\n                    {...this.props}\n                    onDebouncedAction={this.debouncedFunction}\n                /&gt;\n            );\n        }\n    };\n};\n\nexport default withDebounce;\n</code></pre> MyComponent.js<pre><code>import React from 'react';\nimport withDebounce from './withDebounce';\n\nconst MyComponent = ({ onDebouncedAction }) =&gt; {\n    const handleClick = () =&gt; {\n        onDebouncedAction('Click event');\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;button onClick={handleClick}&gt;Click me&lt;/button&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default withDebounce(MyComponent);\n</code></pre> <p>Now you can import and use the <code>MyComponent</code> in your main application file:</p> App.js<pre><code>import React from \"react\";\nimport MyComponent from \"./MyComponent\";\n\nconst App = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;MyComponent /&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre> <p>This structure helps maintain a clean separation of concerns, making each file focused on its specific responsibility. The debounce utility is isolated in its own file, and the HOC is defined separately, promoting code modularity and reusability.</p>"},{"location":"frontend/package/tinymce/tinymce.html","title":"Intro","text":"<p>TinyMCE is a popular WYSIWYG editor that can be integrated into React applications. To add a template inside the TinyMCE editor in a React project, you can follow these general steps:</p> <ol> <li> <p>Install TinyMCE:     If you haven't already, install the TinyMCE editor in your React project using a package manager like npm or yarn. Here's an example using npm:</p> <pre><code>npm install tinymce\n</code></pre> </li> <li> <p>Import TinyMCE in your React component:     Import TinyMCE in the React component where you want to use the editor.</p> <pre><code>import { Editor } from \"@tinymce/tinymce-react\";\n</code></pre> </li> <li> <p>Configure TinyMCE:     Set up the TinyMCE configuration in your component. This is where you can define the template and other settings.</p> <pre><code>const TinyMCEEditor = () =&gt; {\n  const handleEditorChange = (content, editor) =&gt; {\n    // Handle content changes here\n    console.log(\"Content:\", content);\n  };\n\n  const templateContent = `\n    &lt;p&gt;This is a template content&lt;/p&gt;\n`;\n\n  return (\n    &lt;Editor\n      apiKey=\"YOUR_API_KEY\" // You can obtain an API key by creating a TinyMCE account\n      initialValue={templateContent}\n      init={{\n        height: 500,\n        menubar: false,\n        plugins: [\n          \"advlist autolink lists link image charmap print preview anchor\",\n          \"searchreplace visualblocks code fullscreen\",\n          \"insertdatetime media table paste code help wordcount\",\n        ],\n        toolbar:\n          \"undo redo | formatselect | bold italic backcolor | \\\n        alignleft aligncenter alignright alignjustify | \\\n        bullist numlist outdent indent | removeformat | help\",\n        content_style:\n          \"body { font-family:Helvetica,Arial,sans-serif; font-size:14px }\",\n      }}\n      onChange={handleEditorChange}\n    /&gt;\n  );\n};\n\nexport default TinyMCEEditor;\n</code></pre> <p>In the above example, templateContent is the initial content of the editor, and you can customize the init object to include the desired plugins, toolbar buttons, and other configurations.</p> </li> <li> <p>Handle Template Insertion:</p> <p>You can provide a button or some other user interaction to insert the template content into the editor. For example, you can add a button that, when clicked, inserts the template content at the current cursor position.</p> <pre><code>const insertTemplate = () =&gt; {\n  const editor = tinymce.activeEditor;\n  if (editor) {\n    editor.insertContent(templateContent);\n  }\n};\n\n// ...\n\n&lt;button onClick={insertTemplate}&gt;Insert Template&lt;/button&gt;;\n</code></pre> <p>Make sure to adapt the code according to your specific requirements and integrate it seamlessly into your React application. Adjust the TinyMCE configuration and event handlers based on your needs.</p> </li> </ol>"},{"location":"frontend/pattern/compound-pattern.html","title":"Compound Pattern","text":"<p>Let's create a compound component for a <code>Modal</code> that can be used to display various types of content. The compound components will include <code>Modal</code>, <code>ModalHeader</code>, <code>ModalBody</code>, and <code>ModalFooter</code>.</p> Modal.jsModalHeader.jsModalBody.jsModalFooter.js <pre><code>import React, { useState } from 'react';\n\nconst Modal = ({ children, isOpen, onClose }) =&gt; {\n    return isOpen ? (\n        &lt;div className=\"modal-overlay\" onClick={onClose}&gt;\n            &lt;div className=\"modal\" onClick={(e) =&gt; e.stopPropagation()}&gt;\n                {children}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    ) : null;\n};\n\nexport default Modal;\n</code></pre> <pre><code>import React from 'react';\n\nconst ModalHeader = ({ children }) =&gt; {\n    return &lt;div className=\"modal-header\"&gt;{children}&lt;/div&gt;;\n};\n\nexport default ModalHeader;\n</code></pre> <pre><code>import React from 'react';\n\nconst ModalBody = ({ children }) =&gt; {\n    return &lt;div className=\"modal-body\"&gt;{children}&lt;/div&gt;;\n};\n\nexport default ModalBody;\n</code></pre> <pre><code>import React from 'react';\n\nconst ModalFooter = ({ children }) =&gt; {\n    return &lt;div className=\"modal-footer\"&gt;{children}&lt;/div&gt;;\n};\n\nexport default ModalFooter;\n</code></pre> <p>Now, let's use these components in an example application:</p> App.js<pre><code>// App.js\nimport React, { useState } from \"react\";\nimport Modal from \"./Modal\";\nimport ModalHeader from \"./ModalHeader\";\nimport ModalBody from \"./ModalBody\";\nimport ModalFooter from \"./ModalFooter\";\n\nconst App = () =&gt; {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const openModal = () =&gt; {\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () =&gt; {\n    setIsModalOpen(false);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Compound Pattern in React - Modal Example&lt;/h1&gt;\n      &lt;button onClick={openModal}&gt;Open Modal&lt;/button&gt;\n\n      &lt;Modal isOpen={isModalOpen} onClose={closeModal}&gt;\n        &lt;ModalHeader&gt;\n          &lt;h2&gt;Modal Title&lt;/h2&gt;\n        &lt;/ModalHeader&gt;\n        &lt;ModalBody&gt;\n          &lt;p&gt;This is the content of the modal.&lt;/p&gt;\n        &lt;/ModalBody&gt;\n        &lt;ModalFooter&gt;\n          &lt;button onClick={closeModal}&gt;Close&lt;/button&gt;\n        &lt;/ModalFooter&gt;\n      &lt;/Modal&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre> <p>In this example, the <code>Modal</code> component serves as the container for the modal content. The <code>ModalHeader</code>, <code>ModalBody</code>, and <code>ModalFooter</code> components are used within the <code>Modal</code> component to structure and style the different parts of the modal.</p> <p>This compound pattern allows you to create a reusable and flexible modal component by composing smaller components together. Each smaller component focuses on a specific part of the modal, making the code more modular and maintainable.</p>"},{"location":"frontend/pattern/hoc-pattern.html","title":"Hoc Pattern","text":"<p>Higher-Order Components (HOCs) are a design pattern in React that allows the reuse of component logic.</p> <p>A Higher-Order Component is a function that takes a component and returns a new component with additional props or behavior. HOCs are commonly used for cross-cutting concerns such as authentication, logging, and data fetching.</p> <p>Here's an example of a Higher-Order Component using a functional component:</p> withLogging.js (HOC file):MyComponent.jsApp.js jsx<pre><code>import React, { useEffect } from 'react';\n\nconst withLogging = (WrappedComponent) =&gt; {\n    const WithLogging = (props) =&gt; {\n        useEffect(() =&gt; {\n            console.log(`Component ${WrappedComponent.name || 'Anonymous'} is mounted`);\n            return () =&gt; {\n                console.log(`Component ${WrappedComponent.name || 'Anonymous'} is unmounted`);\n            };\n        }, []);\n\n        return &lt;WrappedComponent {...props} /&gt;;\n    };\n\n    return WithLogging;\n};\n\nexport default withLogging;\n</code></pre> jsx<pre><code>import React from 'react';\n\nconst MyComponent = () =&gt; {\n    return &lt;div&gt;Hello, I'm a functional component!&lt;/div&gt;;\n};\n\nexport default MyComponent;\n</code></pre> jsx<pre><code>import React from 'react';\nimport withLogging from './withLogging';\nimport MyComponent from './MyComponent';\n\nconst MyComponentWithLogging = withLogging(MyComponent);\n\nconst App = () =&gt; {\n    return (\n        &lt;div&gt;\n            &lt;MyComponentWithLogging /&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default App;\n</code></pre> <p>In this structure:</p> <ul> <li><code>withLogging.js</code> contains the HOC (withLogging).</li> <li><code>MyComponent.js</code> contains the functional component (MyComponent).</li> <li><code>App.js</code> uses the HOC by importing it and applying it to MyComponent.</li> </ul> <p>This modular approach allows you to organize your code better and promotes reusability. You can easily apply the withLogging HOC to other components in different files without duplicating the logic.</p>"},{"location":"frontend/pattern/hoc-pattern.html#when-naming-higher-order-component-hoc-files-in-a-react-application","title":"When naming Higher-Order Component (HOC) files in a React application","text":"<ul> <li> <p>Prefix with \"with\":</p> <p>It's a common convention to prefix the HOC file name with \"with\" to indicate that it is a Higher-Order Component.</p> <pre><code>withExampleHOC.js\nwithAuthentication.js\nwithTheme.js\n</code></pre> </li> <li> <p>Suffix with \"HOC\":</p> <p>Optionally, you can suffix the file name with \"HOC\" to make it explicit that it is a Higher-Order Component.</p> <pre><code>ExampleComponentHOC.js\nAuthenticationHOC.js\n</code></pre> </li> </ul>"},{"location":"frontend/pattern/hoc-pattern.html#real-example","title":"Real Example","text":"<p>You can organize your code in a way that makes sense for your project structure. Here's an example of how you might structure the file:</p> withConditionalFormItem.js<pre><code>import React from \"react\";\nimport { Form } from \"antd\";\n\nconst withConditionalFormItem = (WrappedComponent, condition) =&gt; {\n  return (props) =&gt; {\n    if (condition) {\n      return &lt;WrappedComponent {...props} /&gt;;\n    } else {\n      return null; // or you can render an alternative component/message\n    }\n  };\n};\n\nexport default withConditionalFormItem;\n</code></pre> <p>Then, in your main component file:</p> YourFormComponent.js<pre><code>//\nimport React from \"react\";\nimport { Form, Input } from \"antd\";\nimport withConditionalFormItem from \"./withConditionalFormItem\";\n\n// Usage\nconst ConditionalRemarksFormItem = withConditionalFormItem(\n  Form.Item,\n  !isCircular // Condition based on your boolean value\n);\n\nconst YourFormComponent = () =&gt; {\n  return (\n    &lt;Form&gt;\n      {/* Other Form items */}\n      &lt;ConditionalRemarksFormItem label=\"Remarks\" name=\"remarks\"&gt;\n        &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n      &lt;/ConditionalRemarksFormItem&gt;\n      {/* Other Form items */}\n    &lt;/Form&gt;\n  );\n};\n\nexport default YourFormComponent;\n</code></pre> <p>This way, you have a separate file for the higher-order component, making it easy to reuse across different components in your project.</p>"},{"location":"frontend/pattern/misc.html","title":"Misc","text":""},{"location":"frontend/pattern/misc.html#conditional-rendering-pattern","title":"<code>Conditional Rendering</code> pattern","text":"<pre><code>import React from \"react\";\n\nconst YourComponent = ({ singleCircularReferenceTemplateResponse }) =&gt; {\n  // Check if the response is still loading\n  const isLoading = !singleCircularReferenceTemplateResponse;\n\n  // Check if the response has content\n  const hasContent = !!singleCircularReferenceTemplateResponse?.content;\n\n  return (\n    &lt;div&gt;\n      {isLoading &amp;&amp; &lt;p&gt;Loading...&lt;/p&gt;}\n      {!isLoading &amp;&amp; !hasContent &amp;&amp; &lt;p&gt;No Content available.&lt;/p&gt;}\n      {!isLoading &amp;&amp; hasContent &amp;&amp; (\n        &lt;div\n          dangerouslySetInnerHTML={{\n            __html: singleCircularReferenceTemplateResponse.content,\n          }}\n        &gt;&lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n};\n\nexport default YourComponent;\n</code></pre>"},{"location":"frontend/pattern/react-pattern-intro.html","title":"Introduction","text":""},{"location":"frontend/pattern/react-pattern-intro.html#react-design-patterns","title":"React Design Patterns","text":"<ul> <li><code>Compound</code> Pattern</li> <li><code>HOC</code> Pattern</li> <li><code>Hooks</code> Pattern</li> <li><code>Container/Presentational</code> Pattern</li> <li><code>Render Props</code> Pattern</li> </ul>"},{"location":"frontend/pattern/react-pattern-intro.html#reference","title":"Reference","text":"<ul> <li>reactpatterns.js.org</li> <li>patterns.dev</li> <li> <p>reactpatterns.com</p> </li> <li> <p>React Design Patterns</p> </li> </ul>"},{"location":"frontend/pattern/render-props.html","title":"Render Props","text":"<p>In React, the \"<code>Function as Child</code>\" (FaC) pattern involves passing a function as a child of a component. This pattern is also known as \"Render Props.\" The basic idea is to pass a function as a child to a component, allowing the component to render content or behavior based on the result of that function.</p> <p>Here's a simple example to illustrate the Function as Child pattern:</p> ParentComponent.js<pre><code>import React from \"react\";\n\nconst ParentComponent = ({ children }) =&gt; {\n  // Execute the function (child) and pass data to it\n  return &lt;div&gt;{children(\"Data from Parent\")}&lt;/div&gt;;\n};\n\nexport default ParentComponent;\n</code></pre> <p>Now, you can use <code>ParentComponent</code> in another component and pass a function as its child:</p> App.js<pre><code>import React from \"react\";\nimport ParentComponent from \"./ParentComponent\";\n\nconst App = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Function as Child Pattern&lt;/h1&gt;\n\n      {/* Using ParentComponent and passing a function as its child */}\n      &lt;ParentComponent&gt;\n        {(dataFromParent) =&gt; (\n          &lt;p&gt;{`Received data in child component: ${dataFromParent}`}&lt;/p&gt;\n        )}\n      &lt;/ParentComponent&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre> <p>In this example, the <code>ParentComponent</code> takes a <code>children</code> prop, which is a function. Inside <code>ParentComponent</code>, it calls the <code>children</code> function and passes some data (\"<code>Data from Parent</code>\" in this case). The child component (the function passed as a child) then receives this data and can use it to render content.</p> <p>The main benefit of the Function as Child pattern is that it allows you to inject dynamic behavior or data into a component from its parent without the need for complex props or state management. It provides a way to share functionality between components in a more flexible and composable manner.</p> <p>This pattern is commonly used in React, especially in cases where you want to abstract away some logic or behavior into a component but allow customization in its usage by passing functions as children.</p> <p>Real Example</p> <p>Lets create <code>Toggle</code> component that can be used to toggle the visibility of content.</p> Toggle.js<pre><code>import React, { useState } from \"react\";\n\nconst Toggle = ({ children }) =&gt; {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const toggleVisibility = () =&gt; {\n    setIsVisible(!isVisible);\n  };\n\n  // Render the child function and pass the toggleVisibility function and the current visibility state\n  return children({ isVisible, toggleVisibility });\n};\n\nexport default Toggle;\n</code></pre> <p>Now, let's use the <code>Toggle</code> component in another component:</p> App.js<pre><code>import React from \"react\";\nimport Toggle from \"./Toggle\";\n\nconst App = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Function as Child Pattern - Toggle Example&lt;/h1&gt;\n\n      {/* Using Toggle and passing a function as its child */}\n      &lt;Toggle&gt;\n        {({ isVisible, toggleVisibility }) =&gt; (\n          &lt;div&gt;\n            &lt;button onClick={toggleVisibility}&gt;Toggle Visibility&lt;/button&gt;\n\n            {isVisible &amp;&amp; &lt;p&gt;This content is now visible!&lt;/p&gt;}\n          &lt;/div&gt;\n        )}\n      &lt;/Toggle&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre> <p>In this example, the <code>Toggle</code> component encapsulates the state and logic for toggling visibility. It takes a function as a child, and that function receives an object with two properties: <code>isVisible</code> (a boolean indicating whether the content is visible) and <code>toggleVisibility</code> (a function to toggle the visibility).</p> <p>The <code>App</code> component uses the <code>Toggle</code> component, passing a function as its child. Inside the function, it receives the <code>isVisible</code> state and the <code>toggleVisibility</code> function, and it uses these to conditionally render content.</p> <p>This pattern is powerful because it allows you to encapsulate state and behavior within a component while giving the consumer of that component full control over the rendering and customization of the UI based on the component's state.</p>"},{"location":"frontend/react/guides.html","title":"Guides","text":"<p>React Design Patterns and Best Practices page number: 82</p> <p>Props are the way a parent component can pass its data down the tree to every component that needs it (or part of it).</p> <p>When a component passes some props to another component, it is called the Owner, irrespective of the parent-child relation between them.</p>"},{"location":"frontend/react/guides.html#children","title":"Children","text":"<p>There is a special prop that can be passed from the owners to the components defined inside their render method; it is called children.</p> <p>In the React documentation, it is described as <code>opaque</code> because it is a property that does not tell anything about the value it contains.</p>"},{"location":"frontend/react/guides.html#react-hooks-reference","title":"React Hooks Reference","text":"<ul> <li>Learn core Redux \u2014 The easiest way you can imagine</li> <li> <p>Redux Toolkit \u2014 The cheat sheet for Redux development</p> </li> <li> <p>React Hooks cheat sheet: Best practices with examples</p> </li> <li> <p>React Hooks Cheat Sheet</p> </li> <li> <p>React Hooks Cheatsheet \u2014 Most commonly used hooks in ReactJS</p> </li> <li> <p>The React Cheatsheet for 2021 (+ Real-World Examples)</p> </li> </ul>"},{"location":"frontend/react/guides.html#reference","title":"Reference","text":"<p>LinkedIn React Post</p>"},{"location":"frontend/react/intro.html","title":"Introduction","text":""},{"location":"frontend/react/intro.html#programming-paradigm","title":"Programming Paradigm","text":"<ul> <li>imperative (how to do)</li> <li>declarative (what to do)</li> </ul>"},{"location":"frontend/react/intro.html#react-is-declarative","title":"React is declarative","text":"<p>In declarative programming, you concentrate on the \"<code>what</code>\". Not the \"<code>how</code>\". For instance, the following snippet tells your app to serve certain pages at the given route-paths.</p> <p>Libraries:</p> <ul> <li>React</li> <li>React-Router</li> <li>React-Apollo (GraphQL)</li> <li>Styled-Components</li> <li>Express</li> <li>Infrastructure-Components</li> </ul> <p>Notes</p> <ul> <li> <p><code>React.js</code> removed the boundaries between HTML and JavaScript. It uses the Javascript   Syntax Extension (JSX) that complements basic Javascript source code with HTML.</p> </li> <li> <p><code>Styled-Components</code> added a convenient way of styling your React-components. There\u2019s no   need for global style sheets anymore.</p> </li> <li> <p>With <code>Infrastructure-Components</code>, you can integrate REST-services into your React app. As   well as database schemes and queries. You can even configure your serverless infrastructure.</p> </li> </ul> <p>life is an experiment. The more experiments you make the better. - Ralph Waldo Emerson</p>"},{"location":"frontend/react/intro.html#reference","title":"Reference","text":"<ul> <li> <p>React-Architect by Dr.Frank Zickert</p> </li> <li> <p>What is Programming Paradigm?</p> </li> </ul>"},{"location":"frontend/react/migrating-cra-vite.html","title":"Migrating Cra to vite","text":""},{"location":"frontend/react/migrating-cra-vite.html#migrating-create-react-app-to-vite","title":"Migrating create-react-app to Vite","text":"<pre><code>for x in src/**/*.js; do mv \"$x\" \"${x%.js}.jsx\"; done\n</code></pre>"},{"location":"frontend/react/migrating-cra-vite.html#heres-a-modified-version","title":"Here's a modified version","text":"<p>You can use the find command along with exec to achieve this more efficiently.</p> bash<pre><code>find src -type f -name '*.js' -exec sh -c 'mv \"$1\" \"${1%.js}.jsx\"' _ {} \\;\n</code></pre> <p>Explanation of the command:</p> <ul> <li> <p><code>find src -type f -name '*.js'</code>:</p> <p>This part finds all files (<code>-type f</code>) with a .js extension in the <code>src</code> directory.</p> </li> <li> <p><code>-exec sh -c 'mv \"$1\" \"${1%.js}.jsx\"' _ {} \\;</code>:</p> <p>For each file found, it executes the given shell command to rename the file. The <code>{}</code> is a placeholder for the file name, and the <code>_</code> is a placeholder for <code>$0</code> in the shell command.</p> <p>So, when you run this command, it will find all <code>.js</code> files in the src directory and rename them to <code>.jsx</code>. Make sure to run this command from the parent directory containing the src directory.</p> </li> </ul>"},{"location":"frontend/react/migrating-cra-vite.html#editor-in-react","title":"Editor in React","text":"<ul> <li>TinyMCE React</li> <li>ckeditor5-react</li> </ul>"},{"location":"frontend/react/migrating-cra-vite.html#outdated-library","title":"Outdated Library","text":"<ul> <li>react-kanban: archived</li> </ul>"},{"location":"frontend/react/migrating-cra-vite.html#reference","title":"Reference","text":"<ul> <li>Upgrade React: w3schools</li> <li>create-react-app to vite: youtube</li> <li>Bash Scripting to changes all file name</li> </ul>"},{"location":"frontend/react/react-context-api.html","title":"react context api","text":""},{"location":"frontend/react/react-context-api.html#react-context-api","title":"React Context API","text":"<pre><code># Context API Folder Structure\n\nsrc/\n|-- components/\n|-- context/\n|   |-- MyContext.js\n|   |-- MyContextProvider.js\n|-- pages/\n|-- App.js\n|-- index.js\n</code></pre> <p>The React Context API allows you to share state or behavior across your React components without having to pass props manually through each level of the component tree. Here's a simple guide on how to use the React Context API:</p>"},{"location":"frontend/react/react-context-api.html#step-1-create-a-context","title":"Step 1: Create a Context","text":"<p>You can create a new context using the <code>createContext</code> function from React.</p> MyContext.js<pre><code>import { createContext } from \"react\";\n\nconst MyContext = createContext();\n\nexport default MyContext;\n</code></pre>"},{"location":"frontend/react/react-context-api.html#step-2-create-a-provider-component","title":"Step 2: Create a Provider Component","text":"<p>Create a provider component that will wrap the part of your component tree where you want to make the context available. This provider component will be responsible for managing the state that you want to share.</p> MyContextProvider.js<pre><code>import React, { useState } from \"react\";\nimport MyContext from \"./MyContext\";\n\nconst MyContextProvider = ({ children }) =&gt; {\n  const [myState, setMyState] = useState(\"Initial value\");\n\n  const updateState = (newValue) =&gt; {\n    setMyState(newValue);\n  };\n\n  return (\n    &lt;MyContext.Provider value={{ myState, updateState }}&gt;\n      {children}\n    &lt;/MyContext.Provider&gt;\n  );\n};\n\nexport default MyContextProvider;\n</code></pre>"},{"location":"frontend/react/react-context-api.html#step-3-wrap-your-app-with-the-provider","title":"Step 3: Wrap Your App with the Provider","text":"<p>Wrap your main App component (or any parent component) with the provider component you created. This will make the context and its state available to all the components within that part of the component tree.</p> App.js<pre><code>import React from \"react\";\nimport MyContextProvider from \"./MyContextProvider\";\nimport MyComponent from \"./MyComponent\";\n\nconst App = () =&gt; {\n  return (\n    &lt;MyContextProvider&gt;\n      &lt;MyComponent /&gt;\n    &lt;/MyContextProvider&gt;\n  );\n};\n\nexport default App;\n</code></pre>"},{"location":"frontend/react/react-context-api.html#step-4-consume-the-context-in-a-component","title":"Step 4: Consume the Context in a Component","text":"<p>Now, any component within the wrapped part of the tree can consume the context using the useContext hook.</p> MyComponent.js<pre><code>import React, { useContext } from \"react\";\nimport MyContext from \"./MyContext\";\n\nconst MyComponent = () =&gt; {\n  const { myState, updateState } = useContext(MyContext);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Value from context: {myState}&lt;/p&gt;\n      &lt;button onClick={() =&gt; updateState(\"New value\")}&gt;Update Context&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default MyComponent;\n</code></pre> <p>Notes</p> <p>The key idea is that the state or functions you provide through the context provider become accessible to all the components that consume that context within the wrapped part of the component tree.</p>"},{"location":"frontend/react/react-context-api.html#reference","title":"Reference","text":"<ul> <li>How to Use the React Context API in Your Projects: good</li> <li>React Context API: What is it and How it works?</li> </ul>"},{"location":"frontend/react/react-router.html","title":"react router","text":""},{"location":"frontend/react/react-router.html#router","title":"Router","text":"<pre><code>// Installation\n\n$ pnpm install react-router-dom\n</code></pre>"},{"location":"frontend/react/react-router.html#how-to-install-react-router","title":"How to Install React Router?","text":"<p>React router contains 3 different packages for routing.</p> <ul> <li><code>react-router</code>: contains most of the core functionality of React Router including the route matching algorithm and most of the core components and react hooks</li> <li><code>react-router-native</code>: It is designed for mobile applications.</li> <li><code>react-router-dom</code>: It is designed for web applications.</li> </ul>"},{"location":"frontend/react/react-router.html#components-in-react-router","title":"Components in React Router","text":"<p>React router components are divided into 3 main categories -</p> <ul> <li><code>Routers</code> - for instance, <code>&lt;BrowserRouter&gt;</code> and <code>&lt;HashRouter&gt;</code> components</li> <li><code>Route matchers</code> - for instance, <code>&lt;Routes&gt;</code> and <code>&lt;Route&gt;</code> components</li> <li><code>Navigation</code> \u2013 for instance, <code>&lt;Link&gt;</code> and <code>&lt;NavLink&gt;</code> components</li> </ul> <p></p>"},{"location":"frontend/react/react-router.html#code","title":"Code","text":"<pre><code>import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    &lt;Router&gt;\n      &lt;Navbar /&gt;\n      &lt;Switch&gt;\n        &lt;Route exact path=\"/\" component={Home} /&gt;\n        &lt;Route path=\"/about\" component={About} /&gt;\n      &lt;/Switch&gt;\n    &lt;/Router&gt;\n  );\n}\n</code></pre>"},{"location":"frontend/react/react-router.html#redirect-component","title":"Redirect Component","text":"<pre><code>import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    &lt;Router&gt;\n      &lt;Switch&gt;\n        &lt;Route exact path=\"/\" component={Home} /&gt;\n        &lt;PrivateRoute path=\"/hidden\" component={Hidden} /&gt;\n      &lt;/Switch&gt;\n    &lt;/Router&gt;\n  );\n}\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n  // useAuth is some custom hook to get the current user's auth state\n  const isAuth = useAuth();\n\n  return (\n    &lt;Route\n      {...rest}\n      render={(props) =&gt;\n        isAuth ? &lt;Component {...props} /&gt; : &lt;Redirect to=\"/\" /&gt;\n      }\n    /&gt;\n  );\n}\n\nfunction Home() {\n  return &lt;&gt;home&lt;/&gt;;\n}\n\nfunction Hidden() {\n  return &lt;&gt;hidden&lt;/&gt;;\n}\n</code></pre> <p>The redirect component is very simple to use, very declarative, and allows us to see the great benefit of React Router DOM being component-based, just like everything in React.</p>"},{"location":"frontend/react/react-router.html#react-router-hooks","title":"React Router Hooks","text":"<ul> <li>useHistory Hook</li> <li>useLocation Hook</li> <li>useParams Hook + Dynamic Routes</li> <li>useRouteMatch Hook</li> </ul> <pre><code>import { useHistory } from \"react-router-dom\";\n\n\nfunction About() {\n  const history = useHistory();\n\n  console.log(history.location.pathname); // '/about'\n\n  return (\n    &lt;&gt;\n     &lt;h1&gt;The about page is on: {history.location.pathname}&lt;/h1&gt;\n     &lt;button onClick={() =&gt; history.push('/')}&gt;Go to home page&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"frontend/react/react-router.html#upgrading-fro-v5-to-v6","title":"Upgrading fro <code>v5</code> to <code>v6</code>","text":"<ul> <li>Upgrade all <code>&lt;Switch&gt;</code> elements to <code>&lt;Routes&gt;</code></li> <li>Use <code>useNavigate</code> instead of <code>useHistory</code></li> <li>Replace <code>useRouteMatch</code> with <code>useMatch</code></li> </ul> <p>Replacing Switch component with Routes</p> <pre><code>// old with Switch\n\nexport function App() {\n  return (\n    &lt;div&gt;\n      &lt;Switch&gt;\n        &lt;Route path=\"/about\"&gt;\n          &lt;AboutPage /&gt;\n        &lt;/Route&gt;\n        &lt;Route exact path=\"/profile\"&gt;\n          &lt;ProfilePage /&gt;\n        &lt;/Route&gt;\n        &lt;Route path=\"/profile/:id\"&gt;\n          &lt;ProfileUserPage /&gt;\n        &lt;/Route&gt;\n      &lt;/Switch&gt;\n    &lt;/div&gt;\n  )\n}\n\n// new with Routes\n\nexport function App() {\n  return (\n    &lt;div&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/about\" element={&lt;AboutPage /&gt;} /&gt;\n        &lt;Route exact path=\"/profile\" element={&lt;ProfilePage /&gt;} /&gt;\n        &lt;Route path=\"/profile/:id\" element={&lt;ProfileUserPage /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre> <p>Internal changes &amp; path evaluation (no more needed exact prop) For V5 we needed to put the exact prop on the component to go for that specific route we want</p> <pre><code>// old\n\nexport function App() {\n  return (\n    &lt;div&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/about\" element={&lt;AboutPage /&gt;} /&gt;\n        &lt;Route exact path=\"/profile\" element={&lt;ProfilePage /&gt;} /&gt;\n        &lt;Route path=\"/profile/:id\" element={&lt;ProfileUserPage /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/div&gt;\n  )\n}\n\n// new\nexport function App() {\n  return (\n    &lt;div&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/about\" element={&lt;AboutPage /&gt;} /&gt;\n        &lt;Route path=\"/profile\" element={&lt;ProfilePage /&gt;} /&gt;\n        &lt;Route path=\"/profile/:id\" element={&lt;ProfileUserPage /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"frontend/react/react-router.html#history","title":"History","text":"<pre><code>$ npm i history\n</code></pre> <p>There are three types of history</p> <ul> <li>browser</li> <li>hash</li> <li>memory</li> </ul> <pre><code>import {\n  createBrowserHistory,\n  createHashHistory,\n  createMemoryHistory\n} from 'history'\n</code></pre> <p>If you are using React Router, it can automatically create history objects for you, so you may never have to actually interact with history directly. Still, it is important to understand the differences between each type of history so that you can determine which one is right for your project.</p>"},{"location":"frontend/react/react-router.html#reference","title":"Reference","text":"<ul> <li>React router overview</li> <li>React Router - Types, Mechanism, Installation And Examples</li> <li>The React Router Cheatsheet \u2013 Everything You Need to Know - (BEST)</li> <li>Using Hashrouter With React - Definitive Guide</li> <li>What is Hash Routing?</li> <li>upgrading v5 - v6: oficial doc</li> <li>React router V6: Some of the new changes </li> <li>A little bit of history - npm</li> <li>history - npm</li> </ul>"},{"location":"frontend/react/useCallback.html","title":"useCallback","text":""},{"location":"frontend/react/useCallback.html#usecallback-hook","title":"useCallback Hook","text":"<p><code>useCallback</code> is a React hook that is used to memoize functions so that they do not get recreated on each render, which can be useful to optimize performance in certain scenarios. Here's a simple real example to illustrate the use of <code>useCallback</code>.</p> <p></p> <pre><code>import React, { useState, useCallback } from \"react\";\n\nconst ExampleComponent = () =&gt; {\n  const [count, setCount] = useState(0);\n\n  // Without useCallback\n  const handleClickWithoutCallback = () =&gt; {\n    console.log(\"Button clicked!\");\n    setCount(count + 1);\n  };\n\n  // With useCallback\n  const handleClickWithCallback = useCallback(() =&gt; {\n    console.log(\"Button clicked!\");\n    setCount(count + 1);\n  }, [count]);\n  // Dependency array: specify dependencies that should trigger function re-creation\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n\n      &lt;button onClick={handleClickWithoutCallback}&gt;\n        Click Without useCallback\n      &lt;/button&gt;\n\n      &lt;button onClick={handleClickWithCallback}&gt;Click With useCallback&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ExampleComponent;\n</code></pre> <p>In this example:</p> <ul> <li>The component renders a count state variable.</li> <li>There are two buttons: one <code>without useCallback</code> and one <code>with useCallback</code>.</li> <li>The <code>handleClickWithoutCallback</code> function is created inside the component body, so it is recreated on every render. This can lead to unnecessary re-renders of child components if passed down as props.</li> <li>The <code>handleClickWithCallback</code> function is memoized using useCallback, and the dependency array <code>[count]</code> specifies that the function should be recreated only when the <code>count</code> variable changes. This can be useful to prevent unnecessary function recreation and optimize performance.</li> </ul> <p>In this simple example, the difference might not be significant, but in larger applications, especially when passing functions down to child components, using <code>useCallback</code> can help optimize performance by avoiding unnecessary re-renders triggered by new function instances.</p> <p>Scenario: When to use useCallback &amp; when not to use</p> <p>Here are some scenarios where using useCallback in React can be beneficial, and situations where it may not be necessary:</p> <p>Use useCallback:</p> <ol> <li> <p>Optimizing Child Components:</p> <ul> <li>When passing callback functions as props to child components.</li> <li>It prevents unnecessary re-renders of child components if the callback function reference changes.</li> </ul> <pre><code>const ParentComponent = () =&gt; {\n  const handleClick = useCallback(() =&gt; {\n    console.log(\"Button clicked!\");\n  }, []);\n\n  return &lt;ChildComponent onClick={handleClick} /&gt;;\n};\n</code></pre> </li> <li> <p>Event Handlers in Dependencies:</p> <ul> <li>When using callback functions in the dependency array of <code>useEffect</code> to avoid unnecessary re-execution of the effect.   <pre><code>useEffect(() =&gt; {\n  // Effect logic\n}, [callbackFunction]);\n</code></pre></li> </ul> </li> <li> <p>Preventing Unnecessary Function Recreation:</p> <ul> <li>When you want to avoid recreating functions on each render, especially if those functions are passed as dependencies to other hooks or functions.   <pre><code>const memoizedFunction = useCallback(() =&gt; {\n  // Function logic\n}, [dependency1, dependency2]);\n</code></pre></li> </ul> </li> </ol> <p>Might Not Need useCallback:</p> <ol> <li> <p>Local Functions:</p> <ul> <li>If a function is defined inside a component and doesn't need to be referenced outside that component or passed down to child components, it may not need <code>useCallback</code></li> </ul> <pre><code>const MyComponent = () =&gt; {\n  const localFunction = () =&gt; {\n    // Local function logic\n  };\n\n  // No need for useCallback if localFunction is not passed as a prop or used in dependencies.\n  // ...\n};\n</code></pre> </li> <li> <p>Static Dependencies:</p> <ul> <li>If the function doesn't depend on any external variables or props, and its behavior is consistent across renders, <code>useCallback</code> might not be necessary.</li> </ul> <pre><code>const simpleFunction = () =&gt; {\n  // Function logic without dependencies\n};\n\n// No need for useCallback if simpleFunction doesn't depend on external variables.\n</code></pre> </li> <li> <p>Performance Impact is Negligible:</p> <ul> <li>In some cases, the performance impact of not using useCallback might be negligible, especially for smaller components or when function recreation does not affect the overall performance.</li> </ul> </li> </ol> <p>It's important to use <code>useCallback</code> judiciously and consider the specific use case and performance requirements of your application. If in doubt, you can start without <code>useCallback</code> and optimize later if performance becomes an issue.</p>"},{"location":"frontend/react/useCallback.html#reference","title":"Reference","text":"<ul> <li>Your Guide to React.useCallback()</li> <li>Demystifying React Hooks: useCallback and useMemo </li> </ul>"},{"location":"frontend/react/useEffect-cleanup.html","title":"useEffect cleanup","text":"<p>A cleanup function in React is typically used to perform necessary cleanup or resource disposal when a component unmounts. Here are some scenarios in which you should consider writing a cleanup function using the <code>useEffect</code> hook:</p>"},{"location":"frontend/react/useEffect-cleanup.html#1-clearing-subscriptions-or-timers","title":"1. Clearing Subscriptions or Timers:","text":"<p>If your component sets up subscriptions (e.g., using <code>addEventListener</code>) or timers (e.g., using <code>setTimeout</code> or <code>setInterval</code>), it's crucial to clean them up when the component is unmounted to avoid memory leaks and unexpected behavior.</p> jsx<pre><code>useEffect(() =&gt; {\n  const timerId = setInterval(() =&gt; {\n    // Your logic here\n  }, 1000);\n\n  return () =&gt; {\n    // Cleanup: Clear the timer when the component unmounts\n    clearInterval(timerId);\n  };\n}, []);\n</code></pre>"},{"location":"frontend/react/useEffect-cleanup.html#2-canceling-network-requests","title":"2. Canceling Network Requests:","text":"<p>If your component makes asynchronous requests (e.g., using <code>fetch</code>), you might want to cancel or abort the request if the component is unmounted to prevent setting state on an unmounted component.</p> jsx<pre><code>useEffect(() =&gt; {\n  const abortController = new AbortController();\n\n  const fetchData = async () =&gt; {\n    try {\n      const response = await fetch(\"https://api.example.com/data\", {\n        signal: abortController.signal,\n      });\n      const data = await response.json();\n      setData(data);\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        // Request was canceled (component unmounted)\n      } else {\n        console.error(\"Error fetching data:\", error);\n      }\n    }\n  };\n\n  fetchData();\n\n  return () =&gt; {\n    // Cleanup: Cancel the request if the component unmounts\n    abortController.abort();\n  };\n}, []);\n</code></pre>"},{"location":"frontend/react/useEffect-cleanup.html#3-cleaning-up-external-resources","title":"3. Cleaning Up External Resources:","text":"<p>If your component interacts with external resources or libraries (e.g., closing a WebSocket connection, cleaning up a third-party library instance), the cleanup function is the right place to perform these actions.</p> jsx<pre><code>useEffect(() =&gt; {\n  const socket = new WebSocket(\"wss://example.com\");\n\n  socket.addEventListener(\"open\", () =&gt; {\n    // Your logic here\n  });\n\n  return () =&gt; {\n    // Cleanup: Close the WebSocket connection when the component unmounts\n    socket.close();\n  };\n}, []);\n</code></pre>"},{"location":"frontend/react/useEffect-cleanup.html#4-resetting-state-or-side-effects","title":"4. Resetting State or Side Effects:","text":"<p>If your component needs to reset certain state variables or undo side effects when it unmounts, the cleanup function can be used for such purposes.</p> jsx<pre><code>useEffect(() =&gt; {\n  // Your effect logic here\n\n  return () =&gt; {\n    // Cleanup: Reset state or undo side effects when the component unmounts\n    resetState();\n  };\n}, [dependency]);\n</code></pre> <p>Remember that the cleanup function is an essential part of the useEffect lifecycle. It ensures that resources are properly released, preventing potential memory leaks or unintended behavior when a component is no longer in use. Always use the cleanup function to perform any necessary cleanup actions specific to the effects you've set up in your component.</p>"},{"location":"frontend/react/useEffect-technique-used.html","title":"useEffect mostly used","text":"<p>The choice of <code>useEffect</code> technique often depends on the specific requirements of your application. However, one commonly used and versatile pattern is using <code>useEffect</code> for data fetching. This is especially relevant in applications that interact with APIs or external data sources. The pattern typically involves:</p> <ol> <li>Fetching data when the component mounts.</li> <li>Optionally fetching data based on changes in certain dependencies.</li> </ol> <p>Here's a breakdown of this pattern:</p>"},{"location":"frontend/react/useEffect-technique-used.html#1-fetching-data-on-mount","title":"1. Fetching Data on Mount:","text":"<p>Use <code>useEffect</code> with an empty dependency array to fetch data when the component mounts. This ensures that the effect runs only once after the initial render.</p> jsx<pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    try {\n      const response = await fetch(\"https://api.example.com/data\");\n      const data = await response.json();\n      setData(data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  fetchData();\n}, []); // Empty dependency array means this effect runs once on mount\n</code></pre>"},{"location":"frontend/react/useEffect-technique-used.html#2-fetching-data-based-on-dependencies","title":"2. Fetching Data Based on Dependencies:","text":"<p>Use <code>useEffect</code> with specific dependencies to refetch data when those dependencies change. This is useful for scenarios where you need to update data in response to user interactions or changes in the application state.</p> jsx<pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    try {\n      const response = await fetch(`https://api.example.com/data/${userId}`);\n      const data = await response.json();\n      setData(data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  fetchData();\n}, [userId]); // Refetch data when 'userId' changes\n</code></pre>"},{"location":"frontend/react/useEffect-technique-used.html#3-cleanup-and-cancellation","title":"3. Cleanup and Cancellation:","text":"<p>Consider incorporating cleanup functions to handle scenarios like canceling pending requests or unsubscribing from external subscriptions when the component unmounts.</p> jsx<pre><code>useEffect(() =&gt; {\n  const abortController = new AbortController();\n\n  const fetchData = async () =&gt; {\n    try {\n      const response = await fetch(\"https://api.example.com/data\", {\n        signal: abortController.signal,\n      });\n      const data = await response.json();\n      setData(data);\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        // Request was canceled (component unmounted)\n      } else {\n        console.error(\"Error fetching data:\", error);\n      }\n    }\n  };\n\n  fetchData();\n\n  return () =&gt; {\n    // Cleanup: Cancel the request if the component unmounts\n    abortController.abort();\n  };\n}, []);\n</code></pre>"},{"location":"frontend/react/useEffect-technique-used.html#4-combining-multiple-useeffect-hooks","title":"4. Combining Multiple useEffect Hooks:","text":"<p>Break down complex logic into multiple <code>useEffect</code> hooks for better readability and maintainability. For example, separate data fetching from UI-related side effects.</p> jsx<pre><code>useEffect(() =&gt; {\n  // Fetch initial data\n  const fetchData = async () =&gt; {\n    // ...\n  };\n  fetchData();\n}, []);\n\nuseEffect(() =&gt; {\n  // Handle UI-related side effects\n  // ...\n}, [data, userId]);\n</code></pre>"},{"location":"frontend/react/useEffect-technique-used.html#5-asyncawait-pattern","title":"5. Async/Await Pattern:","text":"<p>Use the <code>async</code> keyword and <code>await</code> syntax for cleaner asynchronous code within the <code>useEffect</code>.</p> jsx<pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    try {\n      const response = await fetch(\"https://api.example.com/data\");\n      const data = await response.json();\n      setData(data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  fetchData();\n}, []);\n</code></pre> <p>This data-fetching pattern is commonly used because it covers a wide range of scenarios, from initial data loading to updating data based on changes in specific dependencies. It provides a clean and organized way to manage asynchronous operations in React components.</p>"},{"location":"frontend/react/useEffect-technique.html","title":"useEffect Technique","text":""},{"location":"frontend/react/useEffect-technique.html#_1","title":"useEffect Technique","text":"<p>The <code>useEffect</code> hook in React is used for handling side effects in functional components. It is a powerful tool that allows you to perform operations such as data fetching, subscriptions, or manually changing the DOM in response to component lifecycle events. Here are some advanced techniques and use cases for the <code>useEffect</code> hook:</p>"},{"location":"frontend/react/useEffect-technique.html#1-conditional-execution","title":"1. Conditional Execution:","text":"<p>Use <code>useEffect</code> with dependencies to conditionally execute code when certain dependencies change. This is useful for optimizing performance and avoiding unnecessary computations.</p> jsx<pre><code>useEffect(() =&gt; {\n  // Effect will run when 'dependency' changes\n  fetchData(dependency);\n}, [dependency]);\n</code></pre>"},{"location":"frontend/react/useEffect-technique.html#2-cleanup-function","title":"2. Cleanup Function:","text":"<p>Use the cleanup function returned by <code>useEffect</code> for cleanup operations, such as canceling subscriptions or clearing intervals.</p> jsx<pre><code>useEffect(() =&gt; {\n  const subscription = subscribe();\n  return () =&gt; {\n    // Cleanup function: unsubscribe when the component unmounts\n    subscription.unsubscribe();\n  };\n}, []); // Empty dependency array means this effect runs once on mount\n</code></pre>"},{"location":"frontend/react/useEffect-technique.html#3-debouncing-and-throttling","title":"3. Debouncing and Throttling:","text":"<p>Use <code>useEffect</code> in combination with debouncing or throttling techniques to limit the rate at which a function is called.</p> jsx<pre><code>useEffect(() =&gt; {\n  const debouncedFunction = debounce(() =&gt; {\n    // Code to run after debounce\n  }, 300);\n\n  // Attach the debounced function to an event listener, for example\n  window.addEventListener(\"scroll\", debouncedFunction);\n\n  return () =&gt; {\n    // Cleanup: remove the event listener when the component unmounts\n    window.removeEventListener(\"scroll\", debouncedFunction);\n  };\n}, []);\n</code></pre>"},{"location":"frontend/react/useEffect-technique.html#4-global-state-synchronization","title":"4. Global State Synchronization:","text":"<p>Use <code>useEffect</code> to synchronize the component's state with a global state management solution, like Redux.</p> jsx<pre><code>useEffect(() =&gt; {\n  // Update local state when global state changes\n  setLocalState(globalState);\n}, [globalState]);\n</code></pre>"},{"location":"frontend/react/useEffect-technique.html#5-dependency-arrays-and-stale-closures","title":"5. Dependency Arrays and Stale Closures:","text":"<p>Be careful with dependencies and closures to avoid stale values. Use the functional form of <code>setState</code> to capture the latest state or props.</p> jsx<pre><code>useEffect(() =&gt; {\n  // Avoid stale closures\n  const fetchData = async () =&gt; {\n    const result = await fetch(url);\n    // Use result and capture the latest 'mounted' value\n    if (mounted.current) {\n      setData(result);\n    }\n  };\n\n  fetchData();\n\n  return () =&gt; {\n    // Cleanup: Set 'mounted' to false when the component unmounts\n    mounted.current = false;\n  };\n}, [url]);\n</code></pre>"},{"location":"frontend/react/useEffect-technique.html#6-multiple-useeffect-for-separation-of-concerns","title":"6. Multiple useEffect for Separation of Concerns:","text":"<p>Use multiple <code>useEffect</code> blocks to separate different concerns, making your code more readable and maintainable.</p> jsx<pre><code>useEffect(() =&gt; {\n  // Code for fetching data\n  fetchData();\n}, [dependencyForDataFetching]);\n\nuseEffect(() =&gt; {\n  // Code for handling UI updates\n  updateUI();\n}, [dependencyForUIUpdate]);\n</code></pre>"},{"location":"frontend/react/useEffect-technique.html#7-promise-in-useeffect","title":"7. Promise in useEffect:","text":"<p>If you want to work with asynchronous code in <code>useEffect</code>, you can use the async keyword and await syntax.</p> jsx<pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    try {\n      const result = await fetchDataFromAPI();\n      setData(result);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  fetchData();\n}, [dependency]);\n</code></pre>"},{"location":"frontend/react/useEffect-technique.html#8-combining-useeffect-with-other-hooks","title":"8. Combining useEffect with Other Hooks:","text":"<p>Combine useEffect with other hooks like useMemo or useCallback for more fine-grained control over the memoization of values and functions.</p> jsx<pre><code>const memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]);\n\nuseEffect(() =&gt; {\n  // Effect using memoizedValue\n  performEffectWithMemoizedValue(memoizedValue);\n}, [memoizedValue]);\n</code></pre> <p>Notes</p> <p>By mastering these advanced techniques, you can make the most of the useEffect hook in your React applications and handle complex scenarios with ease. Always consider the specific requirements of your application and choose the approach that best fits your use case.</p>"},{"location":"frontend/react/useRef.html","title":"useRef","text":""},{"location":"frontend/react/useRef.html#useref-hooks","title":"useRef hooks","text":"<p><code>useRef</code> is a React hook that provides a way to create a mutable object that persists across renders. It's commonly used to access and interact with a DOM element or to persist values across renders without causing re-renders.</p> <p>Here's a beginner's guide on how to use useRef in React:</p>"},{"location":"frontend/react/useRef.html#basic-usage","title":"Basic Usage:","text":"<ol> <li> <p>Import <code>useRef</code>:</p> <p>Import the useRef hook from React.</p> <pre><code>import React, { useRef } from \"react\";\n</code></pre> </li> <li> <p>Create a Ref:</p> <p>Use useRef() to create a ref object.</p> <pre><code>const myRef = useRef();\n</code></pre> </li> <li> <p>Attach Ref to a JSX Element:</p> <p>Attach the ref to a JSX element using the <code>ref</code> attribute.</p> <pre><code>return &lt;div ref={myRef}&gt;Hello, useRef!&lt;/div&gt;;\n</code></pre> </li> <li> <p>Accessing the DOM Element:</p> <p>Use the <code>.current</code> property of the ref object to access the DOM element.</p> <pre><code>console.log(myRef.current); // Outputs the DOM element\n</code></pre> </li> </ol>"},{"location":"frontend/react/useRef.html#example-with-a-functional-component","title":"Example with a Functional Component:","text":"<pre><code>import React, { useRef, useEffect } from \"react\";\n\nconst MyComponent = () =&gt; {\n  const myRef = useRef();\n\n  useEffect(() =&gt; {\n    // Access the DOM element after the component is mounted\n    console.log(myRef.current);\n  }, []); // Empty dependency array ensures the effect runs only once after mount\n\n  return &lt;div ref={myRef}&gt;Hello, useRef!&lt;/div&gt;;\n};\n\nexport default MyComponent;\n</code></pre>"},{"location":"frontend/react/useRef.html#use-cases-and-when-to-use-useref","title":"Use Cases and When to Use useRef:","text":"<ol> <li> <p>Accessing or Modifying DOM Elements:</p> <ul> <li>Use <code>useRef</code> when you need to access or modify a DOM element directly. For example, focusing an input field, measuring an element, or triggering imperative animations.</li> </ul> <pre><code>const inputRef = useRef();\n\nuseEffect(() =&gt; {\n  inputRef.current.focus();\n}, []);\n</code></pre> </li> <li> <p>Holding Mutable Values Without Causing Rerenders:</p> <ul> <li><code>useRef</code> can hold mutable values that persist across renders without causing re-renders. This is useful for storing values that shouldn't trigger component updates.</li> </ul> <pre><code>const countRef = useRef(0);\n\nuseEffect(() =&gt; {\n  countRef.current += 1;\n  console.log(\"Render count:\", countRef.current);\n});\n</code></pre> </li> <li> <p>Storing Previous Values:</p> <ul> <li>Use <code>useRef</code> to store and compare previous values, useful for certain scenarios like tracking changes in dependencies.</li> </ul> <pre><code>const prevValueRef = useRef();\nuseEffect(() =&gt; {\n  if (value !== prevValueRef.current) {\n    console.log(\"Value changed!\");\n  }\n  prevValueRef.current = value;\n}, [value]);\n</code></pre> <p>Remember that the ref value persists between renders, so changes to <code>.current</code> do not trigger a re-render. This makes <code>useRef</code> suitable for scenarios where you need to hold mutable values across renders without causing unnecessary updates.</p> </li> </ol>"},{"location":"frontend/typescript/typescript-compiler.html","title":"compiler","text":""},{"location":"frontend/typescript/typescript-compiler.html#typescript-compiler","title":"TypeScript Compiler","text":"<p>TypeScript is transpiled into JavaScript using a compiler.</p> <p>TypeScript being converted into JavaScript means it runs anywhere that JavaScript runs!</p>"},{"location":"frontend/typescript/typescript-compiler.html#installing-the-compiler","title":"Installing the Compiler","text":"<p>TypeScript has an official compiler which can be installed through npm.</p> <p>Within your npm project, run the following command to install the compiler:</p> <p>npm install typescript --save-dev</p> <p>You can then run the TypeScript compiler using one of the following commands:</p> <p>npx tsc</p> <p>yarn tsc</p> <p>pnpm tsc</p>"},{"location":"frontend/typescript/typescript-compiler.html#globally-installing-typescript","title":"Globally Installing TypeScript","text":"<p>npm install -g typescript</p>"},{"location":"frontend/typescript/typescript-compiler.html#configuring-the-compiler","title":"Configuring the compiler","text":"<p>You can have TypeScript create <code>tsconfig.json</code> with the recommended settings with:</p> <p>npx tsc --init</p> <p>Here is an example of more things you could add to the <code>tsconfig.json</code> file:</p> <pre><code>{\n  \"include\": [\"src\"],\n  \"compilerOptions\": {\n    \"outDir\": \"./build\"\n  }\n}\n</code></pre>"},{"location":"frontend/typescript/typescript-compiler.html#working-with-typescript-compatible-transpilers","title":"Working with TypeScript-compatible transpilers","text":"<p>There are other tools which convert TypeScript files to JavaScript files</p> <ol> <li>Babel: Babel is a very popular JavaScript transpiler which supports TypeScript files via the plugin @babel/plugin-transform-typescript.</li> <li>swc: swc is a fast transpiler created in Rust which supports many of Babel's features including TypeScript.</li> <li>Sucrase: Sucrase is a Babel fork focused on speed for using in development mode. Sucrase supports TypeScript natively.</li> </ol>"},{"location":"frontend/typescript/typescript-compiler.html#reference","title":"Reference","text":"<ul> <li>TypeScript Compiler :w3chools.com</li> </ul>"},{"location":"frontend/typescript/typescript-installation.html","title":"installation","text":""},{"location":"frontend/typescript/typescript-installation.html#typescript","title":"Typescript","text":""},{"location":"frontend/typescript/typescript-installation.html#what-is-typescript","title":"What is TypeScript?","text":"<p>TypeScript is JavaScript with added syntax for types.</p> <p>TypeScript is a syntactic superset of JavaScript which adds static typing.</p> <p>This basically means that TypeScript adds syntax on top of JavaScript, allowing developers to add types.</p> <p>TypeScript being a \"Syntactic Superset\" means that it shares the same base syntax as JavaScript, but adds something to it.</p>"},{"location":"frontend/typescript/typescript-installation.html#how-do-i-use-typescript","title":"How do I use TypeScript?","text":"<p>A common way to use TypeScript is to use the official TypeScript compiler, which transpiles TypeScript code into JavaScript.</p> <p>The next section shows how to get the compiler setup for a local project.</p> <p>Some popular code editors, such as Visual Studio Code, have built-in TypeScript support and can show errors as you write code!</p> <p>TypeScript uses compile time type checking. Which means it checks if the specified types match before running the code, not while running the code.</p> <p>TypeScript allows developers to add types to JavaScript.</p>"},{"location":"frontend/typescript/typescript-installation.html#reference","title":"Reference","text":"<ul> <li>TypeScript Tutorial: w3schools.com</li> </ul>"},{"location":"git/git.html","title":"Git","text":""},{"location":"git/git.html#git","title":"Git","text":"bash<pre><code>$ mkdir ~/my_website\n$ cd ~/my_website\n\n# the option -b followed by a default branch named main\n$ git init -b main\n\n# or you can intialize empty repo and add files later\n$ git init -b main ~/my_website\n$ cd ~/my_website\n$ echo 'My awesome website!' &gt; index.html\n</code></pre> <p>The <code>git init</code> command creates a hidden directory called .git at the root level of your project. All revision information along with supporting metadata and Git extensions are stored in this top-level, hidden .git folder.</p>"},{"location":"git/git.html#configuration-files","title":"Configuration Files","text":"<p>Git configuration files are all simple text files in the style of .ini files. The configuration files are used to store preferences and settings used by multiple git commands.</p> <p>Hierarchy of configuration files</p> <ul> <li> <p><code>.git/config</code></p> <p>Repository-specific configuration settings manipulated with the <code>--file</code> option or by default. You can also write to this file with the <code>--local</code> option. These settings have the highest precedence.</p> </li> <li> <p><code>~/.gitconfig</code></p> <p>User-specific configuration settings manipulated with the <code>--global</code> option.</p> </li> <li> <p><code>/etc/gitconfig</code></p> <p>System-wide configuration settings manipulated with the <code>--system</code> option if you have proper Unix file write permissions on the gitconfig file. These settings have the lowest precedence. Depending on your installation, the system settings file might be somewhere else (perhaps in <code>/usr/local/etc</code> gitconfig) or may be absent entirely.</p> </li> </ul>"},{"location":"git/git.html#notes","title":"Notes","text":"<pre><code># opens a git .config file\n\n$ git config --global -e\n</code></pre>"},{"location":"git/git.html#git-divergent-branches-issue","title":"git divergent branches issue","text":"<pre><code>git pull origin main --rebase\n</code></pre>"},{"location":"git/git.html#git-blame-command","title":"git blame <code>command</code>","text":""},{"location":"git/git.html#git-grep-command","title":"git grep <code>command</code>","text":""},{"location":"git/git.html#reference","title":"Reference","text":"<ul> <li>Version Control with Git 3rd edition by Prem Kumar Ponuthorai &amp; Jon Loeliger</li> </ul> <p>Solved</p> <ul> <li>git divergent branches and need to specify how to reconcile them</li> <li>Git Error: You have divergent branches and need to specify how to reconcile them.</li> <li>Pulling without specifying how to reconcile divergent branches is discouraged</li> </ul>"},{"location":"git/gitlab.html","title":"Gitlab","text":"<p>gitlab</p> <p>Containerization is an OS-level virtualization method used to deploy and run distributed applications without launching an entire Virtual Machine (VM) for each application.</p> <p>It is a kind of OS virtualization where we run our applications in a separate <code>user space</code> called containers.</p>"},{"location":"git/gitlab.html#docker-networking","title":"Docker Networking","text":"<p>By default, during installation, the Docker Engine creates three networks for you:</p> bash<pre><code>$ docker network ls\n</code></pre> <p>When Docker spins up a new container, by default, it creates a network stack for the container and attaches to the default bridge network. However, optionally, you could attach the container to the host or none network.</p> <p>Docker provides a <code>docker inspect</code> subcommand, which is as handy as a Swiss Army knife, to dive deep into the low-level details of the Docker <code>container</code> or <code>image</code>.</p>"},{"location":"git/gitlab.html#reference","title":"Reference","text":""},{"location":"git/intro.html","title":"Intro","text":"<p>git</p> <p></p> <p>Lorem ipsum dolor sit amet, </p> <p>consectetur adipiscing elit. Aliquam rutrum mauris urna, nec condimentum neque venenatis at. Fusce ornare, lorem non laoreet viverra, urna nibh dapibus metus, vel pellentesque leo sapien a arcu. Phasellus lacinia bibendum leo at efficitur. Suspendisse at luctus nisi. Etiam id sapien sollicitudin purus scelerisque faucibus eget id nunc. Sed tempus commodo lacinia. Aliquam eget leo quam. Fusce id nunc vitae nisl molestie lobortis nec vel quam. Nunc ac elit in dolor mollis ultrices. Etiam pharetra sagittis euismod. In varius nisi et consequat vulputate. Curabitur euismod a risus non gravida. </p> <p>Subscribe to our newsletter</p>"},{"location":"git/tmux.html","title":"tmux","text":"<p>tmux is short for [t]erminal [mu]ltiple[x]er. A multiplexer is simply a fancy way of describing an application that lets you easily manage multiple terminal windows within one screen.</p> <p>tmux runs a server/client architecture.</p> bash<pre><code># tmux prefix command\n&lt;Ctrl&gt; and b\n</code></pre> <p>Success</p> <p>If you haven't specified a session name explicitly, Tmux will assign a <code>default name</code> to the session.</p> <p>The default session name typically consists of a numerical value, starting from <code>0</code> and incrementing for each new session</p> bash<pre><code>tmux\n</code></pre> <p>Getting Help with tmux by Reviewing Keyboard Shortcuts</p> <pre><code>Prefix + ?\n\n# listing all tmux session\n$ tmux list-sessions\n\n# shorcurt\n$ tmux ls\n\n# To resize the pane\n&lt;Prefix&gt;, arrow down (hold)\n</code></pre> <p></p>"},{"location":"git/tmux.html#installation","title":"Installation","text":"<p>Example</p> bash<pre><code>$ sudo apt install tmux\n</code></pre>"},{"location":"git/tmux.html#sessions-windows-panes","title":"Sessions, Windows, Panes","text":"<p>Info</p> SessionsWindowsPanes bash<pre><code># To list all sessions (from outside tmux)\n$ tmux ls\n\n# To create new session\n$ tmux new-session -s work\n\n# To detach the session: (d for detach)\n&lt;Prefix&gt;, d\n\n# To rename a session\n$ tmux rename-session -t  old_name  new_name\n\n# To select a session\n:choose-session\n\n# Move to next session\n&lt;P&gt;, (\n\n# Move to previous session\n&lt;P&gt;, )\n\n# To kill a session\n# You can type exit within a session to destroy the session\nexit\n#or\n\u200btmux\u200b \u200bkill-session \u200b \u200b-t\u200b \u200b basic \u200b\ntmux\u200b \u200bkill-session \u200b \u200b-t\u200b \u200b second_session\n\n# Kill the tmux server and, as a result, every session\n$ tmux kill-server\u200b\n</code></pre> bash<pre><code># To create new window: (c for create)\n&lt;Prefix&gt;, c\n\n# To rename a window\n&lt;Prefix&gt; ,\n\n# To move between windows\n# By default, windows in tmux each have a number, starting at 0\n&lt;Prefix&gt;, 0\n&lt;Prefix&gt;, 1\n\n# To find a window \n&lt;Prefix&gt;, f\n\n# To display a visual menu of your windows \n&lt;Prefix&gt;, w\n\n# To close a window\ntype exit\n# or\n&lt;Prefix&gt;, &amp;\n</code></pre> bash<pre><code># To split the window vertically\n&lt;Prefix&gt;, %\n\n# To split the pane horizontally\n# &lt;Prefix&gt;, \"\n\n# To kill pane\n&lt;Prefix&gt;, x\n\n# To zoom the pane\n&lt;Prefix&gt;, z\n\n# To move the cursor to the pane to the right, left, down, or up\n&lt;Prefix&gt; and the right arrow key,\n&lt;Prefix&gt; and the left arrow key,\n&lt;Prefix&gt; and the down arrow key,\n&lt;Prefix&gt; and the up arrow key\n\n# Pane Layouts\n# To cycle through these layouts by pressing &lt;PREFIX&gt; SPACEBAR \n&lt;PREFIX&gt; SPACEBAR \n</code></pre>"},{"location":"git/tmux.html#manipulating-text","title":"Manipulating Text","text":"<p>Note</p> <p>There are two important components of tmux</p> <ul> <li>Copy mode</li> <li>paste buffers</li> </ul> Explaining the Window historypaste buffer <p>In order to work its magic and keep everything in a single terminal window, tmux has to hide all of the text that won't fit in the currently viewed pane. It keeps all of this text stored in something called Window history.</p> <pre><code># copy mode\n# To enter copy mode\n&lt;Prefix&gt;, [\n\n# To copy text into the paste buffer. \n# This sets the start point of the selection.\n\npress Ctrl + Space bar (Space bar)\n\n# When you are satisfied with your selection,\nsimply press Meta + w (Enter) \n# to copythe text and you will leave Copy mode immediately\n</code></pre> <p>Interacting with the paste buffer</p> <p>The paste buffer is a holding bucket for all of the text you will copy. It is actually a stack, so each item copied from Copy mode is added at the top of the stack.</p> <pre><code># Pasting text from the paste buffer\n&lt;Prefix&gt;, ]\n\n# Choosing items from the paste buffer\n&lt;Prefix&gt;, =\n</code></pre>"},{"location":"git/tmux.html#tmux-modes","title":"Tmux Modes","text":"<p>Explaining the different tmux modes</p> <ol> <li> <p>Default mode:</p> <p>You are in <code>Default mode</code> by default, and if you go into any other mode and then exit it, you'll end up back in Default mode.</p> </li> <li> <p>Copy mode:</p> <p>This allows us to access the Window history and <code>copy/paste</code> contents from that history.</p> </li> <li> <p>Command mode:</p> <p>This mode is used to enter arbitrary tmux commands. It is similar to the vi mode of the same name and can be accessed by <code>&lt;Prefix&gt;, :</code>.</p> </li> <li> <p>Clock mode:</p> <p>This mode shows the current time and is more of a novelty utility than an actual mode, like the rest. It can be accessed by <code>&lt;Prefix&gt;, t</code>.</p> </li> <li> <p>Control mode:</p> <p>This mode allows third-party applications to interact with tmux through a text-only protocol.</p> </li> </ol>"},{"location":"git/tmux.html#tmux-source-file","title":"tmux <code>source-file</code>","text":"<p>Example</p> UsageTheory <p><code>source-file</code>: Loads and executes commands from a file within the current Tmux session.</p> bash<pre><code>tmux source-file &lt;file_path&gt;\n</code></pre> <p>When you run <code>tmux source-file &lt;file_path&gt;</code>, Tmux reads the commands from the specified file and executes them as if they were entered directly into the Tmux command prompt.</p> <p>The <code>tmux</code> command is used to interact with a running Tmux session. source-file is an argument you can pass to tmux to execute commands from a specified file within the context of the current Tmux session.</p> <p>You might use tmux source-file in the following scenarios:</p> <ul> <li> <p>Reloading Tmux configuration: If you've made changes to your Tmux configuration file (<code>~/.tmux.conf</code> by default) and want to apply those changes to the current Tmux session without restarting it, you can use <code>tmux source-file ~/.tmux.conf</code>.</p> </li> <li> <p>Executing a series of commands: If you have a set of Tmux commands stored in a file and want to execute them together, you can use <code>tmux source-file &lt;file_path&gt;</code> to run them in sequence.</p> </li> <li> <p>Automating tasks: You can use <code>tmux source-file</code> within scripts or automation tools to apply Tmux configurations or perform actions programmatically.</p> </li> </ul> <p>Remember, <code>tmux source-file</code> is used to execute Tmux commands stored in a file, and it's typically used to apply configurations or perform actions within an existing Tmux session.</p>"},{"location":"git/tmux.html#-shorcuts-alias","title":"- Shorcuts <code>alias</code>","text":"<p>Question</p> bash<pre><code>\u200b$ tmux\u200b \u200blist-sessions\n# alias\n$ \u200btmux\u200b \u200bls \n\n\u200b$ tmux\u200b \u200bnew-session \u200b \u200b-s \u200b \u200bbasic\u200b\n# alias\n$ \u200btmux\u200b \u200bnew\u200b \u200b-s \u200b \u200bbasic\n\n# By using the -n flag, we tell tmux to name the first window so we can identify it easily.\n\u200b$ tmux\u200b \u200bnew\u200b \u200b-s \u200b \u200bwindows \u200b \u200b-n \u200b \u200bshell \n\n$ tmux rename-session -t old_name new_name\n# alias\n$ tmux rename -t old_name new_name.\u200b\n</code></pre>"},{"location":"git/tmux.html#-easter-eggs","title":"- Easter Eggs","text":"<p>Question</p> bash<pre><code># To display clock on the screen.\n&lt;Prefix&gt;, t\n\n\n# list of sessions and select any of them.\n&lt;Prefix&gt;, s \n\n# To attach last session, after you detach session\n$ tmux attach\n\n# display tmux keyboard shortcuts\n&lt;Prefix&gt;, ?\n</code></pre>"},{"location":"git/tmux.html#-commands","title":"- Commands","text":"<p>Default Commands for <code>Sessions</code>, <code>Windows</code>, and <code>Panes</code></p> <p>Abstract</p> Sessions CommandsWindows Commands <pre><code>Prefix + (  Switch to the previous session\nPrefix + )  Switch to the next session\nPrefix + s  Display an interactive session list\nPrefix + d  detach from the current session\nPrefix + $  rename a session in tmux\nPrefix + L  Select the most recently used session (or the last session).\n\n# List all available sessions\ntmux ls\n\n# Destroy all sessions and kill all processes\ntmux kill-server\n</code></pre> <pre><code>Prefix + c  Create a new window\nPrefix + p  Switch to the previous window\nPrefix + n  Switch to the next window\n\nPrefix + 0-9    Switch to a window using it\u2019s index number\n\nPrefix + w  Choose a window from an interactive list\n\nPrefix + &amp;  Force kill-all processes in an unresponsive window\nPrefix + %  Split windows horizontally\nPrefix + \u201c  Split windows vertically\n\nexit    Close a window\n\n---\n\n&lt;Prefix&gt;, n: Moves to the next window.\n&lt;Prefix&gt;, p: Moves to the previous window.\n\n&lt;Prefix&gt;, 0 ... 9:Selects windows by number.\n\n&lt;Prefix&gt;, w: Displays a selectable list of windows in the current session.\n&lt;Prefix&gt;, &amp;: Closes the current window after prompting for confirmation.\n\n&lt;Prefix&gt;, q: Momentarily displays pane numbers in each pane.\n&lt;Preix&gt;, x: Closes the current pane after prompting for confirmation.\n\n&lt;Prefix&gt;, space: Cycles through the various pane layouts.\n</code></pre> <p></p> tmux command mode <p>tmux <code>command</code> mode:</p> <p>In tmux, command mode allows you to interact with tmux commands without prefixing them with the tmux prefix key (by default, it's <code>Ctrl+b</code>). This can be convenient for executing a series of tmux commands quickly.</p> <p>To enter command mode in tmux, you can use the tmux prompt key, which is <code>:</code> (colon) by default. Pressing this key will bring up the tmux command prompt at the bottom of the terminal window.</p> <p>Here's how you can use command mode:</p> <ul> <li>Press Ctrl+b (default prefix key) to enter tmux command mode.</li> <li>Type : (colon). This will bring up the tmux command prompt at the bottom of the terminal window.</li> <li>Enter the tmux command you want to execute, for example, <code>split-window</code> to split the current window.</li> <li>Press Enter to execute the command.</li> </ul> <pre><code># Create a new window\n:new-window\n\n# Split the current window into multiple panes.\n:split-window\n\n# Split the current window into panes horizontally.\n:split-window -h\n\n# Detach from the tmux session.\n:detach-client\n\n# List all tmux sessions.\n:list-sessions\n\n# Reload the tmux configuration file.\n:source-file ~/.tmux.confS\n</code></pre>"},{"location":"git/tmux.html#plugins","title":"Plugins","text":"<p>tmux plugin manager: <code>tpm</code></p> <p>Installing: Tmux Plugin Manager - <code>TPM</code></p> bash<pre><code>git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm\n</code></pre> <pre><code># Here's how you can create a .tmux directory if you need it:\nmkdir ~/.tmux\n\n# To create a basic configuration file, you can do the following:\ntouch ~/.tmux.conf\n</code></pre> <ul> <li> <p>One way</p> <p>While in tmux session, press <code>prefix</code> + <code>I</code> (capital <code>i</code>, as in Install) to fetch the plugin.</p> <p><code>Notes</code>: The default prefix to tmux is <code>Ctrl+b</code>.</p> </li> <li> <p>Other way</p> <p>You can also reload the Tmux configuration file by running the following command to add the plugin.</p> bash<pre><code>tmux source ~/.tmux.conf\n</code></pre> </li> </ul>"},{"location":"git/tmux.html#tmux-resurrect","title":"tmux-resurrect","text":"<p>a plugin that allows to easily save and restore tmux environment after system restarts.</p> <p>Tip</p> UsageInstallation <p>Default key bindings: </p> <ul> <li>prefix+Ctrl-s :  save</li> <li>prefix+Ctrl-r :  restore</li> </ul> <p>Add plugin to the list of TPM plugins in <code>.tmux.conf</code>:</p> <pre><code>set -g @plugin 'tmux-plugins/tmux-resurrect'\n</code></pre> <p>Hit <code>prefix + I</code> to fetch the plugin and source it. You should now be able to use the plugin.</p>"},{"location":"git/tmux.html#tmux-continuum","title":"tmux-continuum","text":"<p>a plugin that automates the saving and restoring of the tmux environment.</p> <p>Tip</p> UsageInstallation <p>Continuous saving</p> <p>Tmux environment will be saved at the interval of 15 minutes. All the saving happens in the background without the impact to your workflow. This action starts automatically when the plugin is installed.</p> <p>Automatic tmux start</p> <p>Tmux is automatically started after the computer/server is turned on.</p> <p>Automatic restore</p> <p>Last saved environment is automatically restored when tmux is started. To enable this, put the following in the <code>.tmux.conf</code>:</p> tmux.conf<pre><code>set -g @continuum-restore 'on'\n</code></pre> <p>Installation with Tmux Plugin Manager (recommended)</p> <p>Please make sure you have <code>tmux-resurrect</code> installed.</p> <p>Add plugin to the list of TPM plugins in <code>.tmux.conf</code>:</p> tmux.conf<pre><code>set -g @plugin 'tmux-plugins/tmux-resurrect'\nset -g @plugin 'tmux-plugins/tmux-continuum'\n</code></pre> <p>Hit <code>prefix + I</code> to fetch the plugin and source it. The plugin will automatically start \"working\" in the background, no action required.</p>"},{"location":"git/tmux.html#reference","title":"Reference","text":"<ul> <li>Site Reference</li> <li> <p>tmux</p> </li> <li> <p>Books</p> </li> <li>Getting Started with tmux by Victor Quinn, J.D.</li> <li>tmux Taster by Mark McDonnell</li> <li> <p>tmux 2: Productive Mouse-Free Development by Brian P. Hogan</p> </li> <li> <p>Blog</p> </li> <li>Installing TPM</li> <li>usefull tmux configuration</li> <li>customizing tmux configuration</li> <li>tmux config</li> <li>Useful Tmux Configuration</li> <li>Terminal Setup with Zsh + Tmux + Dracula Theme</li> <li> <p>Replicate My Tmux Setup in Less Than 5 Minutes [Beginner Friendly!]</p> </li> <li> <p>Github</p> </li> <li>tmux plugins: github</li> <li>list of awesome tmux: github</li> <li>dracula tmux plugins: github</li> <li>draculatheme offical site</li> <li>EVERYTHING YOU NEED TO KNOW ABOUT TMUX \u2013 Reconstructing Tmux Sessions After Restarts</li> <li>Tmux/plugins/resurrect</li> <li> <p>tmux-continuum: github</p> </li> <li> <p>Stackoverflow</p> </li> <li>How to press Ctrl + b + capital I (trying to install plugins in tmux)?</li> </ul>"},{"location":"git/vite.html","title":"Vite","text":""},{"location":"git/vite.html#env-variables-and-modes","title":"Env Variables and Modes","text":""},{"location":"git/vite.html#env-variables","title":"Env Variables","text":"<p>Vite exposes env variables on the special import.meta.env object. Some built-in variables are available in all cases:</p> <ul> <li><code>import.meta.env.MODE</code></li> <li><code>import.meta.env.BASE_URL</code></li> <li><code>import.meta.env.PROD</code></li> <li><code>import.meta.env.DEV</code></li> <li><code>import.meta.env.SSR</code></li> </ul> <pre><code># .env.production\n\nVITE_APP_TITLE=My App\n\n# App.js\n\nconsole.log(import.meta.env.VITE_APP_TITLE)\n</code></pre> <p>This code should be added inside eslintConfig:</p> <pre><code>\"rules\": {\n    \"no-unused-vars\": \"off\"\n}\n</code></pre>"},{"location":"git/vite.html#reference","title":"Reference","text":"<ul> <li>Env Variables and Modes : Vite</li> <li>Vue: disable no-unused-vars error: the simplest fix</li> </ul>"},{"location":"interviewquestion/django.html","title":"DJANO Interview Question","text":""},{"location":"interviewquestion/javascript.html","title":"JavaScript","text":"<p>Core Begineer</p>"},{"location":"interviewquestion/javascript.html#1-difference-between-defer-and-async-attributes-in-javascript","title":"1. Difference between <code>defer</code> and <code>async</code> attributes in JavaScript?","text":"<p>The main difference between defer and async is the order of execution.</p> <p>Defer attribute</p> <p>A <code>&lt;script&gt;</code> element with a <code>defer</code> attribute, it will continue to load the HTML page and render it while the script is being downloaded. The script is executed after the HTML page has been completely parsed. <code>defer</code> scripts maintain their order in the document.</p> <pre><code>&lt;script defer src=\"script1.js\"&gt;&lt;/script&gt;\n&lt;script defer src=\"script2.js\"&gt;&lt;/script&gt;\n</code></pre> <p>In the example above, <code>script1.js</code> will be executed before <code>script2.js</code>. The browser will download both scripts in parallel, but <code>script1.js</code> will be executed after the HTML page has been parsed and <code>script2.js</code> will be executed after script1.js has been executed.</p> <p>Async attribute</p> <p>On the other hand, A <code>&lt;script&gt;</code> element with an <code>async</code> attribute, it will pause the HTML parser and execute the script immediately after it has been downloaded. The HTML parsing will resume after the script has been executed.</p> <pre><code>&lt;script async src=\"script1.js\"&gt;&lt;/script&gt;\n&lt;script async src=\"script2.js\"&gt;&lt;/script&gt;\n</code></pre> <p>In the example above, the browser will download both scripts in parallel, and execute them as soon as they are downloaded. The order of execution is not guaranteed.</p> <p>To know more you can check this diagram from us that explains the difference between <code>defer</code> and <code>async</code> in a visual way.</p>"},{"location":"interviewquestion/javascript.html#2-is-it-possible-to-run-javascript-outside-the-browser","title":"2. Is it possible to run JavaScript outside the browser?","text":"<p>Yes, it is possible to run JavaScript outside the browser. There are several ways to run JavaScript outside the browser. You can use Node.js, Deno, Bun, or any other JavaScript runtime environment.</p>"},{"location":"interviewquestion/javascript.html#3-how-to-parse-json-in-javascript","title":"3. How to parse JSON in JavaScript?","text":"<p>In order to parse JSON, you can use the <code>JSON.parse()</code> method. It parses a JSON string and returns the JavaScript equivalent.</p> <pre><code>const json = '{\"name\":\"JavaScript\",\"year\":1995}';\nconst roadmap = JSON.parse(json);\n\nconsole.log(roadmap.name); // JavaScript\nconsole.log(roadmap.year); // 1995\n</code></pre> <p>Core\u00b7Intermediate*</p>"},{"location":"interviewquestion/javascript.html#1-what-is-ternary-operator-in-javascript","title":"1. What is ternary operator in JavaScript?","text":"<p>The ternary operator is a conditional operator that takes three operands. It is frequently used as a shortcut for the if statement.</p> <pre><code>console.log(condition ? true : false);\n</code></pre>"},{"location":"interviewquestion/javascript.html#2-does-map-method-mutate-the-original-array","title":"2. Does <code>map()</code> method mutate the original array?","text":"<p>No, the <code>map() method</code> does not mutate the original array. It returns a new array with the results of calling a provided function on every element in the calling array.</p> <pre><code>const roadmaps = ['JavaScript', 'React', 'Node.js'];\n\nconst renamedRoadmaps = roadmaps.map((roadmap) =&gt; {\n  return `${roadmap} Roadmap`;\n});\n\nconsole.log(roadmaps); // ['JavaScript', 'React', 'Node.js']\nconsole.log(renamedRoadmaps); // ['JavaScript Roadmap', 'React Roadmap', 'Node.js Roadmap']\n</code></pre>"},{"location":"interviewquestion/javascript.html#3-what-is-the-difference-between-map-and-foreach-methods","title":"3. What is the difference between <code>map()</code> and <code>forEach()</code> methods?","text":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in the calling array. </p> <p>Whereas, the <code>forEach()</code> method executes a provided function once for each array element.</p>"},{"location":"interviewquestion/javascript.html#4-does-foreach-method-return-a-new-array","title":"4. Does <code>forEach()</code> method return a new array?","text":"<p>No, the <code>forEach()</code> method does not return a new array. It simply calls a provided function on each element in the array.</p> <pre><code>const roadmaps = ['JavaScript', 'React', 'Node.js'];\n\nroadmaps.forEach((roadmap) =&gt; {\n  console.log(roadmap);\n});\n</code></pre>"},{"location":"interviewquestion/javascript.html#5-what-is-the-difference-between-map-and-reduce-methods","title":"5. What is the difference between <code>map()</code> and <code>reduce()</code> methods?","text":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in the calling array. </p> <p>Whereas,  the <code>reduce()</code> method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.</p>"},{"location":"interviewquestion/javascript.html#6-how-to-use-reduce-method","title":"6. How to use <code>reduce()</code> method?","text":"<p>You can use the <code>reduce()</code> method to reduce an array to a single value. The <code>reduce()</code> method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.</p> <p>Syntax</p> <pre><code>array.reduce((accumulator, currentValue) =&gt; {\n  // ...\n}, initialValue);\n</code></pre> <p>Example</p> <p>You can use the <code>reduce()</code> method to sum all the numbers in an array.</p> <pre><code>const numbers = [1, 2, 3, 4, 5, 6];\n\nconst sum = numbers.reduce((accumulator, currentValue) =&gt; {\n  return accumulator + currentValue;\n}, 0);\n\nconsole.log(numbers); // [1, 2, 3, 4, 5, 6]\nconsole.log(sum); // 21\n</code></pre>"},{"location":"interviewquestion/javascript.html#7-can-you-merge-multiple-arrays-in-javascript","title":"7. Can you merge multiple arrays in JavaScript?","text":"<p>Yes, you can merge multiple arrays into one array using the <code>concat()</code> method, or the spread operator <code>....</code></p> <p>concat()</p> <p>The <code>concat()</code> method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.</p> <pre><code>const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\n\nconst arr3 = arr1.concat(arr2);\nconsole.log(arr3); // [1, 2, 3, 4, 5, 6]\n</code></pre> <p>Spread operator</p> <p>The spread operator <code>...</code> is used to expand an iterable object into the list of arguments.</p> <pre><code>const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\n\nconst arr3 = [...arr1, ...arr2];\nconsole.log(arr3); // [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"interviewquestion/javascript.html#8-what-is-the-spread-operator-in-javascript","title":"8. What is the spread operator in JavaScript?","text":"<p>The spread operator in JavaScript is represented by three dots (...). It allows the elements of an array or properties of an object to be expanded or \"spread\" into individual elements or properties. This can be useful in various contexts, such as when passing elements as function arguments, cloning arrays and objects, or merging arrays and objects.</p> <pre><code>const roadmaps = ['JavaScript', 'React', 'Node.js'];\nconst bestPractices = ['AWS', 'API Security'];\n\nconst resources = [...roadmaps, ...bestPractices];\nconsole.log(resources); \n// ['JavaScript', 'React', 'Node.js', 'AWS', 'API Security']\n</code></pre> <pre><code>const roadmap = {\n  name: 'JavaScript',\n  type: 'dynamic',\n};\n\nconst roadmapClone = { ...roadmap }; // shallow copy\nconsole.log(roadmapClone); // { name: 'JavaScript', type: 'dynamic' }\n</code></pre> <p>Core Advanced</p>"},{"location":"interviewquestion/javascript.html#1-garbage-collection-in-javascript","title":"1. Garbage collection in JavaScript?","text":"<p>The JavaScript engine uses automatic garbage collection.  JavaScript automatically manages memory by freeing up space used by objects no longer needed.  This algorithm is called Mark and Sweep, which is performed periodically by the JavaScript engine.</p>"},{"location":"interviewquestion/javascript.html#2-what-are-heap-and-stack-in-javascript","title":"2. What are Heap and Stack in JavaScript?","text":"<p>The Heap and Stack in JavaScript Engine are two different data structures that store data in different ways.</p> <p>Stack</p> <p>The Stack is a small, organized region of memory. It is where primitive values, function calls, and local variables are stored. It follows a \"Last In, First Out\" (LIFO) order, meaning that the last item added to the stack is the first one to be removed. Each function invocation creates a new stack frame, which contains the function's local variables, return address, and other contextual data.</p> <p>Heap</p> <p>The Heap is a large, mostly unstructured region of memory. It is where <code>objects</code>, <code>arrays</code>, and <code>functions</code> are stored. Variables from the Stack (e.g., in functions) point to locations in the Heap for these dynamically allocated structures.</p> <p>When you declare a primitive type (like a number or boolean), it's usually managed in the stack. But when you create an object, array, or function, it's stored in the heap, and the stack will hold a reference to that location in the heap.</p> <p>For example:</p> <pre><code>// Stored on the stack\nconst name = 'JavaScript'; \n\n// `roadmap` reference on the stack, actual object { name: 'JS' } in the heap\nconst roadmap = { name: 'JS' }; \n</code></pre> <p>In the code above, the primitive value <code>JavaScript</code> for variable <code>name</code> is directly stored on the stack. For the object assigned to <code>roadmap</code>, its actual data resides in the heap, and the reference to this data (a memory address pointer) is held on the stack.</p> <p>Function Advanced</p>"},{"location":"interviewquestion/javascript.html#1-what-is-iife-in-javascript","title":"1. What is IIFE in JavaScript?","text":"<p>The IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined.</p> <pre><code>(function () {\n  console.log('Hello Roadmap!');\n})();\n</code></pre> <p>The IIFE is frequently used to create a new scope to avoid variable hoisting from within blocks.</p> <pre><code>(function () {\n  var roadmap = 'JavaScript';\n  console.log(roadmap);\n})();\n\nconsole.log(roadmap); // ReferenceError: name is not defined\n</code></pre> <p>Operator Beginner</p>"},{"location":"interviewquestion/javascript.html#1-what-is-nullish-coalescing-operator","title":"1. What is Nullish Coalescing Operator?","text":"<p>The Nullish Coalescing Operator (<code>??</code>) returns the right operand if the left one is <code>null</code> or <code>undefined</code>, otherwise, it returns the left operand. It's useful for setting default values without considering falsy values like <code>0</code> or <code>''</code> as absent.</p> <pre><code>console.log(null ?? 'hello'); // hello\nconsole.log(undefined ?? 'hello'); // hello\nconsole.log('' ?? 'hello'); // ''\nconsole.log(0 ?? 'hello'); // \n</code></pre> <p>DOM Beginner</p>"},{"location":"interviewquestion/javascript.html#1-how-to-measure-dimensions-of-an-element","title":"1. How to measure dimensions of an Element?","text":"<p>You can use <code>getBoundingClientRect</code> method to get the dimensions of an element.</p> <pre><code>const roadmapWrapper = document.querySelector('.roadmap-wrapper');\nconst dimensions = roadmapWrapper.getBoundingClientRect();\n\nconsole.log(dimensions); \n// DOMRect { x: 8, y: 8, width: 784, height: 784, top: 8, right: 792, bottom: 792, left: 8 }\n</code></pre>"},{"location":"interviewquestion/javascript.html#2-how-to-get-viewport-dimensions-in-javascript","title":"2. How to get viewport dimensions in JavaScript?","text":"<p>You can use <code>window.innerWidth</code> and <code>window.innerHeight</code> to get the viewport dimensions.</p>"},{"location":"interviewquestion/javascript.html#3-how-to-scroll-to-the-top-of-the-page-using-javascript","title":"3. How to scroll to the top of the page using JavaScript?","text":"<p>In order to scroll to the top of the page, we can use the <code>scrollTo</code> method.</p> <pre><code>window.scrollTo(0, 0);\n</code></pre>"},{"location":"interviewquestion/javascript.html#reference","title":"Reference","text":"<ul> <li>roadmap.sh/questions/javascript</li> </ul>"},{"location":"interviewquestion/react.html","title":"React","text":"<p>Core Advanced</p>"},{"location":"interviewquestion/react.html#1-what-is-reconciliation-in-react","title":"1. What is Reconciliation in React ?","text":"<p>Reconciliation is the process through which React updated the DOM by comparing the newly returned elements with the previously rendered ones.</p> <p>React updates the DOM when a component's state changes.</p>"},{"location":"interviewquestion/react.html#2-what-is-react-fiber","title":"2. What is React Fiber ?","text":"<p>React Fiber is the reconciliation engine that replaced the core algorithm in React v16.</p> <p>It is a rewrite of the core algorighm, responsible for scheduling what get rendered on screen.</p> <p>It is a set of algorithms for efficiently updating the UI.</p>"},{"location":"interviewquestion/react.html#3-explain-the-concept-of-error-boundaries-in-react","title":"3. Explain the concept of error boundaries in React.","text":"<p>Error boundaries are special React components that catch JavaScript errors during rendering, in lifecycle methods, and during the constructor of whole tree below them.</p> <p>You can use <code>react-error-boundary</code> package to create error boundaries in your application.</p> <pre><code># Installation\n$ npm i react-error-boundary\n</code></pre> <p>Core Intermediate</p>"},{"location":"interviewquestion/react.html#1-what-is-the-high-order-components-hocs","title":"1. What is the High-Order Components (HOCs)?","text":"<p>A High-Order Components (HOCs) is a function that takes a component and returns a new component.</p> <p>Basically, it's a pattern that is derived from React Compositional nature.</p> <p>High-order components are not part of the React API. They are the pattern that emerges from React Compositional nature.</p>"},{"location":"interviewquestion/react.html#2-how-react-virtual-dom-works","title":"2. How React Virtual DOM works?","text":"<p>Virtual DOM works in this steps:</p> <ul> <li>Whenever any underlying data changes, new virtual DOM representation will be created.</li> <li>Then the difference between the previous DOM representation and the new one is calculated.</li> <li>Once the calculations are done, the real DOM will be updated with only the things that have actually changed.</li> </ul>"},{"location":"interviewquestion/react.html#3-what-is-the-purpose-of-the-useeffect-hook-in-react","title":"3. What is the purpose of the <code>useEffect</code> hook in React?","text":"<p>The useEffect hook in React is used for performing side effects in functional components. Side effects can include data fetching, DOM manipulation, and subscribing to external data sources.</p> <p>Core Beginner</p>"},{"location":"interviewquestion/react.html#1-what-is-the-naming-convention-for-react-components","title":"1. What is the naming convention for React components?","text":"<p>In React, the naming convention for components is to use PascalCase, meaning the first letter of each word in the component's name should be capitalized. </p> <p>For example, <code>UserProfile</code>, <code>SidebarItem</code>, or <code>NavigationMenu</code>. This convention differentiates custom React components from regular HTML tags in JSX, as React treats elements starting with a lowercase letter as DOM tags and those starting with a capital letter as custom components.</p>"},{"location":"interviewquestion/react.html#2-what-is-the-difference-between-class-components-and-function-components","title":"2. What is the difference between class components and function components?","text":"<p>Class components let you define your components with the help of classes. You can extend from <code>React.Component</code> class to create a component. Class components also allow you to define component level lifecycle methods. </p> <p>Functional components are the preferred way to write React components. There are no lifecycle methods similar to class components available in functional components; you can use React hooks instead to manage the component lifecycle.</p>"},{"location":"interviewquestion/react.html#3-can-we-change-the-state-of-the-component-directly","title":"3. Can we change the state of the component directly?","text":"<p>No, we can't change the state of the component directly. State can only be changed by using <code>setState()</code> method. Changing the state variable directly won't re-render the component.</p>"},{"location":"interviewquestion/react.html#4-what-is-the-purpose-of-key-attribute-in-react","title":"4. What is the purpose of <code>key</code> attribute in React?","text":"<p>The string attribute <code>key</code> is a special attribute you need to include when rendering an array of elements. Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity.</p>"},{"location":"interviewquestion/react.html#5-how-to-render-html-in-react","title":"5. How to render HTML in React?","text":"<p>You can use <code>dangerouslySetInnerHTML</code> prop to render HTML in React. It is used to set HTML directly from React. You should be careful while using this property as it can cause XSS attacks.</p>"},{"location":"interviewquestion/react.html#6-how-to-render-a-list-in-react","title":"6. How to render a list in React?","text":"<p>In React, you can render a list by using the JavaScript map function to iterate over an array of items and return a JSX element for each item. It's important to provide a unique key prop to each element in the list for React's diffing algorithm to function efficiently during re-renders. Here's a basic example:</p> <pre><code>const items = ['Apple', 'Banana', 'Cherry'];\n\nfunction FruitList() {\n  return (\n    &lt;ul&gt;\n      {items.map((fruit, index) =&gt; (\n        &lt;li key={index}&gt;{fruit}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre> <p>Note: While using the index as a key can work in some cases, it's generally not recommended for dynamic lists where items can be added, removed, or reordered.</p>"},{"location":"interviewquestion/react.html#7-what-is-the-difference-between-stateful-and-stateless-components","title":"7. What is the difference between stateful and stateless components?","text":"<p>The main difference between stateful and stateless components is one has state and the other doesn't. </p> <p>Stateful components keep track of changes to their state and re-render themselves when the state changes. </p> <p>Stateless components, on the other hand, render whatever is passed to them via <code>props</code> or always render the same thing.</p>"},{"location":"interviewquestion/react.html#8-whats-the-components-lifecycle-in-react","title":"8. What's the component's lifecycle in React?","text":"<p>In React functional components, lifecycle-like behaviors are achieved using hooks:</p> <p>Mounting and Unmounting</p> <p>Utilizing the useEffect hook with an empty dependency array ([]) ensures the hook runs after the component mounts to the DOM.</p> <pre><code>useEffect(() =&gt; {\n  // do something after component mounts\n  return () =&gt; {\n    // do something before component unmounts\n  };\n}, []);\n</code></pre> <p>The <code>cleanup function</code> returned within the useEffect callback offers a mechanism for handling tasks when the component is about to unmount.</p> <p>Updates</p> <p>The useEffect hook, when invoked without a dependency array or with specific dependencies, executes after every render or when specified prop/state changes are detected.</p> <pre><code>useEffect(() =&gt; {\n  // do something after every render\n});\n</code></pre> <pre><code>useEffect(() =&gt; {\n  // do something after specific prop/state changes\n}, [state1, state2]);\n</code></pre> <p>Performance\u00b7Beginner</p>"},{"location":"interviewquestion/react.html#why-you-shouldnt-use-index-as-a-key-in-react-lists-and-iterators","title":"Why you shouldn't use <code>index</code> as a key in React lists and iterators?","text":"<p>Using <code>index</code> as a key can negatively impact performance and may cause issues with the component state.  When the list items change due to additions, deletions, or reordering, using indexes can lead to unnecessary re-renders or even incorrect UI updates. React uses keys to identify elements in the list, and if the key is just an index, it might reuse component instances and state inappropriately. Especially in cases where the list is dynamic or items can be reordered, it's recommended to use unique and stable identifiers as keys to ensure consistent behavior.</p> <p>Performance\u00b7Intermediate</p>"},{"location":"interviewquestion/react.html#what-is-the-purpose-of-the-usememo-hook-in-react","title":"What is the purpose of the <code>useMemo</code> hook in React?","text":"<p>The <code>useMemo hook</code> is used to memoize the result of a computationally expensive operation in a functional component. It helps optimize performance by caching the result of the operation and returning the cached result on subsequent renders if the dependencies have not changed. This can prevent unnecessary calculations.</p> <p>State\u00b7Intermediate</p>"},{"location":"interviewquestion/react.html#what-is-the-purpose-of-the-usecontext-hook-in-react","title":"What is the purpose of the <code>useContext</code> hook in React?","text":"<p>The <code>useContext hook</code> is used to access and consume context values in functional components. It provides a way to access context data without the need for a context consumer. useContext is particularly useful when you want to access context values in nested components without having to pass props through intermediate components.</p>"},{"location":"interviewquestion/react.html#reference","title":"Reference","text":"<ul> <li>roadmap.sh/questions/react</li> <li>reactjs interview question : github</li> </ul>"},{"location":"interviewquestion/terminology.html","title":"Terminology","text":""},{"location":"interviewquestion/terminology.html#reactive-programming","title":"Reactive Programming","text":"<ul> <li>Reactive Programming is a paradigm based on asynchronus data streams that propagate changes during the application lifcycle. [pg-11]</li> <li>Another important concept on Reactive Programming is the way we are communication within objects. [pg-12]</li> <li>Reactive porgarmming is used for handling the propagation of data during the life cycle of an application. []</li> </ul>"},{"location":"interviewquestion/terminology.html#solid-principle","title":"Solid Principle","text":"<p>SOLID is a set of principles created by Uncle Bob.</p> <p>S - Single-responsibility principle</p> <p>O - open-closed principle</p> <p>L - Liskov Substitution principle</p> <p>I - Interface Segregation principle</p> <p>D - Dependency Inversion principle</p>"},{"location":"interviewquestion/terminology.html#reference","title":"Reference","text":"<ul> <li>Front End Reactive Architecture</li> </ul>"},{"location":"more/intro.html","title":"Introduction","text":"<ul> <li> <p> Debian</p> </li> <li> <p> Redis</p> </li> <li> <p>: Certification</p> </li> <li> <p> Rabbitmq</p> </li> <li> <p> Celery</p> </li> <li> <p> vitest</p> </li> <li> <p> Git</p> </li> <li> <p> tmux</p> </li> </ul>"},{"location":"more/books/docker-compose.html","title":"Docker yml","text":""},{"location":"more/books/docker-compose.html#django-with-mysql","title":"<code>Django</code> with <code>MySql</code>","text":"<p>If you choose <code>Docker Compose</code> to deploy your Django web application along with a MySQL database, you would typically follow these steps:</p> <ul> <li><code>Dockerfile</code> for Django App:</li> </ul> <p>Here's a basic example of what a Dockerfile for a Django application might look like:</p> <pre><code>FROM python:3.9\n\nWORKDIR /app\n\nCOPY requirements.txt /app/\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . /app/\n\nCMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]\n</code></pre> <ul> <li><code>docker-compose.yml</code>:</li> </ul> <p>Below is an example <code>docker-compose.yml</code> file for a Django app with a MySQL database:</p> <pre><code>  version: '3'\n\n  services:\n  db:\n      image: mysql:5.7\n      restart: always\n      environment:\n      MYSQL_DATABASE: 'mydatabase'\n      MYSQL_USER: 'myuser'\n      MYSQL_PASSWORD: 'mypassword'\n      MYSQL_ROOT_PASSWORD: 'rootpassword'\n      ports:\n      - '3306:3306'\n\n  web:\n      build: .\n      command: python manage.py runserver 0.0.0.0:8000\n      volumes:\n      - .:/app\n      ports:\n      - '8000:8000'\n      depends_on:\n      - db\n</code></pre> <ul> <li>Django <code>Settings</code>:</li> </ul> <p>Make sure your Django application's settings are configured to use the MySQL database. You'll need to update the <code>DATABASES</code> setting in your Django <code>settings.py</code> file to point to the MySQL database container</p> <ul> <li>Run <code>Docker Compose</code>:</li> </ul> <p>Run docker-compose up in the directory containing your docker-compose.yml file. This command will start the containers defined in the docker-compose.yml file. Docker Compose will build the Docker images (if necessary) and start the containers for your Django app and MySQL database.</p> <ul> <li><code>Access</code> Your Application:</li> </ul> <p>Once Docker Compose has started the containers, you should be able to access your Django application by navigating to <code>http://localhost:8000</code> in your web browser.</p>"},{"location":"more/books/jenkins-guide.html","title":"Jenkins Guide","text":"<p>jenkins</p> <ol> <li> <p>Adding Restart Policies:</p> <p>You might want to add a restart policy to ensure that the Jenkins container automatically restarts if it crashes or if Docker restarts. This can be done using the <code>--restart</code> flag. For example, you could use <code>--restart</code> unless-stopped to ensure the container restarts unless explicitly stopped.</p> </li> <li> <p>Volume Mounts for Persistence:</p> <p>Jenkins typically stores its data in <code>/var/jenkins_home</code> directory within the container. If you want to persist Jenkins data between container restarts or updates, you can mount a volume from the host machine to this directory. This can be achieved using the <code>-v</code> flag. For example, <code>-v</code> <code>jenkins_home:/var/jenkins_home</code> would mount a volume named <code>jenkins_home</code> to the Jenkins home directory.</p> </li> </ol> bash<pre><code>docker run -d \\\n  -p 8080:8080 \\\n  -p 50000:50000 \\\n  --name jenkins \\\n  --restart unless-stopped \\\n  -v jenkins_home:/var/jenkins_home \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  jenkins/jenkins:lts\n</code></pre> <p>This command ensures that the Jenkins container runs in detached mode, exposes ports <code>8080</code> and <code>50000</code>, has a restart policy set to \"unless stopped,\" mounts a volume named <code>jenkins_home</code> for data persistence, and uses the LTS version of the Jenkins image.</p> <p>Notes:</p> <p>The <code>-v</code> flag in Docker is used to specify volume mounts. It allows you to create a persistent data volume outside the container and mount it into the container at a specified path.</p> <p>For example, <code>-v</code> <code>/host/directory:/container/directory</code> would mount the directory <code>/host/</code>directory on the host machine into the directory <code>/container/directory</code> within the container.</p> <p>In the context of running Jenkins, you typically want to persist Jenkins data, such as configuration, plugins, and job data, across container restarts. This is achieved by mounting a volume to the <code>/var/jenkins_home</code> directory within the Jenkins container.</p> <p>So, when you use <code>-v</code> <code>jenkins_home:/var/jenkins_home</code>, Docker will create a volume named jenkins_home and mount it into the <code>/var/jenkins_home</code> directory in the container. This ensures that Jenkins data is stored outside the container and persists even if the container is removed or recreated.</p> <p>In summary, when you see <code>-v</code> in a Docker command, it's indicating a volume mount, allowing you to persist data outside the container.</p>"},{"location":"more/books/jenkins-guide.html#docker-with-docker-in-docker-dind","title":"Docker with Docker-in-Docker (DinD):","text":"<p>If you're running Jenkins within a Docker container, you can use Docker-in-Docker (DinD) to allow Jenkins to run Docker commands inside its own Docker containers. However, this approach has security implications and might not be recommended for production use without proper precautions.</p> bash<pre><code>docker run -d \\\n  -p 8080:8080 \\\n  -p 50000:50000 \\\n  --name jenkins \\\n  --restart unless-stopped \\\n  -v jenkins_home:/var/jenkins_home \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  jenkins/jenkins:lts\n</code></pre> <p>If you want to include Docker-in-Docker (DinD) functionality in your Jenkins container setup, you'll need to bind the Docker socket (/var/run/docker.sock) from the host machine to the Jenkins container. This allows the Jenkins container to communicate with the Docker daemon running on the host machine.</p> <p>Here's the modified command to include the Docker socket binding:</p> bash<pre><code>docker run -d \\\n  -p 8080:8080 \\\n  -p 50000:50000 \\\n  --name jenkins \\\n  --restart unless-stopped \\\n  -v jenkins_home:/var/jenkins_home \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  jenkins/jenkins:lts\n</code></pre> <p>I've added <code>-v</code> <code>/var/run/docker.sock:/var/run/docker.sock</code> to the command, which binds the Docker socket from the host to the Jenkins container. This allows Jenkins to execute Docker commands inside the container.</p> <p>Now, with this setup, your Jenkins container will have access to Docker commands, allowing you to run Docker builds, start containers, and manage images as part of your Jenkins jobs or pipeline. Make sure to consider the security implications of allowing Jenkins to access the Docker daemon in this way.</p> <p> Solving </p> <p>If you want to pull Docker images within your Jenkins Dockerfile without adding the Docker installation steps, you can indeed simplify your Dockerfile. Here's how you can modify it to only pull Docker images:</p> bash<pre><code>FROM jenkins/jenkins:lts\n\nUSER root\n\n# Add Jenkins user to Docker group\nRUN usermod -aG docker jenkins\n\nUSER jenkins\n</code></pre> <p>With this Dockerfile, you're starting from the official Jenkins LTS image, switching to the root user to add the Jenkins user to the Docker group, and then switching back to the Jenkins user. This will allow Jenkins to pull Docker images without needing to install Docker within the Jenkins container itself.</p> <p>Remember that for this to work, you'll still need to mount the Docker socket from the host machine into the Jenkins container when you run the container. This will allow Jenkins to communicate with the Docker daemon running on the host and pull Docker images. Here's an example of how you can run the container with the Docker socket mounted:</p> bash<pre><code>docker run -d \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -p 8080:8080 \\\n  -p 50000:50000 \\\n  --name jenkins \\\n  your_custom_jenkins_image\n</code></pre> <p>Replace <code>your_custom_jenkins_image</code> with the name of your custom Jenkins image built from the Dockerfile. With this setup, your Jenkins container will be able to pull Docker images using the Docker CLI on the host machine.</p>"},{"location":"more/books/jenkins-guide.html#docker-images-types","title":"Docker Images Types","text":"<p>In Docker, an <code>image</code> is a lightweight, standalone, and executable package that includes everything needed to run a piece of software, including the code, a runtime, libraries, environment variables, and configuration files. When you run a Docker image, it creates a container, which is an instance of that image.</p> <p>Whether an image \"runs\" or not depends on what it's designed to do:</p> <ol> <li> <p>Runnable Images:</p> <p>These are images designed to start a process or service that runs continuously or performs some action until explicitly stopped. Examples include web servers, databases, or any other application that provides a service and needs to keep running.</p> </li> <li> <p>One-shot Images:</p> <p>Some images are designed to perform a specific task or action and then exit. These images are typically used for utilities, scripts, or diagnostic tools. They execute their task and then terminate. The <code>hello-world</code> image is an example of this. Other examples might include images for performing backups, data migrations, or other batch operations.</p> </li> </ol> <p>So, all images can be run, but the behavior of what they do when they're run can differ. Some images are meant to continuously run services, while others perform a task and then exit.</p> <p>Notes:</p> <p>Containers need a runnable image to exist. </p>"},{"location":"more/books/jenkins-guide.html#types-of-containers-in-docker","title":"Types of Containers in Docker","text":"<ul> <li>Stateless Containers</li> <li>Stateful Containers</li> <li>Ephemeral Containers</li> </ul>"},{"location":"more/books/jenkins-guide.html#dockerfile-application","title":"Dockerfile application","text":"<p>To create a simple HTML file with \"Hello, World!\" content and then build a Docker image containing this HTML file, you can follow these steps:</p> <ol> <li> <p>Create a simple HTML file named index.html with the \"Hello, World!\" content:</p> html<pre><code>&lt;!-- index.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Hello, World!&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, World!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Create a <code>Dockerfile</code> in the same directory to build the Docker image:</p> <pre><code># Dockerfile\nFROM nginx:alpine\nCOPY index.html /usr/share/nginx/html/index.html\n</code></pre> </li> <li> <p>Now, build the Docker image using the docker build command:</p> bash<pre><code>docker build -t hello-world-html .\n</code></pre> <p>This command builds a Docker image named <code>hello-world-html</code> using the Dockerfile in the current directory (<code>.</code>).</p> </li> <li> <p>Once the image is built, you can run a container from it:</p> bash<pre><code>docker run -d -p 8080:80 --name hello-world-container hello-world-html\n</code></pre> <p>This command runs a container from the <code>hello-world-html</code> image, maps port <code>8080</code> on the host to port 80 in the container (<code>-p 8080:80</code>), and gives the container a name (<code>--name hello-world-container</code>).</p> <p>Now, you can visit <code>http://localhost:8080</code> in your web browser to see the \"<code>Hello, World!</code>\" message served by the Docker container running the HTML file.</p> </li> </ol> <p>That's it! You've created a simple HTML file, built a Docker image containing it, and run a Docker container serving the HTML content.</p>"},{"location":"more/books/jenkins-guide.html#pushing-images-to-dockerhub","title":"Pushing <code>images</code> to <code>Dockerhub</code>","text":"<p>To push your Docker image to Docker Hub (which is commonly referred to as Docker's public registry), you need to follow these steps:</p> <ul> <li> <p>Tag your image:</p> <p>Before pushing your image, you need to tag it with your Docker Hub username and the repository name. The format is <code>username/repository:tag</code>. If you haven't tagged your image yet, you can do it using the following command:</p> bash<pre><code>docker tag hello-world-html yourusername/hello-world-html:latest\n</code></pre> <p>Replace <code>hello-world-html</code> with the name of your local image, and <code>yourusername</code> with your Docker Hub username. You can choose any tag you want; <code>latest</code> is commonly used.</p> </li> <li> <p>Log in to Docker Hub:</p> <p>Use the docker login command to log in to your Docker Hub account.</p> bash<pre><code>docker login\n</code></pre> <p>Enter your Docker Hub username and password when prompted.</p> </li> <li> <p>Push your image:</p> <p>After logging in, you can push your image to Docker Hub using the docker push command:</p> bash<pre><code>docker push yourusername/hello-world-html:latest\n</code></pre> <p>Replace <code>yourusername/hello-world-html:latest</code> with the full name of your image, including the tag you used.</p> </li> <li> <p>Verify:</p> <p>Once the push is complete, you can go to your Docker Hub account in your web browser to verify that the image has been successfully pushed.</p> </li> </ul> <p>Your image is now available on Docker Hub and can be pulled by anyone with access to it. Remember that if you plan to share your image publicly, make sure not to include any sensitive information or credentials within the image.</p>"},{"location":"more/books/jenkins-guide.html#reference","title":"Reference","text":"<ul> <li> <p>What is a Docker image?</p> </li> <li> <p>Different Types of Docker Containers</p> </li> <li> <p>Docker images</p> </li> </ul>"},{"location":"more/books/pocket-devops.html","title":"Pocker Devops","text":""},{"location":"more/books/pocket-devops.html#devops","title":"Devops","text":""},{"location":"more/books/pocket-devops.html#running-hello-world-in-docker","title":"Running Hello World in Docker","text":"<p>Problem</p> <p>You have access to a Docker host and want to run your first container. You want to learn the various life cycles of a container. As an example, you want to run a container and echo Hello World in it.</p> <p>Solution</p> <p>Typing docker at the prompt returns the usage of the docker command:</p> <p><code>$ docker</code></p> <p>Usage: <code>docker [OPTIONS] COMMAND [arg...]</code></p> <p>A self-sufficient runtime for linux containers.</p> <pre><code>Unable to find image 'busybox' locally\nbusybox:latest: The image you are pulling has been verified\n511136ea3c5a: Pull complete\ndf7546f9f060: Pull complete\ne433a6c5b276: Pull complete\ne72ac664f4f0: Pull complete\nStatus: Downloaded newer image for busybox:latest\nhello world\n</code></pre> <p>Containers are based on images. An image needs to be passed to the <code>docker run</code> command. In the preceding example, you specify an image called busybox. Docker does not have this image locally and pulls it from a public registry. A registry is a catalog of Docker images that the Docker client can communicate with and download images from. Once the image is pulled, Docker starts a container and executes the echo hello world command. Congratulations\u2014you ran your first container.</p>"},{"location":"more/books/pocket-devops.html#knowing-the-difference-between-containers-and-virtual-machines","title":"Knowing the Difference Between Containers and Virtual Machines","text":"<p>In comparison, with <code>containers</code>, the sharing of the host OS\u2019s kernel with the application means that the overhead of an additional OS is removed.</p>"},{"location":"more/books/pocket-devops.html#dockerfile","title":"Dockerfile","text":"<p>A Dockerfile is a set of instructions that tells Docker how to build an image. A typical Dockerfile is made up of the following:</p> <ul> <li>A <code>FROM</code> instruction that tells Docker what the base image is</li> <li>An <code>ENV</code> instruction to pass an environment variable.</li> <li>A <code>RUN</code> instruction to run some shell commands (for example, install-dependent programs not available in the base image).</li> <li>A <code>CMD</code> or an <code>ENTRYPOINT</code> instruction that tells Docker which executable to run when a container is started.</li> </ul>"},{"location":"more/books/pocket-devops.html#docker-image","title":"Docker Image","text":"<p><code>Docker image</code> is a read-only template that forms the foundation of your application Docker images are created using a <code>series of commands</code>, known as instructions, in the <code>Dockerfile</code>. </p> <p>Breakdown of a <code>.Dockerfile</code></p> <ul> <li>A Docker image starts with a base image, such as Ubuntu.</li> <li>On top of this image, we can add build our application stack adding the packages as and when required.</li> </ul> <p>Notes:</p> <p>On the advanced scale, to keep the image size as low as possible, we can also start with slim packages, such as <code>Alpine</code> or even Scratch, which is Docker\u2019s reserved, minimal starting image for building other images.</p> <p>Every Docker image has an <code>associated tag</code>. Tags typically include <code>names</code> and <code>version labels</code>. While it is not mandatory to associate a version tag with a Docker image name, these tags make it easier to roll back to previous versions. Without a tag name, Docker must fetch the image with the latest tag. You can also provide a tag name to force-fetch a tagged image.</p>"},{"location":"more/books/pocket-devops.html#docker-container","title":"Docker Container","text":"<p>A Docker image, when it\u2019s run in a host computer, spawns a process with its own namespace, known as a Docker container.</p> <p>The <code>main difference between</code> a Docker <code>image</code> and a <code>container</code> is the presence of a thin read/write layer known as the container layer. Any changes to the filesystem of a container, such as writing new files or modifying existing files, are done to this writable container layer than the lower layers.</p> <p>An important aspect to grasp is that when a container is running, the changes are applied to the container layer and when the container is stopped/killed, the container layer is not saved. Hence, all changes are lost. </p> <p>This aspect of containers is not understood very well and for this reason, stateful applications and those requiring persistent data were initially not recommended as containerized applications. However, with <code>Docker Volumes</code>, there are ways to get around this limitation.</p>"},{"location":"more/books/pocket-devops.html#bind-mounts-and-volumes","title":"Bind Mounts and Volumes","text":"<p>Docker provides different ways to mount data into a container from the Docker host: </p> <ul> <li>volumes,</li> <li>bind mounts, &amp; </li> <li>tmpfs volumes.</li> </ul> <p>While <code>tmpfs volumes</code> are stored in the host system\u2019s memory only, <code>bind mounts</code> and <code>volumes</code> are stored in the host filesystem</p>"},{"location":"more/books/pocket-devops.html#docker-engine","title":"Docker Engine","text":"<p>Docker Engine is the core part of Docker. Docker Engine is a client-server application that provides the platform, the runtime, and the tooling for building and managing Docker images, Docker containers, and more. Docker Engine provides the following:</p> <ul> <li>Docker daemon</li> <li>Docker CLI</li> <li>Docker API</li> </ul>"},{"location":"more/books/pocket-devops.html#docker-daemon","title":"Docker Daemon","text":"<p>The Docker daemon is a <code>service</code> that runs in the background of the host computer and handles the heavy lifting of most of the Docker commands. The daemon listens for API requests for creating and managing Docker objects, such as <code>containers</code>, <code>networks</code>, and <code>volumes</code>.</p>"},{"location":"more/books/pocket-devops.html#docker-cli","title":"Docker CLI","text":"<p>Docker CLI is the primary way that you will interact with Docker. Docker CLI exposes a set of commands that you can provide. The Docker CLI forwards the request to Docker daemon, which then performs the necessary work.</p> <p>While the Docker CLI includes a huge variety of commands and sub-commands, the most common commands that we will work with in this book are as mentioned:</p> bash<pre><code>$ docker build\n$ docker pull\n$ docker run\n$ docker exec\n</code></pre>"},{"location":"more/books/pocket-devops.html#docker-api","title":"Docker API","text":"<p>Docker also provides an API for interacting with the Docker Engine. This is particularly useful if there\u2019s a need to create or manage containers from within applications. </p>"},{"location":"more/books/pocket-devops.html#docker-compose","title":"Docker Compose","text":"<p>Docker Compose is a tool for defining and <code>running multi-container applications</code>. Much like how Docker allows you to build an image for your application and run it in your container, Compose use the same images in combination with a definition file (known as the compose file) to build, launch, and run multi-container applications, including dependent and linked containers.</p> <p>The most common use case for Docker Compose is to run applications and their dependent services (such as databases and caching providers) in the same simple, streamlined manner as running a single container application.</p>"},{"location":"more/books/pocket-devops.html#volume","title":"Volume","text":"<p>Docker volumes are the current recommended method of persisting data stored in containers. Volumes are completely managed by Docker and have many advantages over bind mounts:</p>"},{"location":"more/books/pocket-devops.html#docker-volume-subcommands","title":"Docker Volume Subcommands","text":"<p>Docker exposes the Volume API as a series of subcommands.</p> bash<pre><code>$ docker volume create\n\n$ docker volume inspect\n\n$ docker volume ls\n\n$ docker volume prune\n\n$ docker volume rm\n</code></pre>"},{"location":"more/books/pocket-devops.html#hands-on-docker-commands","title":"Hands on Docker <code>Commands</code>","text":"bash<pre><code># Make sure the docke in installed\n$ docker info\n\n# Working with Docker Images\n# listing of the images available locally\n$ docker image ls\n\n# docker inspect command provides a lot of information about the image\n$ docker image inspect hello-world\n\n# Of importance are the image properties Env, Cmd, and Layers,\n# which tell us about these environment variables.\n\n# Env\n$ docker image inspect hello-world | jq .[].Config.Env\n\n# startup command on the container\n$ docker image inspect hello-world | jq .[].Config.Cmd\n\n# layers associated with the image\n$ docker image inspect hello-world | jq .[].RootFS.Layers\n\n#\n$ docker image inspect nginx | jq .[].Config.ExposedPorts\n</code></pre>"},{"location":"more/books/tech-books.html","title":"Tech Books","text":""},{"location":"more/books/tech-books.html#technology-books","title":"Technology Books","text":""},{"location":"more/books/tech-books.html#self-help-books","title":"Self help books","text":"<p>Make life worthwhile </p>"},{"location":"more/books/tech-books.html#reference","title":"Reference","text":"<ul> <li>Tech Books :github.com</li> <li>E-Books Directory</li> <li>FreeComputerBooks.com</li> </ul>"},{"location":"more/linux/debian.html","title":"Debian","text":"<p>What is a daemon?</p> <p>A daemon (pronounced <code>DAY-MAN</code>, <code>DAY-MON</code> or sometimes <code>DEE-MON</code>) is a background process that runs on the Linux OS continuously. When we say background, we mean that the program runs without any user interaction. It runs \u201cbehind the scenes\u201c so to speak.</p>"},{"location":"more/linux/debian.html#basic","title":"Basic","text":"<ul> <li> <p>To see which <code>kernel version</code> is running on your system:</p> <p>The command \u201c<code>uname</code>\u201d stands for \u201cUnix name\u201d and tells you about the operating system kernel that\u2019s running.</p> <pre><code># display the operating system kernel that\u2019s running:\n$ uname\n\n# display the kernel version number (the \u201crelease\u201d):\n$ uname -r\n\n# display the machine hardware name:\n$ uname -m\n\n# display all available information:\n$ uname -a\n</code></pre> </li> <li> <p>To Open New Terminal in Ubuntu:</p> <p>Ctrl+Alt+T</p> </li> </ul>"},{"location":"more/linux/debian.html#white-belt","title":"White belt","text":"<ul> <li> <p>To see the hostname:</p> <pre><code>$ hostname\n\n# pwd or Print Working Directory\n$ pwd\n</code></pre> </li> <li> <p>To see your assigned <code>user id</code> and <code>group id</code>, simply issue the <code>id</code> command:</p> <pre><code>$ id\n</code></pre> </li> </ul>"},{"location":"more/linux/debian.html#black-belt","title":"Black Belt","text":"<ul> <li> <p><code>Tmux</code>: Secret Background Windows</p> <p><code>tmux</code> or <code>Terminal Multiplexer</code> is a piece of software used to manage terminal sessions. In addition, it can spin up long-standing terminals in the background of the Linux operating system that can be saved and recalled later.</p> <p>Tmux cancaome in handy for when you are doing work on a Linux system remotely via SSH and need to keep a session open and to come back to later.</p> bash<pre><code># install\n$ apt-get install tmux\n</code></pre> </li> </ul>"},{"location":"more/linux/debian.html#cat-commands","title":"Cat Commands","text":"<p>Cat means <code>concatenate</code> frequently used command in Linux. It can read data from the file and gives the content as output. It can help us to <code>create</code>, <code>view</code> and <code>concatenate</code> files. </p> <p>So let us see frequently used <code>cat</code> commands.</p> <pre><code># TO VIEW A SINGLE FILE:\n$ cat filename\n\n# TO VIEW MULTIPLE FILES\n$ cat filename1 filename2\n\n# TO VIEW THE CONTENTS OF A FILE PRECEDING WITH LINE NUMBERS:\n$ cat -n filename\n\n# TO CREATE A FILE\n$ cat &gt; new_file\n</code></pre> <p>Ubuntu Important Commands</p> <pre><code># It gives information about how long the system has been running in one line.\n$ uptime\n\n# It displays detailed information about the users who are logged in the system currently.\n$ w\n\n# Using DNS Tools\n# 1. It display information about the domain name, IP address &amp; DNS server\n$ nslookup www.google.com\n\n# 2. It display information about the domain name &amp; IP Addresss\n$ host www.google.com\n\n# 3. dig is a more advanced DNS tool\n$ dig www.google.com\n</code></pre>"},{"location":"more/linux/debian.html#types-of-packages","title":"Types of Packages","text":"<p>The two most popular packages</p> <ol> <li> <p>Debian (<code>.deb</code>) packages:</p> <p>Debian packages are used for distributions like Debian, Ubuntu, and Linux Mint. </p> </li> <li> <p>Red Hat (<code>.rpm</code>):</p> <p>Red Hat packages are used in Fedora, CentOS, RHEL, Suse, and others.</p> </li> </ol>"},{"location":"more/linux/debian.html#package-manager","title":"Package Manager","text":"<ol> <li> <p>Debian package tool (dpkg): DPKG - The True Hero</p> <p><code>Dpkg</code> is a tool that APT is using behind the scenes to install packages. <code>Dpkg</code> doesn\u2019t install dependencies. If we have a <code>.deb</code> package on our system, we can install it easily with dpkg:</p> <pre><code># install\n$ dpkg -i my_package_to_be_installed.deb\n\n# remove\n$ dpkg -r my_package_to_be_removed.deb\n\n# list\n$ dpkg -l\n</code></pre> </li> <li> <p>apt-get</p> <pre><code># syntax\n$ apt-get install &lt;package-name&gt;\n\n$ apt-get install nmap\n</code></pre> </li> <li> <p>Advanced Package Tool (apt)</p> <p><code>apt</code> was introduced to be a bit more user-friendly than <code>apt-get</code>. APT builds on dpkg and adds some special features like managing dependencies, upgrades and searching for package</p> <pre><code># Keeping Software Up to Date\n$ sudo apt update\n</code></pre> </li> <li> <p>Snap (.snap)</p> <p>Snap, a <code>package management system</code> developed by Canonical, Ltd. Unlike <code>apt</code> packages, <code>snap</code> bundles all of the dependencies for a package into a single <code>.snap</code> file.  </p> <p>This ensures that the software package is self-contained with its own copy of all of the libraries and assets needed to run. This avoids the potential conflicts of packages relying on different versions of the same shared assets and libraries. The Snap system also allows different versions of the same packages to be installed in parallel.</p> <pre><code># Basic Snap Commands\n\n$ snap list\n$ snap install remmina\n$ snap remove remmina\n$ snap find vlc\n$ snap info remmina\n</code></pre> </li> </ol>"},{"location":"more/linux/debian.html#tar-tape-archive","title":"Tar (Tape Archive)","text":"<p>Tar is a powerful archiving utility used to compress and backup files in the Linux operating system. It is popular tool for creating <code>archives</code> of files and directories.</p> <pre><code># To create a tar archive\n$ tar -cvf archive.tar directory/\n\n# To view the contents of a tar archive\n$ tar -tvf archive.tar\n\n# To extract the contents of a tar archive\n$ tar -xvf archive.tar\n</code></pre> <ul> <li>\u2018<code>c</code>\u2019 flag stands for <code>create</code></li> <li>\u2018<code>x</code>\u2019 flag stands for <code>extract</code></li> <li>\u2018<code>t</code>\u2019 flag stands for <code>list</code></li> <li>\u2018<code>v</code>\u2019 stands for <code>verbose</code></li> <li>\u2018<code>f</code>\u2019 stands for <code>file</code></li> </ul>"},{"location":"more/linux/debian.html#file-permissions-and-ownership","title":"File Permissions and Ownership","text":"<p>In Linux, every file and directory has an owner and a set of permissions that determine who can access and modify the file.</p> <p>File Permissions</p> <p>Each file on a Linux system has <code>three</code> types of permissions:</p> <ul> <li>read <code>r</code>, </li> <li>write <code>w</code>, </li> <li>execute <code>x</code></li> </ul> bash<pre><code>$ ls -l &lt;file-or-folder&gt;\n</code></pre> <p>Changing File Permissions</p> <p>The <code>chmod</code> command is used to change the permissions for a file. </p> bash<pre><code>$ chmod mode &lt;file-or-folder&gt;\n</code></pre> <p>There are two ways to specify the mode: </p> <ul> <li>using a <code>numeric value</code>, or </li> <li>using <code>symbolic values</code>.</li> </ul>"},{"location":"more/linux/debian.html#groups-and-id","title":"Groups and id","text":"<ol> <li> <p>Creating a Group:</p> <p>To create a group, you can use the <code>groupadd</code> command followed by the name of the group you want to create. For example:</p> bash<pre><code>$ sudo groupadd developers\n</code></pre> <p>This creates a new group called <code>developers</code>.</p> </li> <li> <p>Adding <code>Users</code> to a <code>Group</code>:</p> <p>To add users to a group, you can use the <code>usermod</code> command with the <code>-aG</code> option followed by the group name and username. For example:</p> <ul> <li> <p><code>-a</code>, <code>--append</code>: </p> <p>This option tells <code>usermod</code> to append the user to the supplementary group(s). In other words, it adds the user to the specified group(s) without removing the user from any other groups.</p> </li> <li> <p><code>-G</code>, <code>--groups</code>:</p> <p>This option specifies a list of supplementary groups which the user should become a member of. This option sets the list of supplementary groups directly, without appending to the current list of supplementary groups.</p> </li> </ul> <p>So, when you use <code>-aG</code> together with usermod, it means you are appending the user to the specified group(s) without removing the user from any other groups, and you're specifying a list of supplementary groups which the user should become a member of.</p> bash<pre><code>$ sudo usermod -aG developers alice\n</code></pre> <p>This adds the user <code>alice</code> to the <code>developers</code> group.</p> </li> <li> <p>Checking Group Membership:</p> <p>To see which <code>groups</code> a <code>user</code> belongs to, you can use the <code>id</code> command followed by the username. For example:</p> bash<pre><code>$ id alice\n</code></pre> </li> </ol>"},{"location":"more/linux/debian.html#to-list-all-groups","title":"To List all groups","text":"<p>To list all the groups in Linux, you can use the <code>getent</code> command followed by the <code>group</code> argument:</p> bash<pre><code>$ getent group\n\n# To check if the \"docker\" group already exists on your system,\n# If the group doesn't exist, this command will not produce any output.\n$ getent group docker\n\n# This command will display all the groups that the user \"bishow\" is a member of.\n$ groups bishow\n</code></pre> <p>Alternatively, you can also view the contents of the <code>/etc/group</code> file, which stores group information. You can use any text editor or commands like <code>cat</code> or <code>less</code> to view its contents:</p> bash<pre><code>$ cat /etc/group\n\n#\n$ grep docker /etc/group\n</code></pre> <p>Notes:</p> <p>Choose whichever method is more convenient for you.</p> <p>Issue Solved:</p> <p>permission denied while trying to connect to the Docker daemon socket at <code>unix:///var/run/docker.sock</code></p> <ol> <li> <p>Check Docker Socket Permissions:</p> <p>Ensure that the Docker socket file (<code>/var/run/docker.sock</code>) has appropriate permissions for the \"docker\" group to read and write to it. You can check and adjust the permissions using the following commands:</p> bash<pre><code>ls -l /var/run/docker.sock\nsudo chmod 666 /var/run/docker.sock\n</code></pre> <p>The first command (<code>ls -l /var/run/docker.sock</code>) shows the current permissions, and the second command (<code>sudo chmod 666 /var/run/docker.sock</code>) grants read and write permissions to all users and groups.</p> </li> <li> <p>Restart Docker Service:</p> <p>Restart the Docker service to apply any changes to group memberships or permissions:</p> bash<pre><code>sudo systemctl restart docker\n</code></pre> </li> <li> <p>Logout and Log Back In:</p> <p>If the above steps don't resolve the issue, try logging out and logging back in to refresh your session and apply any group membership changes:</p> bash<pre><code>logout\n</code></pre> <p>Then log back in and try running <code>docker ps</code> again.</p> </li> </ol> <p>After performing these steps, try running <code>docker ps</code> again without sudo to check if the permission issue has been resolved. If you continue to encounter permission denied errors, further troubleshooting may be needed.</p>"},{"location":"more/linux/debian.html#symlink-linux","title":"Symlink <code>Linux</code>","text":"<p>A symlink (also called a <code>symbolic link</code>) is a type of file in Linux that points to another file or a folder on your computer. Symlinks are similar to shortcuts in Windows.</p> <pre><code># Create a symlink to Director/Folder\n$ ln -s /home/user/Folder &lt;symlink-dir&gt;\n\n# Unlink or Remove a symlink\n$ unlink &lt;path-to-symlink&gt;\n$ rm &lt;path-to-symlink&gt;\n\n# Find and Delete Broken Links\n$ find /home/james -xtype l\n$ find /home/james -xtype l -delete\n\n# Check file/folder is symlink\n$ ls -l &lt;path-to-assumed-symlink&gt;\n\n# SOLVED: sysmlink error\n# 1. Check the File/Folder is sysmlink corrupt or not\n# $ ls -l &lt;file/folder&gt;\n#\n# 2. Unlink the Filer/Folder\n# $ unlink &lt;file/folder&gt;\n#\n# 3. Create a File/Folder\n# $ mkdir Documents\n</code></pre> <p>Reference</p> <ul> <li>How to Create Linux Symlinks</li> <li>Symlink Tutorial in Linux</li> </ul> <p></p> <p>Linux</p> <p>Pass (<code>ubuntu</code>)</p> <p>pass is a very simple password store that keeps passwords inside <code>gpg</code>. It stores, retrieves, generates, and synchronizes passwords securely.</p> bash<pre><code>$ sudo apt update\n$ sudo apt install pass\n</code></pre> <code>service</code> vs <code>systemctl</code> <p>The commands sudo <code>service</code> and <code>systemctl</code> are both used for managing system services in Unix-like operating systems, but they have different purposes and usage patterns.</p> <ol> <li> <p>sudo service:</p> <p><code>sudo service</code> is a command-line tool used for managing services on Unix-like systems, particularly those using SysVinit as the init     system. It provides a simple and consistent interface for starting, stopping, restarting, and querying the status of services.</p> <p>Usage:</p> bash<pre><code># syntax\n$ sudo service &lt;service_name&gt; &lt;action&gt;\n\n#example\n$ sudo systemctl restart apache2\n</code></pre> <p>The service command is often used in older Linux distributions that still use SysVinit as the init system.</p> </li> <li> <p>systemctl:</p> <p><code>systemctl</code> is a command-line tool used for controlling the systemd system and service manager. <code>Systemd</code> is a modern init system used by many     Linux distributions. systemctl allows you to manage services, units, targets, sockets, and more.</p> <p>Usage:</p> bash<pre><code>$ sudo systemctl &lt;action&gt; &lt;service_name&gt;\n$ sudo systemctl restart apache2\n</code></pre> <p><code>systemctl</code> provides more features and capabilities compared to <code>service</code>, and it's the preferred method for managing services on systems that use     systemd.</p> </li> </ol> <p>In summary, if your system is using SysVinit as the init system, you would typically use <code>sudo service</code> to manage services. If your system is using systemd, <code>systemctl</code> is the preferred tool for service management. However, some distributions may provide compatibility layers or aliases to ensure compatibility between the two commands.</p> Creating a <code>User</code> without password <p>Yes, you can add the <code>jenkins</code> user without setting a password. This is often done for system users that don't require interactive login, such as the     <code>jenkins</code> user used for automation tasks.</p> <p>To add the <code>jenkins</code> user without setting a password, you can use the useradd command with the <code>-r</code> (or <code>--system</code>) option, which creates a system user     without a password or home directory. Here's the command:</p> bash<pre><code>sudo useradd -r jenkins\n</code></pre> <p>This command creates the <code>jenkins</code> user as a system user. System users are typically used for services and daemons and do not have passwords or home     directories by default.</p> <p>After adding the user, you can proceed to grant the necessary permissions to the <code>jenkins</code> user, such as adding it to the 'docker' group if needed, to allow it to perform specific tasks without requiring a password.</p> groups &amp; id in unix <p>To see the permissions of a user on a Unix-like system, you can use the <code>groups</code> command or <code>id</code> command.</p> bash<pre><code># Syntax\n$ groups &lt;username&gt;\n$ id &lt;username&gt;\n\n# Example: ($USER refer to the currently logged-in user.)\n$ groups $USER\n</code></pre> Installing Xampp in Linux <pre><code># To Launch XAMPP\nsudo /opt/lampp/./manager-linux-x64.run\n\n# To Unistall\nsudo /opt/lampp/./uninstall\n\n\n# After uninstall, remove the directory\nsudo rm -r /opt/lamp\n</code></pre> <p><code>sudo visudo</code> is a command used in Linux to edit the sudoers file, which determines who has administrative privileges on the system and what commands they can run with elevated permissions using the <code>sudo</code> command. The sudoers file is crucial for system security, as it controls access to sensitive operations.</p> <p>Here's what each part of the command does:</p> <ul> <li> <p><code>sudo</code>:</p> <pre><code>This is a command used in Unix-like operating systems to allow users to run programs with the security privileges of another user (usually the `superuser`, or \"`root`\"). It stands for \"superuser do.\"\n</code></pre> </li> <li> <p><code>visudo</code>:</p> <pre><code>This is a command-line utility specifically designed for editing the ==sudoers file==. It opens the sudoers file in a text editor, but it performs some syntax checking before saving changes to ensure that the file remains in a valid state. This helps prevent accidental misconfigurations that could lock users out of administrative access or potentially compromise system security.\n</code></pre> </li> </ul> <p>In summary, <code>sudo visudo</code> is used to safely edit the sudoers file, which is critical for managing user privileges and access control on a Linux system.</p> <ul> <li>How to Install and Use XAMPP on Ubuntu</li> </ul>"},{"location":"more/linux/debian.html#reference","title":"Reference","text":"<ul> <li>Shell Samurai by Stetson Blake</li> <li>Linux Mastery: 100+ Exercises for Building Your Skills by Frank Anemaet</li> </ul> <p>Blog</p> <ul> <li>Install Docker Engine on Ubuntu 22.04</li> </ul> <p>Icebere Model</p> <ul> <li>a systems thinking model: the iceberg</li> <li>Iceberg Model</li> </ul>"},{"location":"more/mkdocs/01-advanced-mkdocs.html","title":"Basic","text":""},{"location":"more/mkdocs/01-advanced-mkdocs.html#mkdocs","title":"Mkdocs","text":""},{"location":"more/mkdocs/01-advanced-mkdocs.html#installation","title":"Installation","text":"<pre><code>$ pip install mkdocs\n$ mkdocs new my-project\n$ cd my-project\n$ mkdocs serve\n</code></pre>"},{"location":"more/mkdocs/01-advanced-mkdocs.html#theming-our-documentation","title":"Theming our documentation","text":"<pre><code>site_name: MkLorum\nsite_url: https://example.com/\nnav:\n  - Home: index.md\n  - About: about.md\ntheme: readthedocs\n</code></pre>"},{"location":"more/mkdocs/01-advanced-mkdocs.html#building-the-site","title":"Building the site","text":"<pre><code>$ mkdocs build\n</code></pre>"},{"location":"more/mkdocs/01-advanced-mkdocs.html#deploying-your-docs","title":"Deploying your docs","text":"<pre><code>my-project/\n    mkdocs.yml\n    docs/\norgname.github.io/\n\n$ cd ../orgname.github.io/\n$ mkdocs gh-deploy --config-file ../my-project/mkdocs.yml --remote-branch master\n</code></pre>"},{"location":"more/mkdocs/01-advanced-mkdocs.html#material-theme","title":"Material theme","text":"<pre><code># Installing theme only\n$ pip install mkdocs-material\n\n# Next, install the theme and its dependencies with:\n$ pip install -e mkdocs-material\n\n# mkdocs.yml\ntheme:\n  name: material\n\n# glightbox\n$ pip install mkdocs-glightbox\n\n# Add plugin in your mkdocs.yml\nplugins:\n   - glightbox\n</code></pre>"},{"location":"more/mkdocs/01-advanced-mkdocs.html#reference","title":"Reference","text":"<ul> <li>mkdocs official site</li> <li>mkdocs material theme</li> <li>mkdocs-glightbox</li> </ul>"},{"location":"more/mkdocs/02-advanced-mkdocs.html","title":"Advanced","text":""},{"location":"more/mkdocs/02-advanced-mkdocs.html#advanced-mkdocs","title":"Advanced Mkdocs","text":""},{"location":"more/mkdocs/02-advanced-mkdocs.html#configure-pages-and-navigation","title":"Configure Pages and Navigation","text":"<pre><code>// A minimal navigation configuration could look like this:\n\nnav:\n  - 'index.md'\n  - 'about.md'\n</code></pre> <pre><code>// override the title in the nav setting add a title right before the filename\n\nnav:\n  - Home: 'index.md'\n  - About: 'about.md'\n</code></pre> <pre><code>// Navigation sub-sections can be created by listing related pages together under a section title\n\nnav:\n  - Home: 'index.md'\n  - 'User Guide':\n    - 'Writing your docs': 'writing-your-docs.md'\n    - 'Styling your docs': 'styling-your-docs.md'\n  - About:\n    - 'License': 'license.md'\n    - 'Release Notes': 'release-notes.md'\n</code></pre>"},{"location":"more/mkdocs/02-advanced-mkdocs.html#formatting","title":"Formatting","text":"<p>Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code># Configuration\n\nmarkdown_extensions:\n  - pymdownx.critic\n  - pymdownx.caret\n  - pymdownx.keys\n  - pymdownx.mark\n  - pymdownx.tilde\n</code></pre>"},{"location":"more/mkdocs/02-advanced-mkdocs.html#highlighting-text","title":"Highlighting Text","text":"<p>When Critic is enabled, Critic Markup can be used, which adds the ability to highlight suggested changes, as well as add inline comments to a document:</p> <pre><code># Text with highlighting\n- ==This was marked==\n- ^^This was inserted^^\n- ~~This was deleted~~\n\n#  Long Highlight \n\n# Sub- and superscripts\n- H~2~O\n- A^T^A\n\n# Keyboard keys\n++ctrl+alt+del++\n</code></pre>"},{"location":"more/mkdocs/02-advanced-mkdocs.html#lists","title":"Lists","text":"<pre><code># Configuration\n\nmarkdown_extensions:\n  - def_list\n  - pymdownx.tasklist:\n      custom_checkbox: true\n</code></pre> <p>When Tasklist is enabled, unordered list items can be prefixed with <code>[ ]</code> to render an unchecked checkbox or <code>[x]</code> to render a checked checkbox, allowing for the definition of task lists:</p> <pre><code># Definition list\n`Lorem ipsum dolor sit amet`\n\n:   Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus\n    tellus non sem sollicitudin, quis rutrum leo facilisis.\n\n# TaskList\n- [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n- [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [ ] Praesent sed risus massa\n- [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n</code></pre> <ul> <li>mkdocs navigation configuration</li> <li>mkdocs-glightbox</li> <li>mkdocs-pdf</li> </ul>"},{"location":"more/research/ai.html","title":"AI","text":""},{"location":"more/research/js-prevent-default.html","title":"prevent default","text":"<p>The <code>e.preventDefault()</code> method is a common practice in JavaScript when handling events, especially form submissions. It is used to prevent the default behavior associated with an event.</p> <p>In the context of a form submission:</p> <ul> <li> <p>Without e.preventDefault(): If you don't prevent the default behavior of a form submission, the browser will perform its default action, which usually involves sending a request to the server, causing a page reload or navigation.</p> </li> <li> <p>With e.preventDefault(): By calling <code>e.preventDefault()</code> within an event handler, you stop the default action associated with that event. In the case of a form submission, it prevents the browser from navigating away from the current page or triggering a full page reload.</p> </li> </ul> <pre><code>const handleSubmit = (e) =&gt; {\n  e.preventDefault(); // Prevent the default form submission behavior\n\n  // Your custom logic for handling the form submission goes here\n};\n</code></pre>"},{"location":"more/research/micro-frontend.html","title":"Micro-Frontend","text":""},{"location":"more/research/micro-frontend.html#installation","title":"Installation","text":"<pre><code>npm install --global create-single-spa\n\n# or\n\nyarn global add create-single-spa\n</code></pre> <p>Then run the following:</p> <p>create-single-spa</p> <pre><code>npm init single-spa\n\n# \nnpm init single-spa\n\n# or\n\nnpx create-single-spa\n\n# or\n\nyarn create single-spa\n</code></pre>"},{"location":"more/research/micro-frontend.html#reference","title":"Reference","text":""},{"location":"more/research/rabbitmq-celery.html","title":"Rabbitmq & Celery","text":"<p>Yes, you can definitely use RabbitMQ and Celery together without Redis or any other additional message broker. RabbitMQ is a powerful message broker that works seamlessly with Celery.</p> <p>What is pyamqp. Do i need to install it ?</p> <p>The pyamqp in the Celery configuration URL (pyamqp://...) refers to the protocol used by Celery to communicate with message brokers that support the Advanced Message Queuing Protocol (AMQP). AMQP is a messaging standard that allows applications to communicate with each other via message queues.</p> <p>pyamqp is actually a library that Celery uses to handle the AMQP protocol. It's part of the Celery dependencies, and you don't need to install it separately. When you install Celery using pip install celery, it automatically installs the required dependencies, including pyamqp.</p> <p>So, in your Celery configuration, when you see pyamqp://..., it specifies the use of the AMQP protocol for communication between Celery and the RabbitMQ message broker. The pyamqp library is included with Celery, and you don't need to explicitly install it.</p> <p>Here are the steps to use RabbitMQ and Celery:</p>"},{"location":"more/research/rabbitmq-celery.html#step-1-install-celery-and-rabbitmq","title":"Step 1: Install Celery and RabbitMQ","text":"<pre><code>pip install celery\n</code></pre> <p>Install RabbitMQ by following the instructions on the official RabbitMQ website: RabbitMQ Installation Guide</p>"},{"location":"more/research/rabbitmq-celery.html#step-2-configure-django-settings","title":"Step 2: Configure Django Settings","text":"<p>In your Django project's settings.py, configure Celery to use RabbitMQ:</p> <pre><code># settings.py\n\n# Celery configuration\n# CELERY_BROKER_URL = 'pyamqp://guest:guest@localhost//'  # Replace with your RabbitMQ URL\n# using rabbit mq URL\nCELERY_BROKER_URL = 'pyamqp://guest:guest@localhost:5672/#/'\nCELERY_RESULT_BACKEND = 'rpc://'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'UTC'\n</code></pre> <p>Replace the <code>CELERY_BROKER_URL</code> with your RabbitMQ connection details.</p>"},{"location":"more/research/rabbitmq-celery.html#step-3-create-a-celery-instance","title":"Step 3: Create a Celery Instance","text":"<p>Create a file named <code>celery.py</code> in your Django project directory:</p> <pre><code># celery.py\n\nfrom __future__ import absolute_import, unicode_literals\nimport os\nfrom celery import Celery\n\n# Set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project.settings')\n\n# Create a Celery instance and configure it using the settings from Django.\napp = Celery('your_project')\n\n# Load task modules from all registered Django app configs.\napp.config_from_object('django.conf:settings', namespace='CELERY')\n\n# Auto-discover tasks in all installed apps\napp.autodiscover_tasks()\n</code></pre>"},{"location":"more/research/rabbitmq-celery.html#step-4-create-celery-tasks","title":"Step 4: Create Celery Tasks","text":"<p>Create a <code>tasks.py</code> file in one of your Django apps and define the tasks you want to execute asynchronously.</p> <pre><code># your_app/tasks.py\n\nfrom celery import shared_task\nfrom time import sleep\n\n@shared_task\ndef example_task(seconds):\n    sleep(seconds)\n    return f'Task completed after {seconds} seconds'\n</code></pre>"},{"location":"more/research/rabbitmq-celery.html#step-5-use-celery-in-django-views-or-models-additional","title":"Step 5: Use Celery in Django Views or Models (ADDITIONAL)","text":"<p>Now, you can use the Celery task in your Django views, models, or other parts of your application</p> <pre><code># views.py\n\nfrom django.shortcuts import render\nfrom your_app.tasks import example_task\n\ndef my_view(request):\n    # Trigger the Celery task\n    result = example_task.delay(10)  # Run the task asynchronously\n\n    return render(request, 'your_template.html', {'result_id': result.id})\n</code></pre>"},{"location":"more/research/rabbitmq-celery.html#step-6-run-celery-worker","title":"Step 6: Run Celery Worker","text":"<p>Open a terminal and run the Celery worker:</p> <pre><code>celery -A your_project worker -l info\n</code></pre>"},{"location":"more/research/rabbitmq-celery.html#step-7-start-django-development-server-additional","title":"Step 7: Start Django Development Server (ADDITIONAL)","text":"<p>Run your Django development server:</p> <pre><code>python manage.py runserver\n</code></pre> <p>Now, when you access the view that triggers the Celery task, the task will be processed by the Celery worker in the background.</p> <p>Remember to refer to the official documentation for Celery (https://docs.celeryproject.org/) for more advanced configurations and options.</p> <p>NOTES</p> <p>Replace <code>your_project</code> with the actual name of your Django project.</p> <p>Now, you can use Celery as described in your Django views, models, or other parts of your application. Tasks will be processed by the Celery worker, and messages will be exchanged through RabbitMQ.</p> <p>Remember to refer to the official documentation for Celery and RabbitMQ for more advanced configurations and options:</p> <ul> <li>Celery Documentation</li> <li>RabbitMQ Documentation</li> </ul> <ul> <li>Building Scalable Applications with Django, Celery, and RabbitMQ</li> </ul>"},{"location":"more/research/rabbitmq.html","title":"Rabbitmq","text":""},{"location":"more/research/rabbitmq.html#rabbitmq","title":"RabbitMQ","text":""},{"location":"more/research/rabbitmq.html#introduction","title":"Introduction","text":"<p>What is RabbitMQ?</p> <p>\u201cRabbitMQ is a message broker: it accepts and forwards messages. You can think about it as a post office: when you put the mail that you want posting in a post box, you can be sure that the letter carrier will eventually deliver the mail to your recipient. In this analogy, RabbitMQ is a post box, a post office, and a letter carrier.\u201d (1)</p> <p>It has developed by Erlang open source langua</p> <p></p> <p>Why we need to use RabbitMQ?</p> <p>Now that you know what RabbitMQ is, the next question is: why should you use a queue instead of directly sending data from one microservice to the other one. There are a couple of reasons why using a queue instead of directly sending data is better (2)</p> <ul> <li>Higher availability and better error handling</li> <li>Better scalability</li> <li>Share data with whoever wants/needs it</li> <li>Better user experience due to asynchronous processing</li> </ul> <p>As for usage areas, it will make our job much easier to perform tasks that do not need to be synchronized, such as sending mail, basket operations after adding an order on our e-commerce page, and export (excel, csv) data. (Generally \u201cMessage brokers\u201d).</p> <p></p> <p>The main parts of the rabbitmq:</p> <ul> <li>A <code>producer</code> is a user application that sends messages.</li> <li>A <code>queue</code> is a buffer that stores messages.</li> <li>A <code>consumer</code> is a user application that receives message</li> </ul>"},{"location":"more/research/rabbitmq.html#setup","title":"Setup","text":"<pre><code>// Installation\n$ choco install rabbitmq\n\n// install without any\n$ choco install rabbitmq --yes\n\n// rabbitmqctl \u2014 tool for managing RabbitMQ nodes\n# rabbitmqctl status\n</code></pre> <pre><code>// Windows \u2013 RabbitMQ has Nodedown Error (Solved)\n\n1. Run RabbitMQ sbin command prompt as administrator.\n2. Run \"rabbitmq-service remove\"\n3. Run \"rabbitmq-service install\"\n</code></pre>"},{"location":"more/research/rabbitmq.html#rabbitmq-enable-web-management-plugin","title":"RabbitMQ Enable Web Management Plugin","text":"<p>To enable a rabbitmq web management plugin on windows, we need to start <code>RabbitMQ</code> Command Prompt with administrator privilege, enter the command \u201c<code>rabbitmq-plugins enable rabbitmq_management</code>\u201d and execute it.</p> <pre><code>$ rabbitmq-plugins enable rabbitmq_management\n\n// open a url\nhttp://localhost:15672\n\n\n// To access rabbitmq web management dashboard, the default Username and password of  is \u201cguest\u201d (Username: \u201cguest\u201d | Password: \u201cguest\u201d).\nUsername: guest\nPassword: guest\n</code></pre>"},{"location":"more/research/rabbitmq.html#reference","title":"Reference","text":"<ul> <li>rabbitmq install using choco</li> <li>RabbitMQ Installation on Windows</li> <li>RabbitMQ - Installation: Tutorial</li> <li>Rabbit MQ - Publish/Subscribe</li> <li>RabbitMQ Producer and Consumer Solution with Docker in .net Core</li> <li>Part 1: RabbitMQ for beginners - What is RabbitMQ?</li> <li>rabbitmqctl - guide</li> <li>How to Use RabbitMQ in ASP.NET Core</li> <li>How do I verify my version of RabbitMQ?</li> </ul>"},{"location":"more/research/rabbitmq.html#solved","title":"Solved","text":"<ul> <li>Unable to perform an operation on node rabbitmq</li> </ul>"},{"location":"more/research/redis.html","title":"Redis","text":""},{"location":"more/research/redis.html#redis","title":"Redis","text":""},{"location":"more/research/redis.html#reference","title":"Reference","text":"<p>redis - outdated</p> <p>redis</p>"},{"location":"more/research/reference.html","title":"Reference","text":"<p>Reference</p>"},{"location":"more/research/reference.html#npm-packages","title":"npm packages","text":"<ul> <li>react-number-format - npm</li> <li>emoji-picker-react - npm</li> <li>react-scroll-up -npm</li> <li>react-accessible-treeview</li> <li>react-social-login-buttons</li> <li>react-use-is-online</li> <li>react-youtube</li> <li>react-infinite-scroll-component: github</li> <li>react-input-emoji: github</li> </ul>"},{"location":"more/research/reference.html#docs","title":"Docs","text":"<ul> <li>devdocs.io</li> <li>Design system repo</li> <li>tinymce.Editor</li> <li>react component library</li> </ul>"},{"location":"more/research/reference.html#guide","title":"Guide","text":"<ul> <li>How to setup Infinite Scroll in your react component? </li> <li>Math.sign() - JavaScript | MDN</li> <li>Check if Value is Negative or Positive Number in JavaScript</li> <li>Javascript Program to Check if a number is Positive, Negative, or Zero</li> <li>How to Create Register and Login API using Django Rest Framework and Token Authentication</li> <li>Login and Register User \u2014 Django Rest Framework</li> <li>User Registration, Login, Logout API using Django Rest Framework</li> <li>Django REST Framework Basics</li> <li>Official Django REST Framework Tutorial - A Beginners Guide</li> <li>beautiful-react-hooks - github</li> <li>How to Make Ant Design Table (AntD) in React JS</li> <li>How To Debug React Apps With VS Code</li> <li>15 Useful Lodash Methods for Everyday Coding (Part-1)</li> <li>How do i get rid of the yesterday, today stuff in folders </li> <li>7 Best Steps For Writing Good Software Technical Documentation</li> <li> create-mf-app</li> <li>Micro Frontend Architecture Approach Selection Framework</li> <li>Micro Frontend by Module Federation with react-router-dom v6 - stackoverflow</li> <li>Why React Router is excellent for Micro-Frontends </li> <li>Micro Frontend Architecture and Challenges: Decision Framework</li> <li>The State of Micro Frontends</li> <li>Breaking down the last Monolith - Micro Frontends</li> <li>Reverse Chat Messages List Infinite Scroll - sandbox</li> <li>inverse infinite scroll react: sandbox</li> <li>25+ Slack slash commands every power user needs to know</li> <li>25+ Slash Commands to Help You be More Productive on Slack</li> <li>How to Develop Microfrontends Using React: Step-by-Step Guide</li> </ul>"},{"location":"more/research/reference.html#microfrontend","title":"Microfrontend","text":"<ul> <li> react-micro-frontend: github repo</li> <li>Microfrontends using React: The Complete Guide</li> <li>single-spa</li> <li>Building Micro Frontends With React</li> <li>Mastering Microfrontends: Routing and Communication</li> <li>Micro-Frontends With React &amp; Vite Module Federation</li> <li>Module Federation in Production</li> </ul>"},{"location":"more/research/reference.html#best","title":"BEST","text":"<ul> <li>How to Implement Tokenization using JWT and Django Rest Framework</li> <li>How to Use JWT Authentication with Django REST Framework</li> <li>How to use different git emails for personal and work repositories on the same machine</li> <li>How to configure Git with multiple emails?</li> <li>The React Handbook</li> </ul>"},{"location":"more/research/reference.html#short-book","title":"Short Book","text":"<ul> <li>useEffect By Exampl by Max Rozen</li> <li>Building Micro-Frontends by Luca Mezzalira</li> </ul>"},{"location":"more/research/reference.html#issue-solved","title":"Issue Solved","text":"<ul> <li>How to disable git gpg signing</li> <li>How To Debug React Apps With VS Code</li> </ul>"},{"location":"more/research/reference.html#youtube","title":"Youtube","text":"<ul> <li>How To NOT Get Screwed As A Software Engineer</li> <li>We Sold Our Startup &amp; Filmed Everything!</li> <li>Micro Frontends - Routing between remotes - youtube</li> </ul>"},{"location":"more/research/reference.html#best-notes","title":"BEST NOTES","text":"<ul> <li>How to Implement Tokenization using JWT and Django Rest Framework</li> <li>How to Use JWT Authentication with Django REST Framework</li> <li>How to use different git emails for personal and work repositories on the same machine</li> <li> <p>How to configure Git with multiple emails?</p> </li> <li> <p>How to Develop Microfrontends Using React: Step-by-Step Guide</p> </li> </ul>"},{"location":"more/research/tricks.html","title":"Tips & Tricks","text":""},{"location":"more/research/tricks.html#on-linux","title":"On Linux","text":"<p>python3 -m venv venv &amp;&amp; source venv/bin/activate</p>"},{"location":"more/research/tricks.html#on-windows","title":"On Windows","text":"<p>.\\venv\\Scripts\\activate</p>"},{"location":"more/research/tricks.html#python","title":"Python","text":"<pre><code>$ python manage.py shell\n\n# create the object using the model\n\n&gt; from geeks.models import GeeksModel\n&gt; GeeksModel.objects.create(title=\"title1\",description=\"description1\").save()\n&gt; GeeksModel.objects.create(title=\"title2\",description=\"description2\").save()\n</code></pre>"},{"location":"more/research/tricks.html#_1","title":"Tips & Tricks","text":"<p>https://semver.org/</p>"},{"location":"more/research/tricks.html#youtube","title":"Youtube","text":""},{"location":"more/research/tricks.html#learning-and-growing","title":"Learning and Growing","text":"<p>You should be reading (or watching or listening to) technical content every single weekday.</p> <ol> <li>Read Every Day: The Practice of Study</li> </ol>"},{"location":"more/research/tricks.html#javascript-methods-categorized-based-on-their-purpose","title":"JavaScript methods categorized based on their purpose:","text":"<ol> <li> <p>Manipulation Methods:</p> <ul> <li>Array Manipulation: Methods that modify arrays, like <code>push()</code>, <code>pop()</code>, <code>shift()</code>, <code>unshift()</code>, <code>splice()</code>, <code>sort()</code>, <code>reverse()</code>, <code>fill()</code>, <code>copyWithin()</code>.</li> <li>String Manipulation: Methods that modify strings, like <code>concat()</code>, <code>slice()</code>, <code>substring()</code>, <code>replace()</code>, <code>trim()</code>, <code>toUpperCase()</code>, <code>toLowerCase()</code>.</li> </ul> </li> <li> <p>Access Methods:</p> <ul> <li>Array Access: Methods to access array elements, like <code>indexOf()</code>, <code>lastIndexOf()</code>, <code>includes()</code>, <code>find()</code>, <code>findIndex()</code>.</li> <li>String Access: Methods to access string properties, like <code>charAt()</code>, <code>charCodeAt()</code>, <code>substring()</code>.</li> </ul> </li> <li> <p>Iteration Methods:</p> <ul> <li>Array Iteration: Methods to iterate over arrays, like <code>forEach()</code>, <code>map()</code>, <code>filter()</code>, <code>reduce()</code>, <code>some()</code>, <code>every()</code>.</li> <li>String Iteration: Methods to iterate over strings, like <code>charAt()</code>, <code>charCodeAt()</code>, <code>substring()</code>.</li> </ul> </li> <li> <p>Comparison Methods:</p> <ul> <li>Equality Comparison: Methods to compare values, like <code>===</code>, <code>!==</code>.</li> <li>Sorting Comparison: Methods to define sorting order, like <code>sort()</code>.</li> </ul> </li> <li> <p>Conversion Methods:</p> <ul> <li>Type Conversion: Methods to convert between different data types, like <code>toString()</code>, <code>parseInt()</code>, <code>parseFloat()</code>.</li> <li>Format Conversion: Methods to convert data format, like <code>JSON.stringify()</code>, <code>JSON.parse()</code>.</li> </ul> </li> <li> <p>Validation Methods:</p> <ul> <li>Data Validation: Methods to validate data, like <code>isNaN()</code>, <code>isFinite()</code>.</li> <li>String Validation: Methods to validate strings, like <code>startsWith()</code>, <code>endsWith()</code>, <code>includes()</code>.</li> </ul> </li> <li> <p>Utility Methods:</p> <ul> <li>Math Utility: Methods for mathematical operations, like <code>Math.abs()</code>, <code>Math.max()</code>, <code>Math.min()</code>, <code>Math.round()</code>.</li> <li>Time Utility: Methods for time-related operations, like <code>setTimeout()</code>, <code>setInterval()</code>, <code>Date.now()</code>.</li> </ul> </li> </ol> <p>These categories help in understanding the purpose of different methods in JavaScript and how they can be used to achieve specific tasks in programming.</p>"},{"location":"more/research/wordpress.html","title":"Wordpress","text":"<ul> <li>How to install WordPress: Official</li> <li>How to install WordPress with Ubuntu 20.04 and a LAMP Stack</li> <li>Installing WordPress: 6 Easy Steps</li> <li>WordPress - Theme Management : tutorial</li> </ul>"}]}