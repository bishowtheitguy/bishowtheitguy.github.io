var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#deploying-your-docs","title":"Deploying your docs","text":"<pre><code>my-project/\n    mkdocs.yml\n    docs/\norgname.github.io/\n\n$ cd ../orgname.github.io/\n$ mkdocs gh-deploy --config-file ../&lt;your-repo&gt;/mkdocs.yml --remote-branch &lt;master&gt;\n</code></pre>"},{"location":"index.html#plugins-used","title":"Plugins Used","text":"<ol> <li>MkDocs</li> <li>Material for MkDocs</li> <li>MkDocs GLightbox</li> <li>MkDocs Video</li> </ol>"},{"location":"index.html#suggestion","title":"Suggestion","text":"<ul> <li>best MkDocs plugins</li> <li>Uick Guide: setup essentials</li> </ul>"},{"location":"backend/intro.html","title":"Intro","text":"<p>Backend</p> <ul> <li> <p> Django</p> </li> <li> <p> FastAPI</p> </li> </ul>"},{"location":"backend/slides.html","title":"Backend","text":""},{"location":"backend/slides.html#presentation","title":"Presentation","text":""},{"location":"backend/django/django-form.html","title":"django form","text":""},{"location":"backend/django/django-form.html#django-form","title":"Django Form","text":""},{"location":"backend/django/django-middleware.html","title":"django middleware","text":"<p>Middleware is a framework of hooks into Django\u2019s request/response processing. It\u2019s a light, low-level \u201cplugin\u201d system for globally altering Django\u2019s input or output.</p>"},{"location":"backend/django/django-middleware.html#reference","title":"Reference","text":"<ul> <li>Django Middleware</li> </ul>"},{"location":"backend/django/django-view.html","title":"django views","text":"<p>As per Django Documentation,</p> <p>A view function is a Python function that takes a Web request and returns a Web response. This response can be the HTML contents of a Web page, or a redirect, or a 404 error, or an XML document, or an image, anything that a web browser can display.</p> <p></p> <p>Django views roughly correspond to controllers in MVC, and Django templates to views in MVC.</p> <p></p> <p></p>"},{"location":"backend/django/django-view.html#reference","title":"Reference","text":"<ul> <li>Django Tutorial - geeksforgeeks</li> <li>Django w3schools</li> <li>Django javatpoint</li> <li>Django crud: function based views</li> <li>Django crud: class based views</li> <li>Django project MVT structure</li> <li>Django Tutorial: realPython</li> </ul>"},{"location":"backend/django/intro.html","title":"Intro","text":""},{"location":"backend/django/intro.html#djangos-parts","title":"Django\u2019s Parts","text":"<p>Django is built on three core parts:</p> <ol> <li>A mapper between URLs and view code</li> <li>An abstraction for interacting with a database</li> <li>A templating system to manage your HTML like code</li> </ol>"},{"location":"backend/django/intro.html#reference","title":"Reference","text":"<ul> <li>Django in Action MEAP V01 by Christopher Trudeau - Manning publication</li> </ul>"},{"location":"backend/drf/drf-functionbasedviews.html","title":"drf fbv","text":"<p>Django has two types of views;</p> <ul> <li>function-based views (FBVs), &amp;</li> <li>class-based views (CBVs)</li> </ul> <p>Django originally started out with only FBVs, but then added CBVs as a way to templatize functionality so that you didn\u2019t have to write boilerplate (i.e. the same code) code over and over again.</p>"},{"location":"backend/drf/drf-functionbasedviews.html#function-based-views-fbvs","title":"Function-based views (FBVs)","text":"<p>FBVs code here:</p> <p>Todo App (using FBVs)</p> <p>Let's look at how a simple todo application that allows CRUD operations would be written using only FBVs.</p> <pre><code># todo/views.py\n\nfrom django.shortcuts import render, get_object_or_404, redirect\n\nfrom .forms import TaskForm, ConfirmForm\nfrom .models import Task\n\n\ndef task_list_view(request):\n    return render(request, 'todo/task_list.html', {\n        'tasks': Task.objects.all(),\n    })\n\n\ndef task_create_view(request):\n    if request.method == 'POST':\n        form = TaskForm(data=request.POST)\n        if form.is_valid():\n            form.save()\n            return HttpResponseRedirect(reverse('task-list'))\n\n    return render(request, 'todo/task_create.html', {\n        'form': TaskForm(),\n    })\n\n\ndef task_detail_view(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    return render(request, 'todo/task_detail.html', {\n        'task': task,\n    })\n\n\ndef task_update_view(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n\n    if request.method == 'POST':\n        form = TaskForm(instance=task, data=request.POST)\n        if form.is_valid():\n            form.save()\n            return HttpResponseRedirect(reverse('task-detail', args={pk: pk}))\n\n    return render(request, 'todo/task_update.html', {\n        'task': task,\n        'form': TaskForm(instance=task),\n    })\n\n\ndef task_delete_view(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n\n    if request.method == 'POST':\n        form = ConfirmForm(data=request.POST)\n        if form.is_valid():\n            task.delete()\n            return HttpResponseRedirect(reverse('task-list'))\n\n    return render(request, 'todo/task_delete.html', {\n        'task': task,\n        'form': ConfirmForm(),\n    })\n</code></pre> <p>You can get the full source code on GitHub.</p>"},{"location":"backend/drf/drf-functionbasedviews.html#class-based-views-cbvs","title":"Class-based views (CBVs)","text":"<p>CBVs code here:</p> <p></p> <p>Todo App (using CBVs)</p> <p>Now, let's rewrite our todo application to only use CBVs:</p> <pre><code># todo/views.py\n\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.views import View\n\nfrom .forms import TaskForm, ConfirmForm\nfrom .models import Task\n\n\nclass TaskListView(View):\n\n    def get(self, request, *args, **kwargs):\n        return render(request, 'todo/task_list.html', {\n            'tasks': Task.objects.all(),\n        })\n\n\nclass TaskCreateView(View):\n\n    def get(self, request, *args, **kwargs):\n        return render(request, 'todo/task_create.html', {\n            'form': TaskForm(),\n        })\n\n    def post(self, request, *args, **kwargs):\n        form = TaskForm(data=request.POST)\n        if form.is_valid():\n            task = form.save()\n            return redirect('task-detail', pk=task.pk)\n\n        return self.get(request)\n\n\nclass TaskDetailView(View):\n\n    def get(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n\n        return render(request, 'todo/task_detail.html', {\n            'task': task,\n        })\n\n\nclass TaskUpdateView(View):\n\n    def get(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        return render(request, 'todo/task_update.html', {\n            'task': task,\n            'form': TaskForm(instance=task),\n        })\n\n    def post(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        form = TaskForm(instance=task, data=request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('task-detail', pk=task.pk)\n\n        return self.get(request, pk)\n\n\nclass TaskDeleteView(View):\n\n    def get(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        return render(request, 'todo/task_confirm_delete.html', {\n            'task': task,\n            'form': ConfirmForm(),\n        })\n\n    def post(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        form = ConfirmForm(data=request.POST)\n        if form.is_valid():\n            task.delete()\n            return redirect('task-list')\n\n        return self.get(request, pk)\n</code></pre> <p>Also, let's not forget to make our urls.py call <code>as_view()</code>:</p> <pre><code># todo/urls.py\n\nfrom django.urls import path\n\nfrom .views import TaskListView, TaskDetailView, TaskCreateView, TaskUpdateView, TaskDeleteView\n\n\nurlpatterns = [\n    path('', TaskListView.as_view(), name='task-list'),\n    path('create/', TaskCreateView.as_view(), name='task-create'),\n    path('&lt;int:pk&gt;/', TaskDetailView.as_view(), name='task-detail'),\n    path('update/&lt;int:pk&gt;/', TaskUpdateView.as_view(), name='task-update'),\n    path('delete/&lt;int:pk&gt;/', TaskDeleteView.as_view(), name='task-delete'),\n]\n</code></pre> <p>You can get the full source code on Github</p>"},{"location":"backend/drf/drf-functionbasedviews.html#djangos-generic-cbvs","title":"Django's Generic CBVs","text":"<p>Django's generic CBVs are great for solving common problems like retrieving, creating, modifying, and deleting objects as well as pagination and archive views. They speed up the development process too.</p> <pre><code>from django.views.generic import CreateView\n\n\nclass TaskCreateView(CreateView):\n    model = Task\n    context_object_name = 'task'\n    fields = ('name', 'description', 'is_done')\n    template_name = 'todo/task_create.html'\n</code></pre>"},{"location":"backend/drf/drf-functionbasedviews.html#djangos-built-in-cbv-types","title":"Django's Built-in CBV Types","text":""},{"location":"backend/drf/drf-functionbasedviews.html#reference","title":"Reference","text":"<ul> <li>Django : Class Based Views vs Function Based Views</li> <li>Class Based vs Function Based Views \u2013 Which One is Better to Use in Django?</li> <li>Class-based vs Function-based Views in Django</li> <li>What Are Django\u2019s Class-Based Views and How to Use Them Effectively</li> </ul>"},{"location":"backend/drf/drf-viewsets.html","title":"drf viewsets","text":""},{"location":"backend/drf/drf-viewsets.html#djangorestframework","title":"djangorestframework","text":""},{"location":"backend/drf/drf-viewsets.html#drf-views","title":"DRF Views","text":"<p>The essential component of DRF views is the <code>APIView</code> class, which subclasses Django's <code>View</code> class.</p> <p><code>APIView</code> class is a base for all the views that you might choose to use in your DRF application.</p> <p>Whether it be-</p> <ul> <li>function-based views</li> <li>class-based views</li> <li>mixins</li> <li>generic view classes</li> <li>viewsets</li> </ul> <p>they all use the <code>APIView</code> class.</p> <p></p>"},{"location":"backend/drf/drf-viewsets.html#class-based-views","title":"Class-based Views","text":"<p>Class-based views extend the <code>APIView</code> class. With them, you determine how requests will be handled and which policy attributes you're going to use.</p> <pre><code>from rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass DeleteAllItems(APIView):\n    def delete(self, request):\n        Item.objects.all().delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n</code></pre>"},{"location":"backend/drf/drf-viewsets.html#policy-attributes","title":"Policy Attributes","text":"<p>If you want to override the default settings for your class-based views, you can use <code>policy attributes</code>.</p> <p>In the following example, we changed the permissions and how a response is rendered with the <code>permission_classes</code> and <code>renderer_classes</code> policy attributes: </p><pre><code>from rest_framework.permissions import IsAuthenticated\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass ItemsNotDone(APIView):\n\n    permission_classes = [IsAuthenticated]  # policy attribute\n    renderer_classes = [JSONRenderer]       # policy attribute\n\n    def get(self, request):\n\n        user_count = Item.objects.filter(done=False).count()\n        content = {'not_done': user_count}\n\n        return Response(content)\n</code></pre>"},{"location":"backend/drf/drf-viewsets.html#function-based-views","title":"Function-based Views","text":"<p>There are two ways to directly implement <code>APIView</code>: With a function or with a class. If you're writing a view in the form of a function, you'll need to use the <code>@api_view</code> decorator.</p> <p><code>@api_view</code> is a decorator that converts a <code>function-based</code> view into an APIView subclass (thus providing the <code>Response</code> and <code>Request</code> classes). It takes a list of allowed methods for the view as an argument.</p> <pre><code>from rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\n@api_view(['DELETE'])\ndef delete_all_items(request):\n    Item.objects.all().delete()\n    return Response(status=status.HTTP_200_OK)\n</code></pre>"},{"location":"backend/drf/drf-viewsets.html#policy-decorators","title":"Policy Decorators","text":"<p>If you want to override the default settings for your function-based view, you can use policy decorators. You can use one or multiple of the following</p> <ul> <li><code>@renderer_classes</code></li> <li><code>@parser_classes</code></li> <li><code>@authentication_classes</code></li> <li><code>@throttle_classes</code></li> <li><code>@permission_classes</code></li> </ul> <p>Those decorators correspond to APIView subclasses. Because the <code>@api_view</code> decorator checks if any of the following decorators are used, they need to be added below the <code>api_view</code> decorator.</p> <pre><code>from rest_framework.decorators import api_view, permission_classes, renderer_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.response import Response\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])  # policy decorator\n@renderer_classes([JSONRenderer])       # policy decorator\ndef items_not_done(request):\n    user_count = Item.objects.filter(done=False).count()\n    content = {'not_done': user_count}\n\n    return Response(content)\n</code></pre>"},{"location":"backend/drf/drf-viewsets.html#viewsets","title":"ViewSets","text":"<p>A ViewSet class is simply a type of <code>class-based View</code>.</p> <p>There are four types of ViewSets, from the most basic to the most powerful:</p> <ol> <li>ViewSet</li> <li>GenericViewSet</li> <li>ReadOnlyModelViewSet</li> <li>ModelViewSet</li> </ol>"},{"location":"backend/drf/drf-viewsets.html#reference","title":"Reference","text":"<ul> <li>Django REST Framework Views - ViewSets</li> <li>viewsets - django-rest-framework.org</li> </ul>"},{"location":"backend/drf/python-microservices.html","title":"python microservices","text":""},{"location":"backend/drf/python-microservices.html#python-questions","title":"Python Questions","text":""},{"location":"backend/drf/python-microservices.html#topics","title":"Topics","text":"<ul> <li>What are Microservices?</li> <li>Project Introduction</li> <li>Django Setup</li> <li>Adding Docker Files</li> <li>Connect Django with MySQL with Docker</li> <li>Models &amp; Serializers</li> <li>Rest APIs with ViewSets</li> <li>User Endpoint with APIView</li> <li>Flask Setup with Docker</li> <li>Connect Flask with Mysql</li> <li>Models</li> <li>Flask Migrations</li> <li>RabbitMQ</li> <li>Django Producer and Consumer</li> <li>Flask Producer and Consumer</li> <li>Queue Service</li> <li>Data Consistency</li> <li>Internal Http Requests</li> <li>Finishing the python apps</li> <li>React Setup</li> <li>Products CRUD</li> <li>Completing the Main App</li> </ul> <ul> <li>Learn About Python Microservices - freecodecamp</li> <li>Python Microservices Web App - Full Course (youtube)</li> <li>Microservices in Python: Django, RabbitMQ and Pika</li> <li>Building Scalable Applications with Django, Celery, and RabbitMQ: A Step-by-Step Guide</li> </ul>"},{"location":"backend/package/dj-rest-auth.html","title":"dj-rest-auth","text":"<p><code>dj-rest-auth</code> package</p> <p>First we will add log in, log out, and password reset API endpoints. These come out-of-the-box with the popular <code>dj-rest-auth</code> package.</p>"},{"location":"backend/package/dj-rest-auth.html#step-1-installation","title":"Step 1: Installation","text":"<pre><code>pip install dj-rest-auth==2.1.11\n</code></pre>"},{"location":"backend/package/dj-rest-auth.html#step-2-updated-installed_apps","title":"Step 2: Updated <code>INSTALLED_APPS</code>","text":"<p>Add the new app to the <code>INSTALLED_APPS</code> config in our <code>django_project/settings.py</code> file.</p> settings.py<pre><code>INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n\n    # 3rd-party apps\n    \"rest_framework\",\n    \"corsheaders\",\n    \"rest_framework.authtoken\",\n    \"dj_rest_auth\", # new\n\n    # Local\n    \"accounts.apps.AccountsConfig\",\n    \"posts.apps.PostsConfig\",\n]\n</code></pre>"},{"location":"backend/package/dj-rest-auth.html#step-3-update-urlspy","title":"Step 3: Update <code>urls.py</code>","text":"<p>Update our <code>django_project/urls.py</code> file with the <code>dj_rest_auth</code> package. We\u2019re setting the URL routes to <code>api/v1/dj-rest-auth</code>. Make sure to note that URLs should have a dash <code>-</code> not an underscore <code>_</code>, which is an easy mistake to make.</p> urls.py<pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/v1/\", include(\"posts.urls\")),\n    path(\"api-auth/\", include(\"rest_framework.urls\")),\n    path(\"api/v1/dj-rest-auth/\", include(\"dj_rest_auth.urls\")), # new\n]\n</code></pre> <p>And we\u2019re done! If you have ever tried to implement your own user authentication endpoints, it is truly amazing how much time and headache <code>dj-rest-auth</code> saves for us. Now we can spin up the server to see what <code>dj-rest-auth</code> has provided.</p>"},{"location":"backend/package/dj-rest-auth.html#run-the-serve","title":"Run the serve","text":"<pre><code>python manage.py runserver\n</code></pre>"},{"location":"backend/package/dj-rest-auth.html#api-log-in-endpoint","title":"API Log In Endpoint","text":"<pre><code>Login\nhttp://127.0.0.1:8000/api/v1/dj-rest-auth/login/\n\nLogout\nhttp://127.0.0.1:8000/api/v1/dj-rest-auth/logout/\n\nPassword Reset\nhttp://127.0.0.1:8000/api/v1/dj-rest-auth/password/reset\n\nPassword Reset Confirm\nhttp://127.0.0.1:8000/api/v1/dj-rest-auth/password/reset/confirm\n</code></pre>"},{"location":"backend/package/dj-rest-auth.html#reference","title":"Reference","text":"<ul> <li>Django for APIs by William S. Vincent, page number: 140</li> </ul>"},{"location":"backend/package/django-allauth.html","title":"django-allauth","text":"<p>User Registration</p> <p>Next up is our user registration, or sign up, endpoint. Traditional Django does not ship with built-in views or URLs for user registration and neither does Django REST Framework. Which means we need to write our own code from scratch; a somewhat risky approach given the seriousness\u2013 and security implications\u2013of getting this wrong.</p> <p>A popular approach is to use the third-party package <code>django-allauth</code> which comes with user registration as well as a number of additional features to the Django auth system such as social authentication via Facebook, Google, Twitter, etc.</p> <p>If we add <code>dj_rest_auth.registration</code> from the <code>dj-rest-auth</code> package then we have user registration endpoints too!</p>"},{"location":"backend/package/django-allauth.html#step-1-install-django-allauth","title":"Step 1: Install <code>django-allauth</code>","text":"<pre><code>pip install django-allauth~=0.48.0\n</code></pre> <p>Then update our <code>INSTALLED_APPS</code> setting. We must add several new configs:</p> <ul> <li><code>django.contrib.sites</code></li> <li><code>allauth</code></li> <li><code>allauth.account</code></li> <li><code>allauth.socialaccount</code></li> <li><code>dj_rest_auth.registration</code></li> </ul> <pre><code>INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"django.contrib.sites\", # new\n\n    # 3rd-party apps\n    \"rest_framework\",\n    \"corsheaders\",\n    \"rest_framework.authtoken\",\n    \"allauth\", # new\n    \"allauth.account\", # new\n    \"allauth.socialaccount\", # new\n    \"dj_rest_auth\",\n    \"dj_rest_auth.registration\", # new\n\n    # Local\n    \"accounts.apps.AccountsConfig\",\n    \"posts.apps.PostsConfig\",\n]\n</code></pre> <p><code>django-allauth</code> needs to be added to the <code>TEMPLATES</code> configuration after existing context processors as well as setting the <code>EMAIL_BACKEND</code> to console and adding a <code>SITE_ID</code> of 1.</p> settings.py<pre><code>TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n                \"django.template.context_processors.request\", # new\n            ],\n        },\n    },\n]\n\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\" # new\nSITE_ID = 1 # new\n</code></pre> <p>The email back-end config is needed since by default an email will be sent when a new user is registered, asking them to confirm their account. Rather than also set up an email server, we will output the emails to the console with the <code>console.EmailBackend</code> setting.</p> <p><code>SITE_ID</code> is part of the built-in Django \u201csites\u201d framework97 , which is a way to host multiple websites from the same Django project. We only have one site we are working on here but <code>django-allauth</code> uses the sites framework, so we must specify a default setting.</p> <p>Ok. We\u2019ve added new apps so it\u2019s time to update the database.</p> <pre><code>python manage.py migrate\n</code></pre> <p>Then add a new URL route for registration.</p> <pre><code>    # django_project/urls.py\n    from django.contrib import admin\n    from django.urls import path, include\n    urlpatterns = [\n        path(\"admin/\", admin.site.urls),\n        path(\"api/v1/\", include(\"posts.urls\")),\n        path(\"api-auth/\", include(\"rest_framework.urls\")),\n        path(\"api/v1/dj-rest-auth/\", include(\"dj_rest_auth.urls\")),\n        path(\"api/v1/dj-rest-auth/registration/\", include(\"dj_rest_auth.registration.urls\")), # new\n    ]\n</code></pre> <p>And we\u2019re done. We can run the local server.</p> <pre><code>python manage.py runserver\n</code></pre> <p>There is now a user registration endpoint at:</p> <pre><code>http://127.0.0.1:8000/api/v1/dj-rest-auth/registration/.\n</code></pre>"},{"location":"backend/package/django-allauth.html#conclusion","title":"Conclusion","text":"<p>As a result, a popular, powerful, and secure approach is to rely on the third-party packages dj-rest-auth and django-allauth to minimize the amount of code we have to write from scratch.</p>"},{"location":"backend/package/django-allauth.html#reference","title":"Reference","text":"<ul> <li>Django for APIs by William S. Vincent</li> </ul>"},{"location":"backend/package/jwt-guide.html","title":"jwt installation","text":""},{"location":"backend/package/jwt-guide.html#jwt","title":"jwt","text":""},{"location":"backend/package/jwt-guide.html#virtual-env","title":"Virtual env","text":"<pre><code>$ python -m venv venv\n$ cd venv/Scripts\n$ activate\n</code></pre>"},{"location":"backend/package/jwt-guide.html#installation","title":"Installation","text":"<pre><code>$ pip install django\n\n$ pip install djangorestframework\n$ pip install markdown\n$ pip install django-filter\n\n$ pip install djangorestframework-simplejwt\n\n# pip install python-dotenv\n\n$ pip install mysqlclient\n</code></pre>"},{"location":"backend/package/jwt-guide.html#installed-apps","title":"Installed apps","text":"<pre><code>INSTALLED_APPS = [\n    ...'\n    'rest_framework',\n    'rest_framework_simplejwt',\n    ...\n]\n</code></pre>"},{"location":"backend/package/jwt-guide.html#env-example","title":".env example","text":"<pre><code>SECRET_KEY=\"\"\nDB_NAME=django_db\nDB_USER=root\nDB_PASS=\nDB_HOST=localhost\nDB_PORT=3308\n</code></pre>"},{"location":"backend/package/jwt-guide.html#project-settings","title":"Project Settings","text":"<pre><code># settings.py\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\nSECRET_KEY = os.environ.get('SECRET_KEY')\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': os.environ.get('DB_NAME'), #here\n        'USER': os.environ.get('DB_USER'), #here\n        'PASSWORD': os.environ.get('DB_PASS'), #here\n        'HOST': '127.0.0.1',\n        'PORT': '3306',\n        'OPTIONS': {'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\"},\n    }\n}\n\n# Add\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n}\n</code></pre>"},{"location":"backend/package/jwt-guide.html#reference","title":"Reference","text":"<ul> <li>Django Environment - python-dotenv</li> <li>python-dotenv</li> <li>Generating Secret key in django app</li> <li>mkdocs dropdown - github</li> <li>mkdocs dropdown - stackoverflow </li> </ul>"},{"location":"backend/package/jwt-installation.html","title":"jwt guide","text":""},{"location":"backend/package/jwt-installation.html#jwt","title":"JWT","text":""},{"location":"backend/package/jwt-installation.html#django","title":"Django","text":"<pre><code>// Installation\n\n$ pip install django\n</code></pre>"},{"location":"backend/package/jwt-installation.html#django-rest-framework","title":"Django REST framework","text":"<pre><code>// Installation\n\n$ pip install djangorestframework\n$ pip install markdown\n$ pip install django-filter \n\n$ pip install djangorestframework, markdown, django-filter\n</code></pre>"},{"location":"backend/package/jwt-installation.html#installed-apps","title":"Installed Apps","text":"<pre><code>// you have to add 'rest_framework' to your INSTALLED_APPS setting.\n\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n]\n</code></pre>"},{"location":"backend/package/jwt-installation.html#simple-jwt","title":"Simple JWT","text":"<p>Simple JWT provides a JSON Web Token authentication backend for the Django REST Framework. A JSON Web Token authentication plugin for the Django REST Framework.</p>"},{"location":"backend/package/jwt-installation.html#_1","title":"jwt guide","text":"<pre><code>// Installation\n\n$ pip install djangorestframework-simplejwt\n</code></pre> <pre><code>// add rest_framework_simplejwt to INSTALLED_APPS.\n\nINSTALLED_APPS = [\n    ...\n    'rest_framework_simplejwt',\n    ...\n]\n</code></pre>"},{"location":"backend/package/jwt-installation.html#project-configuration","title":"Project Configuration","text":"<p>Then, your django project must be configured to use the library. In <code>settings.py</code>, add <code>rest_framework_simplejwt.authentication.JWTAuthentication</code> to the list of authentication classes:</p> <pre><code>REST_FRAMEWORK = {\n    ...\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        ...\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n    ...\n}\n</code></pre> <p>Also, in your root <code>urls.py</code> file (or any other url config), include routes for Simple JWT\u2019s <code>TokenObtainPairView</code> and <code>TokenRefreshView</code> views:</p> <pre><code>from rest_framework_simplejwt.views import (\n    TokenObtainPairView,\n    TokenRefreshView,\n)\n\nurlpatterns = [\n    ...\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    ...\n]\n</code></pre> <ul> <li>Simple JWT</li> </ul>"},{"location":"backend/package/python-dotenv.html","title":"python dotenv","text":""},{"location":"backend/package/python-dotenv.html#python-dotenv","title":"Python-dotenv","text":"<p>Python-dotenv reads key-value pairs from a .env file and can set them as environment variables</p> <pre><code>$ pip install python-dotenv\n</code></pre> <pre><code>// .env.example\n</code></pre> <ul> <li>python-dotenv</li> </ul>"},{"location":"backend/package/python-mysqlclient.html","title":"mysqlclient","text":""},{"location":"backend/package/python-mysqlclient.html#_1","title":"mysqlclient","text":"<pre><code>$ pip install mysqlclient\n</code></pre> <ul> <li>mysqlclient </li> </ul>"},{"location":"frontend/redux-middleware.html","title":"redux middleware","text":"<p>Redux Middleware is code that lets us intercept redux actions before they reach the reducer. <code>redux-thunk</code> is an example of Redux Middleware, along with other popular <code>redux</code> libraries like <code>redux-logger</code> , <code>redux-promise-middleware</code> , and <code>redux-saga</code> (an alternative to <code>redux-thunk</code> ).</p> <p></p>"},{"location":"frontend/redux-middleware.html#redux-thunk-gives-redux-side-effects","title":"Redux Thunk Gives Redux Side-Effects","text":"<p>In <code>redux</code>, actions creators are functions that return an action, which is a plain javascript objects with a <code>type</code> property.</p> <ul> <li><code>redux-thunk</code> is a Redux Middleware that lets your action creators return a function called a thunk, instead of an action. </li> <li>This thunk can return an action when invoked but it also has access to the Redux store's <code>dispatch</code> function, meaning it can also dispatch other actions. </li> <li>Typically, API calls are invoked inside these thunks and different actions are dispatched depending on these API responses.</li> </ul> <p>For example, below are two action creators, the first returns a plain redux action. The second returns a <code>thunk</code>, thanks to <code>redux-thunk</code>.</p> <pre><code>// action creators\n\n// Action Creator returns action\nloadUser = (userData) =&gt; ({\n  type: \"LOAD_USER_DATA\", userData\n})\n\n/* \n  Action Creator which returns function which dispatches other actions\n*/\nfetchUser = (usersUrl) =&gt; (dispatch) =&gt; {\n  dispatch({ type: \"DISPLAY_LOADING_SCREEN\" })\n\n  return fetch(usersUrl)\n    .then(response =&gt; response.json())\n    .then((json) =&gt; {\n      if (json.success) {\n        dispatch({ type: \"LOAD_USER_DATA\", json.userData })\n      } else {\n        dispatch({ type: \"LOAD_USER_FAILED\" })\n      }\n    })\n}\n</code></pre>"},{"location":"frontend/redux-middleware.html#summary","title":"Summary","text":"<ul> <li><code>redux-thunk</code> lets us create actions which are functions that can dispatch other functions instead of just objects.</li> <li><code>redux-thunk</code> is an example of Redux Middleware and as such, needs to adhere to the Redux Middleware signature of <code>validMiddleware =&gt; (store) =&gt; (next) =&gt; (action)</code></li> <li>The core logic of <code>redux-thunk</code> is essentially a simple if statement that checks if the action is a thunk (ie. a function) and invokes it if it is. By default, it exports the Middleware with no <code>extraArgument</code> but it then attaches the <code>createThunkMiddleware</code> function onto the exported Middleware to be used if needed.</li> </ul>"},{"location":"frontend/redux-middleware.html#reference","title":"Reference","text":"<ul> <li>Understanding redux thunk</li> <li>What is the use of middleware Redux thunk ?</li> </ul>"},{"location":"frontend/rtk-guide.html","title":"rtk guide","text":"<ul> <li>official redux rtk</li> <li>Understanding Redux Toolkit</li> <li>reduxt toolkit</li> </ul>"},{"location":"frontend/slides.html","title":"Frontend","text":""},{"location":"frontend/slides.html#presentation","title":"Presentation","text":""},{"location":"frontend/package/intro.html","title":"Introduction","text":"<p>JavaScript utility libraries commonly used in React development.</p> <ul> <li> <p><code>lodash</code>:</p> <p><code>Lodash</code> is a widely used utility library in the JavaScript ecosystem, and it provides a comprehensive set of functions for working with arrays, objects, strings, and more.</p> <pre><code> // 1. Installation\n npm install lodash\n\n // 2. Importing\n import _ from 'lodash'; // Import the entire library\n // or\n import { map, filter, debounce } from 'lodash'; // Import specific functions\n\n // Example Debounce\n import _ from 'lodash';\n\n const debouncedFunction = _.debounce((value) =&gt; {\n     console.log('Debounced:', value);\n }, 300);\n</code></pre> </li> <li> <p>Underscore.js:</p> <p><code>Underscore.js</code> is similar to Lodash and provides a set of utility functions for working with arrays, objects, functions, and more. It predates Lodash and served as an inspiration for it.</p> </li> <li> <p>axios:</p> <p><code>axios</code> is a promise-based HTTP client that simplifies making HTTP requests. It is commonly used for handling API requests in React applications.</p> </li> <li> <p>React Query:</p> <p><code>React Query</code> is a library for managing, caching, and synchronizing data in React applications. It provides hooks for fetching and updating data with a focus on simplicity and performance.</p> </li> <li> <p>Ramda:</p> <p><code>Ramda</code> is a functional programming library that focuses on immutability and functional composition. It provides functions for functional programming paradigms and is suitable for projects that adopt a more functional style.</p> </li> <li> <p>Immer:</p> <p><code>Immer</code> is a library that simplifies state management by enabling a more convenient way to work with immutable data structures. It is often used in combination with React's state to make state updates more concise.</p> </li> </ul>"},{"location":"frontend/package/antd/index.html","title":"Intro","text":""},{"location":"frontend/package/antd/index.html#and","title":"and","text":"<pre><code>$ pnpm add antd\n$ pnpm add @ant-design/icons\n</code></pre>"},{"location":"frontend/package/antd/antd-form-validator.html","title":"Antd Form Validation","text":""},{"location":"frontend/package/antd/antd-form-validator.html#antd-form-validation","title":"Antd Form Validation","text":"<p><code>Components/modals/quickAddPerson.js</code></p> BasicAdvanced <pre><code>const validateEmail = (_, value) =&gt; {\n    // Basic email validation using a regular expression\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n    if (!value || emailRegex.test(value)) {\n        return Promise.resolve();\n    }\n\n    return Promise.reject(\"Invalid email address\");\n};\n\n&lt;Form.Item\n    name=\"email\"\n    label=\"Email\"\n    rules={[\n        {\n            required: true,\n            message: \"Please enter your email\",\n        },\n        {\n            validator: validateEmail,\n        },\n    ]}\n&gt;\n    &lt;Input placeholder=\"Email\" /&gt;\n&lt;/Form.Item&gt;\n</code></pre>"},{"location":"frontend/package/antd/antd-form.html","title":"Antd Form","text":"<p>Ant Design provides the <code>form.getFieldValue</code> and <code>form.setFieldsValue</code> methods to get and set form field values, respectively</p> jsx<pre><code>const [form] = Form.useForm();\n\nconst otherFieldValue = form.getFieldValue(\"otherField\");\n\nform.setFieldsValue({\n    currentField: /* New value based on custom logic */,\n});\n\nuseEffect(() =&gt; {\n    // Set default values based on external data\n    form.setFieldsValue({\n      username: externalData.username,\n      email: externalData.email,\n    });\n}, [externalData, form]);\n</code></pre>"},{"location":"frontend/package/antd/controlled-components.html","title":"Controlled Component","text":""},{"location":"frontend/package/antd/controlled-components.html#controlled-components-with-form-component","title":"Controlled Components with Form Component:","text":"<p>Ant Design provides a <code>Form</code> component that simplifies form handling. You can use controlled components and the <code>Form</code> component together to manage form state and validation easily.</p> jsx<pre><code>import { Form, Input, Button } from \"antd\";\nimport { useState } from \"react\";\n\nfunction MyForm() {\n  const [form] = Form.useForm();\n  const [formData, setFormData] = useState({});\n\n  const onFinish = (values) =&gt; {\n    console.log(\"Form submitted:\", values);\n    // Perform further actions with form data\n  };\n\n  return (\n    &lt;Form form={form} onFinish={onFinish}&gt;\n      &lt;Form.Item name=\"username\" label=\"Username\"&gt;\n        &lt;Input /&gt;\n      &lt;/Form.Item&gt;\n      &lt;Form.Item name=\"password\" label=\"Password\"&gt;\n        &lt;Input.Password /&gt;\n      &lt;/Form.Item&gt;\n      &lt;Form.Item&gt;\n        &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n          Submit\n        &lt;/Button&gt;\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n  );\n}\n</code></pre>"},{"location":"frontend/package/lodash/debounce.html","title":"debounce","text":"<p><code>npm install lodash</code></p> jsx<pre><code>import React, { useState, useEffect } from \"react\";\nimport { Select } from \"antd\";\nimport debounce from \"lodash/debounce\";\n\nconst { Option } = Select;\n\nconst DebouncedSelect = () =&gt; {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const debouncedSearch = debounce((value) =&gt; {\n    // Your search logic here, e.g., making an API call\n    console.log(\"Searching for:\", value);\n  }, 300); // 300ms debounce delay\n\n  useEffect(() =&gt; {\n    debouncedSearch(searchTerm);\n  }, [searchTerm, debouncedSearch]);\n\n  const handleSearch = (value) =&gt; {\n    setSearchTerm(value);\n  };\n\n  return (\n    &lt;Select\n      showSearch\n      onSearch={handleSearch}\n      style={{ width: 200 }}\n      placeholder=\"Search...\"\n    &gt;\n      &lt;Option value=\"1\"&gt;Option 1&lt;/Option&gt;\n      &lt;Option value=\"2\"&gt;Option 2&lt;/Option&gt;\n      &lt;Option value=\"3\"&gt;Option 3&lt;/Option&gt;\n    &lt;/Select&gt;\n  );\n};\n\nexport default DebouncedSelect;\n</code></pre>"},{"location":"frontend/package/lodash/debounce.html#debounce-with-hoc","title":"Debounce with Hoc","text":"<p>separate the debounce logic and the HOC into separate files for better organization</p> 1. Debounce utility file2. HOC file3. Component file debounce.js<pre><code>// debounce.js\nconst debounce = (func, delay) =&gt; {\n    let timeoutId;\n    return function (...args) {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() =&gt; func.apply(this, args), delay);\n    };\n};\n\nexport default debounce;\n</code></pre> withDebounce.js<pre><code>import React from 'react';\nimport debounce from './debounce';\n\nconst withDebounce = (WrappedComponent) =&gt; {\n    return class WithDebounce extends React.Component {\n        debouncedFunction = debounce((...args) =&gt; {\n            console.log('Debounced function called with args:', args);\n        }, 500); // 500ms debounce delay\n\n        render() {\n            return (\n                &lt;WrappedComponent\n                    {...this.props}\n                    onDebouncedAction={this.debouncedFunction}\n                /&gt;\n            );\n        }\n    };\n};\n\nexport default withDebounce;\n</code></pre> MyComponent.js<pre><code>import React from 'react';\nimport withDebounce from './withDebounce';\n\nconst MyComponent = ({ onDebouncedAction }) =&gt; {\n    const handleClick = () =&gt; {\n        onDebouncedAction('Click event');\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;button onClick={handleClick}&gt;Click me&lt;/button&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default withDebounce(MyComponent);\n</code></pre> <p>Now you can import and use the <code>MyComponent</code> in your main application file:</p> App.js<pre><code>import React from \"react\";\nimport MyComponent from \"./MyComponent\";\n\nconst App = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;MyComponent /&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre> <p>This structure helps maintain a clean separation of concerns, making each file focused on its specific responsibility. The debounce utility is isolated in its own file, and the HOC is defined separately, promoting code modularity and reusability.</p>"},{"location":"frontend/package/tinymce/tinymce.html","title":"Intro","text":"<p>TinyMCE is a popular WYSIWYG editor that can be integrated into React applications. To add a template inside the TinyMCE editor in a React project, you can follow these general steps:</p> <ol> <li> <p>Install TinyMCE:     If you haven't already, install the TinyMCE editor in your React project using a package manager like npm or yarn. Here's an example using npm:</p> <pre><code>npm install tinymce\n</code></pre> </li> <li> <p>Import TinyMCE in your React component:     Import TinyMCE in the React component where you want to use the editor.</p> <pre><code>import { Editor } from \"@tinymce/tinymce-react\";\n</code></pre> </li> <li> <p>Configure TinyMCE:     Set up the TinyMCE configuration in your component. This is where you can define the template and other settings.</p> <pre><code>const TinyMCEEditor = () =&gt; {\n  const handleEditorChange = (content, editor) =&gt; {\n    // Handle content changes here\n    console.log(\"Content:\", content);\n  };\n\n  const templateContent = `\n    &lt;p&gt;This is a template content&lt;/p&gt;\n`;\n\n  return (\n    &lt;Editor\n      apiKey=\"YOUR_API_KEY\" // You can obtain an API key by creating a TinyMCE account\n      initialValue={templateContent}\n      init={{\n        height: 500,\n        menubar: false,\n        plugins: [\n          \"advlist autolink lists link image charmap print preview anchor\",\n          \"searchreplace visualblocks code fullscreen\",\n          \"insertdatetime media table paste code help wordcount\",\n        ],\n        toolbar:\n          \"undo redo | formatselect | bold italic backcolor | \\\n        alignleft aligncenter alignright alignjustify | \\\n        bullist numlist outdent indent | removeformat | help\",\n        content_style:\n          \"body { font-family:Helvetica,Arial,sans-serif; font-size:14px }\",\n      }}\n      onChange={handleEditorChange}\n    /&gt;\n  );\n};\n\nexport default TinyMCEEditor;\n</code></pre> <p>In the above example, templateContent is the initial content of the editor, and you can customize the init object to include the desired plugins, toolbar buttons, and other configurations.</p> </li> <li> <p>Handle Template Insertion:</p> <p>You can provide a button or some other user interaction to insert the template content into the editor. For example, you can add a button that, when clicked, inserts the template content at the current cursor position.</p> <pre><code>const insertTemplate = () =&gt; {\n  const editor = tinymce.activeEditor;\n  if (editor) {\n    editor.insertContent(templateContent);\n  }\n};\n\n// ...\n\n&lt;button onClick={insertTemplate}&gt;Insert Template&lt;/button&gt;;\n</code></pre> <p>Make sure to adapt the code according to your specific requirements and integrate it seamlessly into your React application. Adjust the TinyMCE configuration and event handlers based on your needs.</p> </li> </ol>"},{"location":"frontend/pattern/compound-pattern.html","title":"Compound Pattern","text":"<p>Let's create a compound component for a <code>Modal</code> that can be used to display various types of content. The compound components will include <code>Modal</code>, <code>ModalHeader</code>, <code>ModalBody</code>, and <code>ModalFooter</code>.</p> Modal.jsModalHeader.jsModalBody.jsModalFooter.js <pre><code>import React, { useState } from 'react';\n\nconst Modal = ({ children, isOpen, onClose }) =&gt; {\n    return isOpen ? (\n        &lt;div className=\"modal-overlay\" onClick={onClose}&gt;\n            &lt;div className=\"modal\" onClick={(e) =&gt; e.stopPropagation()}&gt;\n                {children}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    ) : null;\n};\n\nexport default Modal;\n</code></pre> <pre><code>import React from 'react';\n\nconst ModalHeader = ({ children }) =&gt; {\n    return &lt;div className=\"modal-header\"&gt;{children}&lt;/div&gt;;\n};\n\nexport default ModalHeader;\n</code></pre> <pre><code>import React from 'react';\n\nconst ModalBody = ({ children }) =&gt; {\n    return &lt;div className=\"modal-body\"&gt;{children}&lt;/div&gt;;\n};\n\nexport default ModalBody;\n</code></pre> <pre><code>import React from 'react';\n\nconst ModalFooter = ({ children }) =&gt; {\n    return &lt;div className=\"modal-footer\"&gt;{children}&lt;/div&gt;;\n};\n\nexport default ModalFooter;\n</code></pre> <p>Now, let's use these components in an example application:</p> App.js<pre><code>// App.js\nimport React, { useState } from \"react\";\nimport Modal from \"./Modal\";\nimport ModalHeader from \"./ModalHeader\";\nimport ModalBody from \"./ModalBody\";\nimport ModalFooter from \"./ModalFooter\";\n\nconst App = () =&gt; {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const openModal = () =&gt; {\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () =&gt; {\n    setIsModalOpen(false);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Compound Pattern in React - Modal Example&lt;/h1&gt;\n      &lt;button onClick={openModal}&gt;Open Modal&lt;/button&gt;\n\n      &lt;Modal isOpen={isModalOpen} onClose={closeModal}&gt;\n        &lt;ModalHeader&gt;\n          &lt;h2&gt;Modal Title&lt;/h2&gt;\n        &lt;/ModalHeader&gt;\n        &lt;ModalBody&gt;\n          &lt;p&gt;This is the content of the modal.&lt;/p&gt;\n        &lt;/ModalBody&gt;\n        &lt;ModalFooter&gt;\n          &lt;button onClick={closeModal}&gt;Close&lt;/button&gt;\n        &lt;/ModalFooter&gt;\n      &lt;/Modal&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre> <p>In this example, the <code>Modal</code> component serves as the container for the modal content. The <code>ModalHeader</code>, <code>ModalBody</code>, and <code>ModalFooter</code> components are used within the <code>Modal</code> component to structure and style the different parts of the modal.</p> <p>This compound pattern allows you to create a reusable and flexible modal component by composing smaller components together. Each smaller component focuses on a specific part of the modal, making the code more modular and maintainable.</p>"},{"location":"frontend/pattern/hoc-pattern.html","title":"Hoc Pattern","text":"<p>Higher-Order Components (HOCs) are a design pattern in React that allows the reuse of component logic.</p> <p>A Higher-Order Component is a function that takes a component and returns a new component with additional props or behavior. HOCs are commonly used for cross-cutting concerns such as authentication, logging, and data fetching.</p> <p>Here's an example of a Higher-Order Component using a functional component:</p> withLogging.js (HOC file):MyComponent.jsApp.js jsx<pre><code>import React, { useEffect } from 'react';\n\nconst withLogging = (WrappedComponent) =&gt; {\n    const WithLogging = (props) =&gt; {\n        useEffect(() =&gt; {\n            console.log(`Component ${WrappedComponent.name || 'Anonymous'} is mounted`);\n            return () =&gt; {\n                console.log(`Component ${WrappedComponent.name || 'Anonymous'} is unmounted`);\n            };\n        }, []);\n\n        return &lt;WrappedComponent {...props} /&gt;;\n    };\n\n    return WithLogging;\n};\n\nexport default withLogging;\n</code></pre> jsx<pre><code>import React from 'react';\n\nconst MyComponent = () =&gt; {\n    return &lt;div&gt;Hello, I'm a functional component!&lt;/div&gt;;\n};\n\nexport default MyComponent;\n</code></pre> jsx<pre><code>import React from 'react';\nimport withLogging from './withLogging';\nimport MyComponent from './MyComponent';\n\nconst MyComponentWithLogging = withLogging(MyComponent);\n\nconst App = () =&gt; {\n    return (\n        &lt;div&gt;\n            &lt;MyComponentWithLogging /&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default App;\n</code></pre> <p>In this structure:</p> <ul> <li><code>withLogging.js</code> contains the HOC (withLogging).</li> <li><code>MyComponent.js</code> contains the functional component (MyComponent).</li> <li><code>App.js</code> uses the HOC by importing it and applying it to MyComponent.</li> </ul> <p>This modular approach allows you to organize your code better and promotes reusability. You can easily apply the withLogging HOC to other components in different files without duplicating the logic.</p>"},{"location":"frontend/pattern/hoc-pattern.html#when-naming-higher-order-component-hoc-files-in-a-react-application","title":"When naming Higher-Order Component (HOC) files in a React application","text":"<ul> <li> <p>Prefix with \"with\":</p> <p>It's a common convention to prefix the HOC file name with \"with\" to indicate that it is a Higher-Order Component.</p> <pre><code>withExampleHOC.js\nwithAuthentication.js\nwithTheme.js\n</code></pre> </li> <li> <p>Suffix with \"HOC\":</p> <p>Optionally, you can suffix the file name with \"HOC\" to make it explicit that it is a Higher-Order Component.</p> <pre><code>ExampleComponentHOC.js\nAuthenticationHOC.js\n</code></pre> </li> </ul>"},{"location":"frontend/pattern/hoc-pattern.html#real-example","title":"Real Example","text":"<p>You can organize your code in a way that makes sense for your project structure. Here's an example of how you might structure the file:</p> withConditionalFormItem.js<pre><code>import React from \"react\";\nimport { Form } from \"antd\";\n\nconst withConditionalFormItem = (WrappedComponent, condition) =&gt; {\n  return (props) =&gt; {\n    if (condition) {\n      return &lt;WrappedComponent {...props} /&gt;;\n    } else {\n      return null; // or you can render an alternative component/message\n    }\n  };\n};\n\nexport default withConditionalFormItem;\n</code></pre> <p>Then, in your main component file:</p> YourFormComponent.js<pre><code>//\nimport React from \"react\";\nimport { Form, Input } from \"antd\";\nimport withConditionalFormItem from \"./withConditionalFormItem\";\n\n// Usage\nconst ConditionalRemarksFormItem = withConditionalFormItem(\n  Form.Item,\n  !isCircular // Condition based on your boolean value\n);\n\nconst YourFormComponent = () =&gt; {\n  return (\n    &lt;Form&gt;\n      {/* Other Form items */}\n      &lt;ConditionalRemarksFormItem label=\"Remarks\" name=\"remarks\"&gt;\n        &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n      &lt;/ConditionalRemarksFormItem&gt;\n      {/* Other Form items */}\n    &lt;/Form&gt;\n  );\n};\n\nexport default YourFormComponent;\n</code></pre> <p>This way, you have a separate file for the higher-order component, making it easy to reuse across different components in your project.</p>"},{"location":"frontend/pattern/misc.html","title":"Misc","text":""},{"location":"frontend/pattern/misc.html#conditional-rendering-pattern","title":"<code>Conditional Rendering</code> pattern","text":"<pre><code>import React from \"react\";\n\nconst YourComponent = ({ singleCircularReferenceTemplateResponse }) =&gt; {\n  // Check if the response is still loading\n  const isLoading = !singleCircularReferenceTemplateResponse;\n\n  // Check if the response has content\n  const hasContent = !!singleCircularReferenceTemplateResponse?.content;\n\n  return (\n    &lt;div&gt;\n      {isLoading &amp;&amp; &lt;p&gt;Loading...&lt;/p&gt;}\n      {!isLoading &amp;&amp; !hasContent &amp;&amp; &lt;p&gt;No Content available.&lt;/p&gt;}\n      {!isLoading &amp;&amp; hasContent &amp;&amp; (\n        &lt;div\n          dangerouslySetInnerHTML={{\n            __html: singleCircularReferenceTemplateResponse.content,\n          }}\n        &gt;&lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n};\n\nexport default YourComponent;\n</code></pre>"},{"location":"frontend/pattern/react-pattern-intro.html","title":"Introduction","text":""},{"location":"frontend/pattern/react-pattern-intro.html#react-design-patterns","title":"React Design Patterns","text":"<ul> <li><code>Compound</code> Pattern</li> <li><code>HOC</code> Pattern</li> <li><code>Hooks</code> Pattern</li> <li><code>Container/Presentational</code> Pattern</li> <li><code>Render Props</code> Pattern</li> </ul>"},{"location":"frontend/pattern/react-pattern-intro.html#reference","title":"Reference","text":"<ul> <li>reactpatterns.js.org</li> <li>patterns.dev</li> <li> <p>reactpatterns.com</p> </li> <li> <p>React Design Patterns</p> </li> </ul>"},{"location":"frontend/pattern/render-props.html","title":"Render Props","text":"<p>In React, the \"<code>Function as Child</code>\" (FaC) pattern involves passing a function as a child of a component. This pattern is also known as \"Render Props.\" The basic idea is to pass a function as a child to a component, allowing the component to render content or behavior based on the result of that function.</p> <p>Here's a simple example to illustrate the Function as Child pattern:</p> ParentComponent.js<pre><code>import React from \"react\";\n\nconst ParentComponent = ({ children }) =&gt; {\n  // Execute the function (child) and pass data to it\n  return &lt;div&gt;{children(\"Data from Parent\")}&lt;/div&gt;;\n};\n\nexport default ParentComponent;\n</code></pre> <p>Now, you can use <code>ParentComponent</code> in another component and pass a function as its child:</p> App.js<pre><code>import React from \"react\";\nimport ParentComponent from \"./ParentComponent\";\n\nconst App = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Function as Child Pattern&lt;/h1&gt;\n\n      {/* Using ParentComponent and passing a function as its child */}\n      &lt;ParentComponent&gt;\n        {(dataFromParent) =&gt; (\n          &lt;p&gt;{`Received data in child component: ${dataFromParent}`}&lt;/p&gt;\n        )}\n      &lt;/ParentComponent&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre> <p>In this example, the <code>ParentComponent</code> takes a <code>children</code> prop, which is a function. Inside <code>ParentComponent</code>, it calls the <code>children</code> function and passes some data (\"<code>Data from Parent</code>\" in this case). The child component (the function passed as a child) then receives this data and can use it to render content.</p> <p>The main benefit of the Function as Child pattern is that it allows you to inject dynamic behavior or data into a component from its parent without the need for complex props or state management. It provides a way to share functionality between components in a more flexible and composable manner.</p> <p>This pattern is commonly used in React, especially in cases where you want to abstract away some logic or behavior into a component but allow customization in its usage by passing functions as children.</p> <p>Real Example</p> <p>Lets create <code>Toggle</code> component that can be used to toggle the visibility of content.</p> Toggle.js<pre><code>import React, { useState } from \"react\";\n\nconst Toggle = ({ children }) =&gt; {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const toggleVisibility = () =&gt; {\n    setIsVisible(!isVisible);\n  };\n\n  // Render the child function and pass the toggleVisibility function and the current visibility state\n  return children({ isVisible, toggleVisibility });\n};\n\nexport default Toggle;\n</code></pre> <p>Now, let's use the <code>Toggle</code> component in another component:</p> App.js<pre><code>import React from \"react\";\nimport Toggle from \"./Toggle\";\n\nconst App = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Function as Child Pattern - Toggle Example&lt;/h1&gt;\n\n      {/* Using Toggle and passing a function as its child */}\n      &lt;Toggle&gt;\n        {({ isVisible, toggleVisibility }) =&gt; (\n          &lt;div&gt;\n            &lt;button onClick={toggleVisibility}&gt;Toggle Visibility&lt;/button&gt;\n\n            {isVisible &amp;&amp; &lt;p&gt;This content is now visible!&lt;/p&gt;}\n          &lt;/div&gt;\n        )}\n      &lt;/Toggle&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre> <p>In this example, the <code>Toggle</code> component encapsulates the state and logic for toggling visibility. It takes a function as a child, and that function receives an object with two properties: <code>isVisible</code> (a boolean indicating whether the content is visible) and <code>toggleVisibility</code> (a function to toggle the visibility).</p> <p>The <code>App</code> component uses the <code>Toggle</code> component, passing a function as its child. Inside the function, it receives the <code>isVisible</code> state and the <code>toggleVisibility</code> function, and it uses these to conditionally render content.</p> <p>This pattern is powerful because it allows you to encapsulate state and behavior within a component while giving the consumer of that component full control over the rendering and customization of the UI based on the component's state.</p>"},{"location":"frontend/react/guides.html","title":"Guides","text":"<p>React Design Patterns and Best Practices page number: 82</p> <p>Props are the way a parent component can pass its data down the tree to every component that needs it (or part of it).</p> <p>When a component passes some props to another component, it is called the Owner, irrespective of the parent-child relation between them.</p>"},{"location":"frontend/react/guides.html#children","title":"Children","text":"<p>There is a special prop that can be passed from the owners to the components defined inside their render method; it is called children.</p> <p>In the React documentation, it is described as <code>opaque</code> because it is a property that does not tell anything about the value it contains.</p>"},{"location":"frontend/react/guides.html#react-hooks-reference","title":"React Hooks Reference","text":"<ul> <li>Learn core Redux \u2014 The easiest way you can imagine</li> <li> <p>Redux Toolkit \u2014 The cheat sheet for Redux development</p> </li> <li> <p>React Hooks cheat sheet: Best practices with examples</p> </li> <li> <p>React Hooks Cheat Sheet</p> </li> <li> <p>React Hooks Cheatsheet \u2014 Most commonly used hooks in ReactJS</p> </li> <li> <p>The React Cheatsheet for 2021 (+ Real-World Examples)</p> </li> </ul>"},{"location":"frontend/react/guides.html#reference","title":"Reference","text":"<p>LinkedIn React Post</p>"},{"location":"frontend/react/intro.html","title":"Introduction","text":""},{"location":"frontend/react/intro.html#programming-paradigm","title":"Programming Paradigm","text":"<ul> <li>imperative (how to do)</li> <li>declarative (what to do)</li> </ul>"},{"location":"frontend/react/intro.html#react-is-declarative","title":"React is declarative","text":"<p>In declarative programming, you concentrate on the \"<code>what</code>\". Not the \"<code>how</code>\". For instance, the following snippet tells your app to serve certain pages at the given route-paths.</p> <p>Libraries:</p> <ul> <li>React</li> <li>React-Router</li> <li>React-Apollo (GraphQL)</li> <li>Styled-Components</li> <li>Express</li> <li>Infrastructure-Components</li> </ul> <p>Notes</p> <ul> <li> <p><code>React.js</code> removed the boundaries between HTML and JavaScript. It uses the Javascript   Syntax Extension (JSX) that complements basic Javascript source code with HTML.</p> </li> <li> <p><code>Styled-Components</code> added a convenient way of styling your React-components. There\u2019s no   need for global style sheets anymore.</p> </li> <li> <p>With <code>Infrastructure-Components</code>, you can integrate REST-services into your React app. As   well as database schemes and queries. You can even configure your serverless infrastructure.</p> </li> </ul> <p>life is an experiment. The more experiments you make the better. - Ralph Waldo Emerson</p>"},{"location":"frontend/react/intro.html#reference","title":"Reference","text":"<ul> <li> <p>React-Architect by Dr.Frank Zickert</p> </li> <li> <p>What is Programming Paradigm?</p> </li> </ul>"},{"location":"frontend/react/migrating-cra-vite.html","title":"Migrating Cra to vite","text":""},{"location":"frontend/react/migrating-cra-vite.html#migrating-create-react-app-to-vite","title":"Migrating create-react-app to Vite","text":"<pre><code>for x in src/**/*.js; do mv \"$x\" \"${x%.js}.jsx\"; done\n</code></pre>"},{"location":"frontend/react/migrating-cra-vite.html#heres-a-modified-version","title":"Here's a modified version","text":"<p>You can use the find command along with exec to achieve this more efficiently.</p> bash<pre><code>find src -type f -name '*.js' -exec sh -c 'mv \"$1\" \"${1%.js}.jsx\"' _ {} \\;\n</code></pre> <p>Explanation of the command:</p> <ul> <li> <p><code>find src -type f -name '*.js'</code>:</p> <p>This part finds all files (<code>-type f</code>) with a .js extension in the <code>src</code> directory.</p> </li> <li> <p><code>-exec sh -c 'mv \"$1\" \"${1%.js}.jsx\"' _ {} \\;</code>:</p> <p>For each file found, it executes the given shell command to rename the file. The <code>{}</code> is a placeholder for the file name, and the <code>_</code> is a placeholder for <code>$0</code> in the shell command.</p> <p>So, when you run this command, it will find all <code>.js</code> files in the src directory and rename them to <code>.jsx</code>. Make sure to run this command from the parent directory containing the src directory.</p> </li> </ul>"},{"location":"frontend/react/migrating-cra-vite.html#editor-in-react","title":"Editor in React","text":"<ul> <li>TinyMCE React</li> <li>ckeditor5-react</li> </ul>"},{"location":"frontend/react/migrating-cra-vite.html#outdated-library","title":"Outdated Library","text":"<ul> <li>react-kanban: archived</li> </ul>"},{"location":"frontend/react/migrating-cra-vite.html#reference","title":"Reference","text":"<ul> <li>Upgrade React: w3schools</li> <li>create-react-app to vite: youtube</li> <li>Bash Scripting to changes all file name</li> </ul>"},{"location":"frontend/react/react-context-api.html","title":"react context api","text":""},{"location":"frontend/react/react-context-api.html#react-context-api","title":"React Context API","text":"<pre><code># Context API Folder Structure\n\nsrc/\n|-- components/\n|-- context/\n|   |-- MyContext.js\n|   |-- MyContextProvider.js\n|-- pages/\n|-- App.js\n|-- index.js\n</code></pre> <p>The React Context API allows you to share state or behavior across your React components without having to pass props manually through each level of the component tree. Here's a simple guide on how to use the React Context API:</p>"},{"location":"frontend/react/react-context-api.html#step-1-create-a-context","title":"Step 1: Create a Context","text":"<p>You can create a new context using the <code>createContext</code> function from React.</p> MyContext.js<pre><code>import { createContext } from \"react\";\n\nconst MyContext = createContext();\n\nexport default MyContext;\n</code></pre>"},{"location":"frontend/react/react-context-api.html#step-2-create-a-provider-component","title":"Step 2: Create a Provider Component","text":"<p>Create a provider component that will wrap the part of your component tree where you want to make the context available. This provider component will be responsible for managing the state that you want to share.</p> MyContextProvider.js<pre><code>import React, { useState } from \"react\";\nimport MyContext from \"./MyContext\";\n\nconst MyContextProvider = ({ children }) =&gt; {\n  const [myState, setMyState] = useState(\"Initial value\");\n\n  const updateState = (newValue) =&gt; {\n    setMyState(newValue);\n  };\n\n  return (\n    &lt;MyContext.Provider value={{ myState, updateState }}&gt;\n      {children}\n    &lt;/MyContext.Provider&gt;\n  );\n};\n\nexport default MyContextProvider;\n</code></pre>"},{"location":"frontend/react/react-context-api.html#step-3-wrap-your-app-with-the-provider","title":"Step 3: Wrap Your App with the Provider","text":"<p>Wrap your main App component (or any parent component) with the provider component you created. This will make the context and its state available to all the components within that part of the component tree.</p> App.js<pre><code>import React from \"react\";\nimport MyContextProvider from \"./MyContextProvider\";\nimport MyComponent from \"./MyComponent\";\n\nconst App = () =&gt; {\n  return (\n    &lt;MyContextProvider&gt;\n      &lt;MyComponent /&gt;\n    &lt;/MyContextProvider&gt;\n  );\n};\n\nexport default App;\n</code></pre>"},{"location":"frontend/react/react-context-api.html#step-4-consume-the-context-in-a-component","title":"Step 4: Consume the Context in a Component","text":"<p>Now, any component within the wrapped part of the tree can consume the context using the useContext hook.</p> MyComponent.js<pre><code>import React, { useContext } from \"react\";\nimport MyContext from \"./MyContext\";\n\nconst MyComponent = () =&gt; {\n  const { myState, updateState } = useContext(MyContext);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Value from context: {myState}&lt;/p&gt;\n      &lt;button onClick={() =&gt; updateState(\"New value\")}&gt;Update Context&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default MyComponent;\n</code></pre> <p>Notes</p> <p>The key idea is that the state or functions you provide through the context provider become accessible to all the components that consume that context within the wrapped part of the component tree.</p>"},{"location":"frontend/react/react-context-api.html#reference","title":"Reference","text":"<ul> <li>How to Use the React Context API in Your Projects: good</li> <li>React Context API: What is it and How it works?</li> </ul>"},{"location":"frontend/react/react-router.html","title":"react router","text":""},{"location":"frontend/react/react-router.html#router","title":"Router","text":"<pre><code>// Installation\n\n$ pnpm install react-router-dom\n</code></pre>"},{"location":"frontend/react/react-router.html#how-to-install-react-router","title":"How to Install React Router?","text":"<p>React router contains 3 different packages for routing.</p> <ul> <li><code>react-router</code>: contains most of the core functionality of React Router including the route matching algorithm and most of the core components and react hooks</li> <li><code>react-router-native</code>: It is designed for mobile applications.</li> <li><code>react-router-dom</code>: It is designed for web applications.</li> </ul>"},{"location":"frontend/react/react-router.html#components-in-react-router","title":"Components in React Router","text":"<p>React router components are divided into 3 main categories -</p> <ul> <li><code>Routers</code> - for instance, <code>&lt;BrowserRouter&gt;</code> and <code>&lt;HashRouter&gt;</code> components</li> <li><code>Route matchers</code> - for instance, <code>&lt;Routes&gt;</code> and <code>&lt;Route&gt;</code> components</li> <li><code>Navigation</code> \u2013 for instance, <code>&lt;Link&gt;</code> and <code>&lt;NavLink&gt;</code> components</li> </ul> <p></p>"},{"location":"frontend/react/react-router.html#code","title":"Code","text":"<pre><code>import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    &lt;Router&gt;\n      &lt;Navbar /&gt;\n      &lt;Switch&gt;\n        &lt;Route exact path=\"/\" component={Home} /&gt;\n        &lt;Route path=\"/about\" component={About} /&gt;\n      &lt;/Switch&gt;\n    &lt;/Router&gt;\n  );\n}\n</code></pre>"},{"location":"frontend/react/react-router.html#redirect-component","title":"Redirect Component","text":"<pre><code>import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    &lt;Router&gt;\n      &lt;Switch&gt;\n        &lt;Route exact path=\"/\" component={Home} /&gt;\n        &lt;PrivateRoute path=\"/hidden\" component={Hidden} /&gt;\n      &lt;/Switch&gt;\n    &lt;/Router&gt;\n  );\n}\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n  // useAuth is some custom hook to get the current user's auth state\n  const isAuth = useAuth();\n\n  return (\n    &lt;Route\n      {...rest}\n      render={(props) =&gt;\n        isAuth ? &lt;Component {...props} /&gt; : &lt;Redirect to=\"/\" /&gt;\n      }\n    /&gt;\n  );\n}\n\nfunction Home() {\n  return &lt;&gt;home&lt;/&gt;;\n}\n\nfunction Hidden() {\n  return &lt;&gt;hidden&lt;/&gt;;\n}\n</code></pre> <p>The redirect component is very simple to use, very declarative, and allows us to see the great benefit of React Router DOM being component-based, just like everything in React.</p>"},{"location":"frontend/react/react-router.html#react-router-hooks","title":"React Router Hooks","text":"<ul> <li>useHistory Hook</li> <li>useLocation Hook</li> <li>useParams Hook + Dynamic Routes</li> <li>useRouteMatch Hook</li> </ul> <pre><code>import { useHistory } from \"react-router-dom\";\n\n\nfunction About() {\n  const history = useHistory();\n\n  console.log(history.location.pathname); // '/about'\n\n  return (\n    &lt;&gt;\n     &lt;h1&gt;The about page is on: {history.location.pathname}&lt;/h1&gt;\n     &lt;button onClick={() =&gt; history.push('/')}&gt;Go to home page&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"frontend/react/react-router.html#upgrading-fro-v5-to-v6","title":"Upgrading fro <code>v5</code> to <code>v6</code>","text":"<ul> <li>Upgrade all <code>&lt;Switch&gt;</code> elements to <code>&lt;Routes&gt;</code></li> <li>Use <code>useNavigate</code> instead of <code>useHistory</code></li> <li>Replace <code>useRouteMatch</code> with <code>useMatch</code></li> </ul> <p>Replacing Switch component with Routes</p> <pre><code>// old with Switch\n\nexport function App() {\n  return (\n    &lt;div&gt;\n      &lt;Switch&gt;\n        &lt;Route path=\"/about\"&gt;\n          &lt;AboutPage /&gt;\n        &lt;/Route&gt;\n        &lt;Route exact path=\"/profile\"&gt;\n          &lt;ProfilePage /&gt;\n        &lt;/Route&gt;\n        &lt;Route path=\"/profile/:id\"&gt;\n          &lt;ProfileUserPage /&gt;\n        &lt;/Route&gt;\n      &lt;/Switch&gt;\n    &lt;/div&gt;\n  )\n}\n\n// new with Routes\n\nexport function App() {\n  return (\n    &lt;div&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/about\" element={&lt;AboutPage /&gt;} /&gt;\n        &lt;Route exact path=\"/profile\" element={&lt;ProfilePage /&gt;} /&gt;\n        &lt;Route path=\"/profile/:id\" element={&lt;ProfileUserPage /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre> <p>Internal changes &amp; path evaluation (no more needed exact prop) For V5 we needed to put the exact prop on the component to go for that specific route we want</p> <pre><code>// old\n\nexport function App() {\n  return (\n    &lt;div&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/about\" element={&lt;AboutPage /&gt;} /&gt;\n        &lt;Route exact path=\"/profile\" element={&lt;ProfilePage /&gt;} /&gt;\n        &lt;Route path=\"/profile/:id\" element={&lt;ProfileUserPage /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/div&gt;\n  )\n}\n\n// new\nexport function App() {\n  return (\n    &lt;div&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/about\" element={&lt;AboutPage /&gt;} /&gt;\n        &lt;Route path=\"/profile\" element={&lt;ProfilePage /&gt;} /&gt;\n        &lt;Route path=\"/profile/:id\" element={&lt;ProfileUserPage /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"frontend/react/react-router.html#history","title":"History","text":"<pre><code>$ npm i history\n</code></pre> <p>There are three types of history</p> <ul> <li>browser</li> <li>hash</li> <li>memory</li> </ul> <pre><code>import {\n  createBrowserHistory,\n  createHashHistory,\n  createMemoryHistory\n} from 'history'\n</code></pre> <p>If you are using React Router, it can automatically create history objects for you, so you may never have to actually interact with history directly. Still, it is important to understand the differences between each type of history so that you can determine which one is right for your project.</p>"},{"location":"frontend/react/react-router.html#reference","title":"Reference","text":"<ul> <li>React router overview</li> <li>React Router - Types, Mechanism, Installation And Examples</li> <li>The React Router Cheatsheet \u2013 Everything You Need to Know - (BEST)</li> <li>Using Hashrouter With React - Definitive Guide</li> <li>What is Hash Routing?</li> <li>upgrading v5 - v6: oficial doc</li> <li>React router V6: Some of the new changes </li> <li>A little bit of history - npm</li> <li>history - npm</li> </ul>"},{"location":"frontend/react/useCallback.html","title":"useCallback","text":""},{"location":"frontend/react/useCallback.html#usecallback-hook","title":"useCallback Hook","text":"<p><code>useCallback</code> is a React hook that is used to memoize functions so that they do not get recreated on each render, which can be useful to optimize performance in certain scenarios. Here's a simple real example to illustrate the use of <code>useCallback</code>.</p> <p></p> <pre><code>import React, { useState, useCallback } from \"react\";\n\nconst ExampleComponent = () =&gt; {\n  const [count, setCount] = useState(0);\n\n  // Without useCallback\n  const handleClickWithoutCallback = () =&gt; {\n    console.log(\"Button clicked!\");\n    setCount(count + 1);\n  };\n\n  // With useCallback\n  const handleClickWithCallback = useCallback(() =&gt; {\n    console.log(\"Button clicked!\");\n    setCount(count + 1);\n  }, [count]);\n  // Dependency array: specify dependencies that should trigger function re-creation\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n\n      &lt;button onClick={handleClickWithoutCallback}&gt;\n        Click Without useCallback\n      &lt;/button&gt;\n\n      &lt;button onClick={handleClickWithCallback}&gt;Click With useCallback&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ExampleComponent;\n</code></pre> <p>In this example:</p> <ul> <li>The component renders a count state variable.</li> <li>There are two buttons: one <code>without useCallback</code> and one <code>with useCallback</code>.</li> <li>The <code>handleClickWithoutCallback</code> function is created inside the component body, so it is recreated on every render. This can lead to unnecessary re-renders of child components if passed down as props.</li> <li>The <code>handleClickWithCallback</code> function is memoized using useCallback, and the dependency array <code>[count]</code> specifies that the function should be recreated only when the <code>count</code> variable changes. This can be useful to prevent unnecessary function recreation and optimize performance.</li> </ul> <p>In this simple example, the difference might not be significant, but in larger applications, especially when passing functions down to child components, using <code>useCallback</code> can help optimize performance by avoiding unnecessary re-renders triggered by new function instances.</p> <p>Scenario: When to use useCallback &amp; when not to use</p> <p>Here are some scenarios where using useCallback in React can be beneficial, and situations where it may not be necessary:</p> <p>Use useCallback:</p> <ol> <li> <p>Optimizing Child Components:</p> <ul> <li>When passing callback functions as props to child components.</li> <li>It prevents unnecessary re-renders of child components if the callback function reference changes.</li> </ul> <pre><code>const ParentComponent = () =&gt; {\n  const handleClick = useCallback(() =&gt; {\n    console.log(\"Button clicked!\");\n  }, []);\n\n  return &lt;ChildComponent onClick={handleClick} /&gt;;\n};\n</code></pre> </li> <li> <p>Event Handlers in Dependencies:</p> <ul> <li>When using callback functions in the dependency array of <code>useEffect</code> to avoid unnecessary re-execution of the effect.   <pre><code>useEffect(() =&gt; {\n  // Effect logic\n}, [callbackFunction]);\n</code></pre></li> </ul> </li> <li> <p>Preventing Unnecessary Function Recreation:</p> <ul> <li>When you want to avoid recreating functions on each render, especially if those functions are passed as dependencies to other hooks or functions.   <pre><code>const memoizedFunction = useCallback(() =&gt; {\n  // Function logic\n}, [dependency1, dependency2]);\n</code></pre></li> </ul> </li> </ol> <p>Might Not Need useCallback:</p> <ol> <li> <p>Local Functions:</p> <ul> <li>If a function is defined inside a component and doesn't need to be referenced outside that component or passed down to child components, it may not need <code>useCallback</code></li> </ul> <pre><code>const MyComponent = () =&gt; {\n  const localFunction = () =&gt; {\n    // Local function logic\n  };\n\n  // No need for useCallback if localFunction is not passed as a prop or used in dependencies.\n  // ...\n};\n</code></pre> </li> <li> <p>Static Dependencies:</p> <ul> <li>If the function doesn't depend on any external variables or props, and its behavior is consistent across renders, <code>useCallback</code> might not be necessary.</li> </ul> <pre><code>const simpleFunction = () =&gt; {\n  // Function logic without dependencies\n};\n\n// No need for useCallback if simpleFunction doesn't depend on external variables.\n</code></pre> </li> <li> <p>Performance Impact is Negligible:</p> <ul> <li>In some cases, the performance impact of not using useCallback might be negligible, especially for smaller components or when function recreation does not affect the overall performance.</li> </ul> </li> </ol> <p>It's important to use <code>useCallback</code> judiciously and consider the specific use case and performance requirements of your application. If in doubt, you can start without <code>useCallback</code> and optimize later if performance becomes an issue.</p>"},{"location":"frontend/react/useCallback.html#reference","title":"Reference","text":"<ul> <li>Your Guide to React.useCallback()</li> <li>Demystifying React Hooks: useCallback and useMemo </li> </ul>"},{"location":"frontend/react/useEffect-cleanup.html","title":"useEffect cleanup","text":"<p>A cleanup function in React is typically used to perform necessary cleanup or resource disposal when a component unmounts. Here are some scenarios in which you should consider writing a cleanup function using the <code>useEffect</code> hook:</p>"},{"location":"frontend/react/useEffect-cleanup.html#1-clearing-subscriptions-or-timers","title":"1. Clearing Subscriptions or Timers:","text":"<p>If your component sets up subscriptions (e.g., using <code>addEventListener</code>) or timers (e.g., using <code>setTimeout</code> or <code>setInterval</code>), it's crucial to clean them up when the component is unmounted to avoid memory leaks and unexpected behavior.</p> jsx<pre><code>useEffect(() =&gt; {\n  const timerId = setInterval(() =&gt; {\n    // Your logic here\n  }, 1000);\n\n  return () =&gt; {\n    // Cleanup: Clear the timer when the component unmounts\n    clearInterval(timerId);\n  };\n}, []);\n</code></pre>"},{"location":"frontend/react/useEffect-cleanup.html#2-canceling-network-requests","title":"2. Canceling Network Requests:","text":"<p>If your component makes asynchronous requests (e.g., using <code>fetch</code>), you might want to cancel or abort the request if the component is unmounted to prevent setting state on an unmounted component.</p> jsx<pre><code>useEffect(() =&gt; {\n  const abortController = new AbortController();\n\n  const fetchData = async () =&gt; {\n    try {\n      const response = await fetch(\"https://api.example.com/data\", {\n        signal: abortController.signal,\n      });\n      const data = await response.json();\n      setData(data);\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        // Request was canceled (component unmounted)\n      } else {\n        console.error(\"Error fetching data:\", error);\n      }\n    }\n  };\n\n  fetchData();\n\n  return () =&gt; {\n    // Cleanup: Cancel the request if the component unmounts\n    abortController.abort();\n  };\n}, []);\n</code></pre>"},{"location":"frontend/react/useEffect-cleanup.html#3-cleaning-up-external-resources","title":"3. Cleaning Up External Resources:","text":"<p>If your component interacts with external resources or libraries (e.g., closing a WebSocket connection, cleaning up a third-party library instance), the cleanup function is the right place to perform these actions.</p> jsx<pre><code>useEffect(() =&gt; {\n  const socket = new WebSocket(\"wss://example.com\");\n\n  socket.addEventListener(\"open\", () =&gt; {\n    // Your logic here\n  });\n\n  return () =&gt; {\n    // Cleanup: Close the WebSocket connection when the component unmounts\n    socket.close();\n  };\n}, []);\n</code></pre>"},{"location":"frontend/react/useEffect-cleanup.html#4-resetting-state-or-side-effects","title":"4. Resetting State or Side Effects:","text":"<p>If your component needs to reset certain state variables or undo side effects when it unmounts, the cleanup function can be used for such purposes.</p> jsx<pre><code>useEffect(() =&gt; {\n  // Your effect logic here\n\n  return () =&gt; {\n    // Cleanup: Reset state or undo side effects when the component unmounts\n    resetState();\n  };\n}, [dependency]);\n</code></pre> <p>Remember that the cleanup function is an essential part of the useEffect lifecycle. It ensures that resources are properly released, preventing potential memory leaks or unintended behavior when a component is no longer in use. Always use the cleanup function to perform any necessary cleanup actions specific to the effects you've set up in your component.</p>"},{"location":"frontend/react/useEffect-technique-used.html","title":"useEffect mostly used","text":"<p>The choice of <code>useEffect</code> technique often depends on the specific requirements of your application. However, one commonly used and versatile pattern is using <code>useEffect</code> for data fetching. This is especially relevant in applications that interact with APIs or external data sources. The pattern typically involves:</p> <ol> <li>Fetching data when the component mounts.</li> <li>Optionally fetching data based on changes in certain dependencies.</li> </ol> <p>Here's a breakdown of this pattern:</p>"},{"location":"frontend/react/useEffect-technique-used.html#1-fetching-data-on-mount","title":"1. Fetching Data on Mount:","text":"<p>Use <code>useEffect</code> with an empty dependency array to fetch data when the component mounts. This ensures that the effect runs only once after the initial render.</p> jsx<pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    try {\n      const response = await fetch(\"https://api.example.com/data\");\n      const data = await response.json();\n      setData(data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  fetchData();\n}, []); // Empty dependency array means this effect runs once on mount\n</code></pre>"},{"location":"frontend/react/useEffect-technique-used.html#2-fetching-data-based-on-dependencies","title":"2. Fetching Data Based on Dependencies:","text":"<p>Use <code>useEffect</code> with specific dependencies to refetch data when those dependencies change. This is useful for scenarios where you need to update data in response to user interactions or changes in the application state.</p> jsx<pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    try {\n      const response = await fetch(`https://api.example.com/data/${userId}`);\n      const data = await response.json();\n      setData(data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  fetchData();\n}, [userId]); // Refetch data when 'userId' changes\n</code></pre>"},{"location":"frontend/react/useEffect-technique-used.html#3-cleanup-and-cancellation","title":"3. Cleanup and Cancellation:","text":"<p>Consider incorporating cleanup functions to handle scenarios like canceling pending requests or unsubscribing from external subscriptions when the component unmounts.</p> jsx<pre><code>useEffect(() =&gt; {\n  const abortController = new AbortController();\n\n  const fetchData = async () =&gt; {\n    try {\n      const response = await fetch(\"https://api.example.com/data\", {\n        signal: abortController.signal,\n      });\n      const data = await response.json();\n      setData(data);\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        // Request was canceled (component unmounted)\n      } else {\n        console.error(\"Error fetching data:\", error);\n      }\n    }\n  };\n\n  fetchData();\n\n  return () =&gt; {\n    // Cleanup: Cancel the request if the component unmounts\n    abortController.abort();\n  };\n}, []);\n</code></pre>"},{"location":"frontend/react/useEffect-technique-used.html#4-combining-multiple-useeffect-hooks","title":"4. Combining Multiple useEffect Hooks:","text":"<p>Break down complex logic into multiple <code>useEffect</code> hooks for better readability and maintainability. For example, separate data fetching from UI-related side effects.</p> jsx<pre><code>useEffect(() =&gt; {\n  // Fetch initial data\n  const fetchData = async () =&gt; {\n    // ...\n  };\n  fetchData();\n}, []);\n\nuseEffect(() =&gt; {\n  // Handle UI-related side effects\n  // ...\n}, [data, userId]);\n</code></pre>"},{"location":"frontend/react/useEffect-technique-used.html#5-asyncawait-pattern","title":"5. Async/Await Pattern:","text":"<p>Use the <code>async</code> keyword and <code>await</code> syntax for cleaner asynchronous code within the <code>useEffect</code>.</p> jsx<pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    try {\n      const response = await fetch(\"https://api.example.com/data\");\n      const data = await response.json();\n      setData(data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  fetchData();\n}, []);\n</code></pre> <p>This data-fetching pattern is commonly used because it covers a wide range of scenarios, from initial data loading to updating data based on changes in specific dependencies. It provides a clean and organized way to manage asynchronous operations in React components.</p>"},{"location":"frontend/react/useEffect-technique.html","title":"useEffect Technique","text":""},{"location":"frontend/react/useEffect-technique.html#_1","title":"useEffect Technique","text":"<p>The <code>useEffect</code> hook in React is used for handling side effects in functional components. It is a powerful tool that allows you to perform operations such as data fetching, subscriptions, or manually changing the DOM in response to component lifecycle events. Here are some advanced techniques and use cases for the <code>useEffect</code> hook:</p>"},{"location":"frontend/react/useEffect-technique.html#1-conditional-execution","title":"1. Conditional Execution:","text":"<p>Use <code>useEffect</code> with dependencies to conditionally execute code when certain dependencies change. This is useful for optimizing performance and avoiding unnecessary computations.</p> jsx<pre><code>useEffect(() =&gt; {\n  // Effect will run when 'dependency' changes\n  fetchData(dependency);\n}, [dependency]);\n</code></pre>"},{"location":"frontend/react/useEffect-technique.html#2-cleanup-function","title":"2. Cleanup Function:","text":"<p>Use the cleanup function returned by <code>useEffect</code> for cleanup operations, such as canceling subscriptions or clearing intervals.</p> jsx<pre><code>useEffect(() =&gt; {\n  const subscription = subscribe();\n  return () =&gt; {\n    // Cleanup function: unsubscribe when the component unmounts\n    subscription.unsubscribe();\n  };\n}, []); // Empty dependency array means this effect runs once on mount\n</code></pre>"},{"location":"frontend/react/useEffect-technique.html#3-debouncing-and-throttling","title":"3. Debouncing and Throttling:","text":"<p>Use <code>useEffect</code> in combination with debouncing or throttling techniques to limit the rate at which a function is called.</p> jsx<pre><code>useEffect(() =&gt; {\n  const debouncedFunction = debounce(() =&gt; {\n    // Code to run after debounce\n  }, 300);\n\n  // Attach the debounced function to an event listener, for example\n  window.addEventListener(\"scroll\", debouncedFunction);\n\n  return () =&gt; {\n    // Cleanup: remove the event listener when the component unmounts\n    window.removeEventListener(\"scroll\", debouncedFunction);\n  };\n}, []);\n</code></pre>"},{"location":"frontend/react/useEffect-technique.html#4-global-state-synchronization","title":"4. Global State Synchronization:","text":"<p>Use <code>useEffect</code> to synchronize the component's state with a global state management solution, like Redux.</p> jsx<pre><code>useEffect(() =&gt; {\n  // Update local state when global state changes\n  setLocalState(globalState);\n}, [globalState]);\n</code></pre>"},{"location":"frontend/react/useEffect-technique.html#5-dependency-arrays-and-stale-closures","title":"5. Dependency Arrays and Stale Closures:","text":"<p>Be careful with dependencies and closures to avoid stale values. Use the functional form of <code>setState</code> to capture the latest state or props.</p> jsx<pre><code>useEffect(() =&gt; {\n  // Avoid stale closures\n  const fetchData = async () =&gt; {\n    const result = await fetch(url);\n    // Use result and capture the latest 'mounted' value\n    if (mounted.current) {\n      setData(result);\n    }\n  };\n\n  fetchData();\n\n  return () =&gt; {\n    // Cleanup: Set 'mounted' to false when the component unmounts\n    mounted.current = false;\n  };\n}, [url]);\n</code></pre>"},{"location":"frontend/react/useEffect-technique.html#6-multiple-useeffect-for-separation-of-concerns","title":"6. Multiple useEffect for Separation of Concerns:","text":"<p>Use multiple <code>useEffect</code> blocks to separate different concerns, making your code more readable and maintainable.</p> jsx<pre><code>useEffect(() =&gt; {\n  // Code for fetching data\n  fetchData();\n}, [dependencyForDataFetching]);\n\nuseEffect(() =&gt; {\n  // Code for handling UI updates\n  updateUI();\n}, [dependencyForUIUpdate]);\n</code></pre>"},{"location":"frontend/react/useEffect-technique.html#7-promise-in-useeffect","title":"7. Promise in useEffect:","text":"<p>If you want to work with asynchronous code in <code>useEffect</code>, you can use the async keyword and await syntax.</p> jsx<pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    try {\n      const result = await fetchDataFromAPI();\n      setData(result);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  fetchData();\n}, [dependency]);\n</code></pre>"},{"location":"frontend/react/useEffect-technique.html#8-combining-useeffect-with-other-hooks","title":"8. Combining useEffect with Other Hooks:","text":"<p>Combine useEffect with other hooks like useMemo or useCallback for more fine-grained control over the memoization of values and functions.</p> jsx<pre><code>const memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]);\n\nuseEffect(() =&gt; {\n  // Effect using memoizedValue\n  performEffectWithMemoizedValue(memoizedValue);\n}, [memoizedValue]);\n</code></pre> <p>Notes</p> <p>By mastering these advanced techniques, you can make the most of the useEffect hook in your React applications and handle complex scenarios with ease. Always consider the specific requirements of your application and choose the approach that best fits your use case.</p>"},{"location":"frontend/react/useRef.html","title":"useRef","text":""},{"location":"frontend/react/useRef.html#useref-hooks","title":"useRef hooks","text":"<p><code>useRef</code> is a React hook that provides a way to create a mutable object that persists across renders. It's commonly used to access and interact with a DOM element or to persist values across renders without causing re-renders.</p> <p>Here's a beginner's guide on how to use useRef in React:</p>"},{"location":"frontend/react/useRef.html#basic-usage","title":"Basic Usage:","text":"<ol> <li> <p>Import <code>useRef</code>:</p> <p>Import the useRef hook from React.</p> <pre><code>import React, { useRef } from \"react\";\n</code></pre> </li> <li> <p>Create a Ref:</p> <p>Use useRef() to create a ref object.</p> <pre><code>const myRef = useRef();\n</code></pre> </li> <li> <p>Attach Ref to a JSX Element:</p> <p>Attach the ref to a JSX element using the <code>ref</code> attribute.</p> <pre><code>return &lt;div ref={myRef}&gt;Hello, useRef!&lt;/div&gt;;\n</code></pre> </li> <li> <p>Accessing the DOM Element:</p> <p>Use the <code>.current</code> property of the ref object to access the DOM element.</p> <pre><code>console.log(myRef.current); // Outputs the DOM element\n</code></pre> </li> </ol>"},{"location":"frontend/react/useRef.html#example-with-a-functional-component","title":"Example with a Functional Component:","text":"<pre><code>import React, { useRef, useEffect } from \"react\";\n\nconst MyComponent = () =&gt; {\n  const myRef = useRef();\n\n  useEffect(() =&gt; {\n    // Access the DOM element after the component is mounted\n    console.log(myRef.current);\n  }, []); // Empty dependency array ensures the effect runs only once after mount\n\n  return &lt;div ref={myRef}&gt;Hello, useRef!&lt;/div&gt;;\n};\n\nexport default MyComponent;\n</code></pre>"},{"location":"frontend/react/useRef.html#use-cases-and-when-to-use-useref","title":"Use Cases and When to Use useRef:","text":"<ol> <li> <p>Accessing or Modifying DOM Elements:</p> <ul> <li>Use <code>useRef</code> when you need to access or modify a DOM element directly. For example, focusing an input field, measuring an element, or triggering imperative animations.</li> </ul> <pre><code>const inputRef = useRef();\n\nuseEffect(() =&gt; {\n  inputRef.current.focus();\n}, []);\n</code></pre> </li> <li> <p>Holding Mutable Values Without Causing Rerenders:</p> <ul> <li><code>useRef</code> can hold mutable values that persist across renders without causing re-renders. This is useful for storing values that shouldn't trigger component updates.</li> </ul> <pre><code>const countRef = useRef(0);\n\nuseEffect(() =&gt; {\n  countRef.current += 1;\n  console.log(\"Render count:\", countRef.current);\n});\n</code></pre> </li> <li> <p>Storing Previous Values:</p> <ul> <li>Use <code>useRef</code> to store and compare previous values, useful for certain scenarios like tracking changes in dependencies.</li> </ul> <pre><code>const prevValueRef = useRef();\nuseEffect(() =&gt; {\n  if (value !== prevValueRef.current) {\n    console.log(\"Value changed!\");\n  }\n  prevValueRef.current = value;\n}, [value]);\n</code></pre> <p>Remember that the ref value persists between renders, so changes to <code>.current</code> do not trigger a re-render. This makes <code>useRef</code> suitable for scenarios where you need to hold mutable values across renders without causing unnecessary updates.</p> </li> </ol>"},{"location":"frontend/typescript/typescript-compiler.html","title":"compiler","text":""},{"location":"frontend/typescript/typescript-compiler.html#typescript-compiler","title":"TypeScript Compiler","text":"<p>TypeScript is transpiled into JavaScript using a compiler.</p> <p>TypeScript being converted into JavaScript means it runs anywhere that JavaScript runs!</p>"},{"location":"frontend/typescript/typescript-compiler.html#installing-the-compiler","title":"Installing the Compiler","text":"<p>TypeScript has an official compiler which can be installed through npm.</p> <p>Within your npm project, run the following command to install the compiler:</p> <p>npm install typescript --save-dev</p> <p>You can then run the TypeScript compiler using one of the following commands:</p> <p>npx tsc</p> <p>yarn tsc</p> <p>pnpm tsc</p>"},{"location":"frontend/typescript/typescript-compiler.html#globally-installing-typescript","title":"Globally Installing TypeScript","text":"<p>npm install -g typescript</p>"},{"location":"frontend/typescript/typescript-compiler.html#configuring-the-compiler","title":"Configuring the compiler","text":"<p>You can have TypeScript create <code>tsconfig.json</code> with the recommended settings with:</p> <p>npx tsc --init</p> <p>Here is an example of more things you could add to the <code>tsconfig.json</code> file:</p> <pre><code>{\n  \"include\": [\"src\"],\n  \"compilerOptions\": {\n    \"outDir\": \"./build\"\n  }\n}\n</code></pre>"},{"location":"frontend/typescript/typescript-compiler.html#working-with-typescript-compatible-transpilers","title":"Working with TypeScript-compatible transpilers","text":"<p>There are other tools which convert TypeScript files to JavaScript files</p> <ol> <li>Babel: Babel is a very popular JavaScript transpiler which supports TypeScript files via the plugin @babel/plugin-transform-typescript.</li> <li>swc: swc is a fast transpiler created in Rust which supports many of Babel's features including TypeScript.</li> <li>Sucrase: Sucrase is a Babel fork focused on speed for using in development mode. Sucrase supports TypeScript natively.</li> </ol>"},{"location":"frontend/typescript/typescript-compiler.html#reference","title":"Reference","text":"<ul> <li>TypeScript Compiler :w3chools.com</li> </ul>"},{"location":"frontend/typescript/typescript-installation.html","title":"installation","text":""},{"location":"frontend/typescript/typescript-installation.html#typescript","title":"Typescript","text":""},{"location":"frontend/typescript/typescript-installation.html#what-is-typescript","title":"What is TypeScript?","text":"<p>TypeScript is JavaScript with added syntax for types.</p> <p>TypeScript is a syntactic superset of JavaScript which adds static typing.</p> <p>This basically means that TypeScript adds syntax on top of JavaScript, allowing developers to add types.</p> <p>TypeScript being a \"Syntactic Superset\" means that it shares the same base syntax as JavaScript, but adds something to it.</p>"},{"location":"frontend/typescript/typescript-installation.html#how-do-i-use-typescript","title":"How do I use TypeScript?","text":"<p>A common way to use TypeScript is to use the official TypeScript compiler, which transpiles TypeScript code into JavaScript.</p> <p>The next section shows how to get the compiler setup for a local project.</p> <p>Some popular code editors, such as Visual Studio Code, have built-in TypeScript support and can show errors as you write code!</p> <p>TypeScript uses compile time type checking. Which means it checks if the specified types match before running the code, not while running the code.</p> <p>TypeScript allows developers to add types to JavaScript.</p>"},{"location":"frontend/typescript/typescript-installation.html#reference","title":"Reference","text":"<ul> <li>TypeScript Tutorial: w3schools.com</li> </ul>"},{"location":"interviewquestion/django.html","title":"DJANO Interview Question","text":""},{"location":"interviewquestion/javascript.html","title":"JavaScript","text":"<p>Core Begineer</p>"},{"location":"interviewquestion/javascript.html#1-difference-between-defer-and-async-attributes-in-javascript","title":"1. Difference between <code>defer</code> and <code>async</code> attributes in JavaScript?","text":"<p>The main difference between defer and async is the order of execution.</p> <p>Defer attribute</p> <p>A <code>&lt;script&gt;</code> element with a <code>defer</code> attribute, it will continue to load the HTML page and render it while the script is being downloaded. The script is executed after the HTML page has been completely parsed. <code>defer</code> scripts maintain their order in the document.</p> <pre><code>&lt;script defer src=\"script1.js\"&gt;&lt;/script&gt;\n&lt;script defer src=\"script2.js\"&gt;&lt;/script&gt;\n</code></pre> <p>In the example above, <code>script1.js</code> will be executed before <code>script2.js</code>. The browser will download both scripts in parallel, but <code>script1.js</code> will be executed after the HTML page has been parsed and <code>script2.js</code> will be executed after script1.js has been executed.</p> <p>Async attribute</p> <p>On the other hand, A <code>&lt;script&gt;</code> element with an <code>async</code> attribute, it will pause the HTML parser and execute the script immediately after it has been downloaded. The HTML parsing will resume after the script has been executed.</p> <pre><code>&lt;script async src=\"script1.js\"&gt;&lt;/script&gt;\n&lt;script async src=\"script2.js\"&gt;&lt;/script&gt;\n</code></pre> <p>In the example above, the browser will download both scripts in parallel, and execute them as soon as they are downloaded. The order of execution is not guaranteed.</p> <p>To know more you can check this diagram from us that explains the difference between <code>defer</code> and <code>async</code> in a visual way.</p>"},{"location":"interviewquestion/javascript.html#2-is-it-possible-to-run-javascript-outside-the-browser","title":"2. Is it possible to run JavaScript outside the browser?","text":"<p>Yes, it is possible to run JavaScript outside the browser. There are several ways to run JavaScript outside the browser. You can use Node.js, Deno, Bun, or any other JavaScript runtime environment.</p>"},{"location":"interviewquestion/javascript.html#3-how-to-parse-json-in-javascript","title":"3. How to parse JSON in JavaScript?","text":"<p>In order to parse JSON, you can use the <code>JSON.parse()</code> method. It parses a JSON string and returns the JavaScript equivalent.</p> <pre><code>const json = '{\"name\":\"JavaScript\",\"year\":1995}';\nconst roadmap = JSON.parse(json);\n\nconsole.log(roadmap.name); // JavaScript\nconsole.log(roadmap.year); // 1995\n</code></pre> <p>Core\u00b7Intermediate</p>"},{"location":"interviewquestion/javascript.html#1-what-is-ternary-operator-in-javascript","title":"1. What is ternary operator in JavaScript?","text":"<p>The ternary operator is a conditional operator that takes three operands. It is frequently used as a shortcut for the if statement.</p> <pre><code>console.log(condition ? true : false);\n</code></pre>"},{"location":"interviewquestion/javascript.html#2-does-map-method-mutate-the-original-array","title":"2. Does <code>map()</code> method mutate the original array?","text":"<p>No, the <code>map() method</code> does not mutate the original array. It returns a new array with the results of calling a provided function on every element in the calling array.</p> <pre><code>const roadmaps = ['JavaScript', 'React', 'Node.js'];\n\nconst renamedRoadmaps = roadmaps.map((roadmap) =&gt; {\n  return `${roadmap} Roadmap`;\n});\n\nconsole.log(roadmaps); // ['JavaScript', 'React', 'Node.js']\nconsole.log(renamedRoadmaps); // ['JavaScript Roadmap', 'React Roadmap', 'Node.js Roadmap']\n</code></pre>"},{"location":"interviewquestion/javascript.html#3-what-is-the-difference-between-map-and-foreach-methods","title":"3. What is the difference between <code>map()</code> and <code>forEach()</code> methods?","text":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in the calling array. </p> <p>Whereas, the <code>forEach()</code> method executes a provided function once for each array element.</p>"},{"location":"interviewquestion/javascript.html#4-does-foreach-method-return-a-new-array","title":"4. Does <code>forEach()</code> method return a new array?","text":"<p>No, the <code>forEach()</code> method does not return a new array. It simply calls a provided function on each element in the array.</p> <pre><code>const roadmaps = ['JavaScript', 'React', 'Node.js'];\n\nroadmaps.forEach((roadmap) =&gt; {\n  console.log(roadmap);\n});\n</code></pre>"},{"location":"interviewquestion/javascript.html#5-what-is-the-difference-between-map-and-reduce-methods","title":"5. What is the difference between <code>map()</code> and <code>reduce()</code> methods?","text":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in the calling array. </p> <p>Whereas,  the <code>reduce()</code> method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.</p>"},{"location":"interviewquestion/javascript.html#6-how-to-use-reduce-method","title":"6. How to use <code>reduce()</code> method?","text":"<p>You can use the <code>reduce()</code> method to reduce an array to a single value. The <code>reduce()</code> method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.</p> <p>Syntax</p> <pre><code>array.reduce((accumulator, currentValue) =&gt; {\n  // ...\n}, initialValue);\n</code></pre> <p>Example</p> <p>You can use the <code>reduce()</code> method to sum all the numbers in an array.</p> <pre><code>const numbers = [1, 2, 3, 4, 5, 6];\n\nconst sum = numbers.reduce((accumulator, currentValue) =&gt; {\n  return accumulator + currentValue;\n}, 0);\n\nconsole.log(numbers); // [1, 2, 3, 4, 5, 6]\nconsole.log(sum); // 21\n</code></pre>"},{"location":"interviewquestion/javascript.html#7-can-you-merge-multiple-arrays-in-javascript","title":"7. Can you merge multiple arrays in JavaScript?","text":"<p>Yes, you can merge multiple arrays into one array using the <code>concat()</code> method, or the spread operator <code>....</code></p> <p>concat()</p> <p>The <code>concat()</code> method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.</p> <pre><code>const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\n\nconst arr3 = arr1.concat(arr2);\nconsole.log(arr3); // [1, 2, 3, 4, 5, 6]\n</code></pre> <p>Spread operator</p> <p>The spread operator <code>...</code> is used to expand an iterable object into the list of arguments.</p> <pre><code>const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\n\nconst arr3 = [...arr1, ...arr2];\nconsole.log(arr3); // [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"interviewquestion/javascript.html#8-what-is-the-spread-operator-in-javascript","title":"8. What is the spread operator in JavaScript?","text":"<p>The spread operator in JavaScript is represented by three dots (...). It allows the elements of an array or properties of an object to be expanded or \"spread\" into individual elements or properties. This can be useful in various contexts, such as when passing elements as function arguments, cloning arrays and objects, or merging arrays and objects.</p> <pre><code>const roadmaps = ['JavaScript', 'React', 'Node.js'];\nconst bestPractices = ['AWS', 'API Security'];\n\nconst resources = [...roadmaps, ...bestPractices];\nconsole.log(resources); \n// ['JavaScript', 'React', 'Node.js', 'AWS', 'API Security']\n</code></pre> <pre><code>const roadmap = {\n  name: 'JavaScript',\n  type: 'dynamic',\n};\n\nconst roadmapClone = { ...roadmap }; // shallow copy\nconsole.log(roadmapClone); // { name: 'JavaScript', type: 'dynamic' }\n</code></pre> <p>Core Advanced</p>"},{"location":"interviewquestion/javascript.html#1-garbage-collection-in-javascript","title":"1. Garbage collection in JavaScript?","text":"<p>The JavaScript engine uses automatic garbage collection.  JavaScript automatically manages memory by freeing up space used by objects no longer needed.  This algorithm is called Mark and Sweep, which is performed periodically by the JavaScript engine.</p>"},{"location":"interviewquestion/javascript.html#2-what-are-heap-and-stack-in-javascript","title":"2. What are Heap and Stack in JavaScript?","text":"<p>The Heap and Stack in JavaScript Engine are two different data structures that store data in different ways.</p> <p>Stack</p> <p>The Stack is a small, organized region of memory. It is where primitive values, function calls, and local variables are stored. It follows a \"Last In, First Out\" (LIFO) order, meaning that the last item added to the stack is the first one to be removed. Each function invocation creates a new stack frame, which contains the function's local variables, return address, and other contextual data.</p> <p>Heap</p> <p>The Heap is a large, mostly unstructured region of memory. It is where <code>objects</code>, <code>arrays</code>, and <code>functions</code> are stored. Variables from the Stack (e.g., in functions) point to locations in the Heap for these dynamically allocated structures.</p> <p>When you declare a primitive type (like a number or boolean), it's usually managed in the stack. But when you create an object, array, or function, it's stored in the heap, and the stack will hold a reference to that location in the heap.</p> <p>For example:</p> <pre><code>// Stored on the stack\nconst name = 'JavaScript'; \n\n// `roadmap` reference on the stack, actual object { name: 'JS' } in the heap\nconst roadmap = { name: 'JS' }; \n</code></pre> <p>In the code above, the primitive value <code>JavaScript</code> for variable <code>name</code> is directly stored on the stack. For the object assigned to <code>roadmap</code>, its actual data resides in the heap, and the reference to this data (a memory address pointer) is held on the stack.</p> <p>Function Advanced</p>"},{"location":"interviewquestion/javascript.html#1-what-is-iife-in-javascript","title":"1. What is IIFE in JavaScript?","text":"<p>The IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined.</p> <pre><code>(function () {\n  console.log('Hello Roadmap!');\n})();\n</code></pre> <p>The IIFE is frequently used to create a new scope to avoid variable hoisting from within blocks.</p> <pre><code>(function () {\n  var roadmap = 'JavaScript';\n  console.log(roadmap);\n})();\n\nconsole.log(roadmap); // ReferenceError: name is not defined\n</code></pre> <p>Operator Beginner</p>"},{"location":"interviewquestion/javascript.html#1-what-is-nullish-coalescing-operator","title":"1. What is Nullish Coalescing Operator?","text":"<p>The Nullish Coalescing Operator (<code>??</code>) returns the right operand if the left one is <code>null</code> or <code>undefined</code>, otherwise, it returns the left operand. It's useful for setting default values without considering falsy values like <code>0</code> or <code>''</code> as absent.</p> <pre><code>console.log(null ?? 'hello'); // hello\nconsole.log(undefined ?? 'hello'); // hello\nconsole.log('' ?? 'hello'); // ''\nconsole.log(0 ?? 'hello'); // \n</code></pre> <p>DOM Beginner</p>"},{"location":"interviewquestion/javascript.html#1-how-to-measure-dimensions-of-an-element","title":"1. How to measure dimensions of an Element?","text":"<p>You can use <code>getBoundingClientRect</code> method to get the dimensions of an element.</p> <pre><code>const roadmapWrapper = document.querySelector('.roadmap-wrapper');\nconst dimensions = roadmapWrapper.getBoundingClientRect();\n\nconsole.log(dimensions); \n// DOMRect { x: 8, y: 8, width: 784, height: 784, top: 8, right: 792, bottom: 792, left: 8 }\n</code></pre>"},{"location":"interviewquestion/javascript.html#2-how-to-get-viewport-dimensions-in-javascript","title":"2. How to get viewport dimensions in JavaScript?","text":"<p>You can use <code>window.innerWidth</code> and <code>window.innerHeight</code> to get the viewport dimensions.</p>"},{"location":"interviewquestion/javascript.html#3-how-to-scroll-to-the-top-of-the-page-using-javascript","title":"3. How to scroll to the top of the page using JavaScript?","text":"<p>In order to scroll to the top of the page, we can use the <code>scrollTo</code> method.</p> <pre><code>window.scrollTo(0, 0);\n</code></pre>"},{"location":"interviewquestion/javascript.html#reference","title":"Reference","text":"<ul> <li>roadmap.sh/questions/javascript</li> </ul>"},{"location":"interviewquestion/react.html","title":"React","text":"<p>Core Advanced</p>"},{"location":"interviewquestion/react.html#1-what-is-reconciliation-in-react","title":"1. What is Reconciliation in React ?","text":"<p>Reconciliation is the process through which React updated the DOM by comparing the newly returned elements with the previously rendered ones.</p> <p>React updates the DOM when a component's state changes.</p>"},{"location":"interviewquestion/react.html#2-what-is-react-fiber","title":"2. What is React Fiber ?","text":"<p>React Fiber is the reconciliation engine that replaced the core algorithm in React v16.</p> <p>It is a rewrite of the core algorighm, responsible for scheduling what get rendered on screen.</p> <p>It is a set of algorithms for efficiently updating the UI.</p>"},{"location":"interviewquestion/react.html#3-explain-the-concept-of-error-boundaries-in-react","title":"3. Explain the concept of error boundaries in React.","text":"<p>Error boundaries are special React components that catch JavaScript errors during rendering, in lifecycle methods, and during the constructor of whole tree below them.</p> <p>You can use <code>react-error-boundary</code> package to create error boundaries in your application.</p> <pre><code># Installation\n$ npm i react-error-boundary\n</code></pre> <p>Core Intermediate</p>"},{"location":"interviewquestion/react.html#1-what-is-the-high-order-components-hocs","title":"1. What is the High-Order Components (HOCs)?","text":"<p>A High-Order Components (HOCs) is a function that takes a component and returns a new component.</p> <p>Basically, it's a pattern that is derived from React Compositional nature.</p> <p>High-order components are not part of the React API. They are the pattern that emerges from React Compositional nature.</p>"},{"location":"interviewquestion/react.html#2-how-react-virtual-dom-works","title":"2. How React Virtual DOM works?","text":"<p>Virtual DOM works in this steps:</p> <ul> <li>Whenever any underlying data changes, new virtual DOM representation will be created.</li> <li>Then the difference between the previous DOM representation and the new one is calculated.</li> <li>Once the calculations are done, the real DOM will be updated with only the things that have actually changed.</li> </ul>"},{"location":"interviewquestion/react.html#3-what-is-the-purpose-of-the-useeffect-hook-in-react","title":"3. What is the purpose of the <code>useEffect</code> hook in React?","text":"<p>The useEffect hook in React is used for performing side effects in functional components. Side effects can include data fetching, DOM manipulation, and subscribing to external data sources.</p> <p>Core Beginner</p>"},{"location":"interviewquestion/react.html#1-what-is-the-naming-convention-for-react-components","title":"1. What is the naming convention for React components?","text":"<p>In React, the naming convention for components is to use PascalCase, meaning the first letter of each word in the component's name should be capitalized. </p> <p>For example, <code>UserProfile</code>, <code>SidebarItem</code>, or <code>NavigationMenu</code>. This convention differentiates custom React components from regular HTML tags in JSX, as React treats elements starting with a lowercase letter as DOM tags and those starting with a capital letter as custom components.</p>"},{"location":"interviewquestion/react.html#2-what-is-the-difference-between-class-components-and-function-components","title":"2. What is the difference between class components and function components?","text":"<p>Class components let you define your components with the help of classes. You can extend from <code>React.Component</code> class to create a component. Class components also allow you to define component level lifecycle methods. </p> <p>Functional components are the preferred way to write React components. There are no lifecycle methods similar to class components available in functional components; you can use React hooks instead to manage the component lifecycle.</p>"},{"location":"interviewquestion/react.html#3-can-we-change-the-state-of-the-component-directly","title":"3. Can we change the state of the component directly?","text":"<p>No, we can't change the state of the component directly. State can only be changed by using <code>setState()</code> method. Changing the state variable directly won't re-render the component.</p>"},{"location":"interviewquestion/react.html#4-what-is-the-purpose-of-key-attribute-in-react","title":"4. What is the purpose of <code>key</code> attribute in React?","text":"<p>The string attribute <code>key</code> is a special attribute you need to include when rendering an array of elements. Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity.</p>"},{"location":"interviewquestion/react.html#5-how-to-render-html-in-react","title":"5. How to render HTML in React?","text":"<p>You can use <code>dangerouslySetInnerHTML</code> prop to render HTML in React. It is used to set HTML directly from React. You should be careful while using this property as it can cause XSS attacks.</p>"},{"location":"interviewquestion/react.html#6-how-to-render-a-list-in-react","title":"6. How to render a list in React?","text":"<p>In React, you can render a list by using the JavaScript map function to iterate over an array of items and return a JSX element for each item. It's important to provide a unique key prop to each element in the list for React's diffing algorithm to function efficiently during re-renders. Here's a basic example:</p> <pre><code>const items = ['Apple', 'Banana', 'Cherry'];\n\nfunction FruitList() {\n  return (\n    &lt;ul&gt;\n      {items.map((fruit, index) =&gt; (\n        &lt;li key={index}&gt;{fruit}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre> <p>Note: While using the index as a key can work in some cases, it's generally not recommended for dynamic lists where items can be added, removed, or reordered.</p>"},{"location":"interviewquestion/react.html#7-what-is-the-difference-between-stateful-and-stateless-components","title":"7. What is the difference between stateful and stateless components?","text":"<p>The main difference between stateful and stateless components is one has state and the other doesn't. </p> <p>Stateful components keep track of changes to their state and re-render themselves when the state changes. </p> <p>Stateless components, on the other hand, render whatever is passed to them via <code>props</code> or always render the same thing.</p>"},{"location":"interviewquestion/react.html#8-whats-the-components-lifecycle-in-react","title":"8. What's the component's lifecycle in React?","text":"<p>In React functional components, lifecycle-like behaviors are achieved using hooks:</p> <p>Mounting and Unmounting</p> <p>Utilizing the useEffect hook with an empty dependency array ([]) ensures the hook runs after the component mounts to the DOM.</p> <pre><code>useEffect(() =&gt; {\n  // do something after component mounts\n  return () =&gt; {\n    // do something before component unmounts\n  };\n}, []);\n</code></pre> <p>The <code>cleanup function</code> returned within the useEffect callback offers a mechanism for handling tasks when the component is about to unmount.</p> <p>Updates</p> <p>The useEffect hook, when invoked without a dependency array or with specific dependencies, executes after every render or when specified prop/state changes are detected.</p> <pre><code>useEffect(() =&gt; {\n  // do something after every render\n});\n</code></pre> <pre><code>useEffect(() =&gt; {\n  // do something after specific prop/state changes\n}, [state1, state2]);\n</code></pre> <p>Performance\u00b7Beginner</p>"},{"location":"interviewquestion/react.html#why-you-shouldnt-use-index-as-a-key-in-react-lists-and-iterators","title":"Why you shouldn't use <code>index</code> as a key in React lists and iterators?","text":"<p>Using <code>index</code> as a key can negatively impact performance and may cause issues with the component state.  When the list items change due to additions, deletions, or reordering, using indexes can lead to unnecessary re-renders or even incorrect UI updates. React uses keys to identify elements in the list, and if the key is just an index, it might reuse component instances and state inappropriately. Especially in cases where the list is dynamic or items can be reordered, it's recommended to use unique and stable identifiers as keys to ensure consistent behavior.</p> <p>Performance\u00b7Intermediate</p>"},{"location":"interviewquestion/react.html#what-is-the-purpose-of-the-usememo-hook-in-react","title":"What is the purpose of the <code>useMemo</code> hook in React?","text":"<p>The <code>useMemo hook</code> is used to memoize the result of a computationally expensive operation in a functional component. It helps optimize performance by caching the result of the operation and returning the cached result on subsequent renders if the dependencies have not changed. This can prevent unnecessary calculations.</p> <p>State\u00b7Intermediate</p>"},{"location":"interviewquestion/react.html#what-is-the-purpose-of-the-usecontext-hook-in-react","title":"What is the purpose of the <code>useContext</code> hook in React?","text":"<p>The <code>useContext hook</code> is used to access and consume context values in functional components. It provides a way to access context data without the need for a context consumer. useContext is particularly useful when you want to access context values in nested components without having to pass props through intermediate components.</p>"},{"location":"interviewquestion/react.html#reference","title":"Reference","text":"<ul> <li>roadmap.sh/questions/react</li> <li>reactjs interview question : github</li> </ul>"},{"location":"interviewquestion/terminology.html","title":"Terminology","text":""},{"location":"interviewquestion/terminology.html#reactive-programming","title":"Reactive Programming","text":"<ul> <li>Reactive Programming is a paradigm based on asynchronus data streams that propagate changes during the application lifcycle. [pg-11]</li> <li>Another important concept on Reactive Programming is the way we are communication within objects. [pg-12]</li> <li>Reactive porgarmming is used for handling the propagation of data during the life cycle of an application. []</li> </ul>"},{"location":"interviewquestion/terminology.html#solid-principle","title":"Solid Principle","text":"<p>SOLID is a set of principles created by Uncle Bob.</p> <p>S - Single-responsibility principle</p> <p>O - open-closed principle</p> <p>L - Liskov Substitution principle</p> <p>I - Interface Segregation principle</p> <p>D - Dependency Inversion principle</p>"},{"location":"interviewquestion/terminology.html#reference","title":"Reference","text":"<ul> <li>Front End Reactive Architecture</li> </ul>"},{"location":"more/intro.html","title":"Introduction","text":"<ul> <li> <p> Debian</p> </li> <li> <p> Redis</p> </li> <li> <p>: Certification</p> </li> <li> <p> Rabbitmq</p> </li> <li> <p> Celery</p> </li> <li> <p> vitest</p> </li> <li> <p> Git</p> </li> <li> <p> tmux</p> </li> </ul>"},{"location":"more/tech-stack.html","title":"Tech Stack","text":""},{"location":"more/tech-stack.html#react-and-django-stack","title":"React and Django Stack","text":"Django StackReact Stack <pre><code>Rest stack for Django:\n\n- drf\n- Celery\n- Postgresql\n- redis\n- elastic search\n\n- rabbitmq\n- graphene\n\nDjango + Graphene =&gt; Apollo + React\n</code></pre> <pre><code>- Razzle JS,\n- Apollo,\n- react-loadable,\n- helmet,\n- react-router\n- redux\n</code></pre>"},{"location":"more/tech-stack.html#testing-framework","title":"Testing Framework","text":"React Testing FrameworksDjango Testing Frameworks <ol> <li> <p>Jest:</p> <p>Jest is a widely-used JavaScript testing framework that works seamlessly with React applications. It provides features like snapshot testing, mocking, and a test runner. Jest is often the default choice for React projects.</p> <pre><code># For Jest\nnpm install --save-dev jest\n</code></pre> </li> <li> <p>React Testing Library:</p> <p>This library is built on top of DOM Testing Library and provides utilities for testing React components. It encourages testing components as users would interact with them, promoting a more user-centric approach to testing.</p> <pre><code># For React Testing Library\nnpm install --save-dev @testing-library/react @testing-library/jest-dom\n</code></pre> </li> <li> <p>Enzyme:</p> <p>Enzyme is a testing utility for React developed by Airbnb. It provides a set of tools to make it easier to test React components' output and behavior. Enzyme is compatible with Jest and other testing frameworks.</p> <pre><code>npm install --save-dev enzyme enzyme-adapter-react-16 enzyme-to-json\n</code></pre> </li> </ol> <ol> <li> <p>Django Test Framework (built-in):</p> <p>Django comes with its built-in testing framework. It includes support for unit tests, functional tests, and integration tests. Tests are usually placed in a tests module within each Django app.</p> </li> <li> <p>pytest-django:</p> <p>pytest-django is a plugin for the popular Python testing framework pytest. It provides additional functionality for testing Django applications and is known for its concise syntax and powerful fixtures.</p> <pre><code>pip install pytest pytest-django\n</code></pre> </li> </ol>"},{"location":"more/tech-stack.html#integration-testing","title":"Integration Testing:","text":"<ol> <li> <p>Cypress (for React):</p> <p>Cypress is an end-to-end testing framework for web applications. It allows you to write and run integration tests for your React applications. Cypress provides a real-time interactive test runner.</p> <pre><code>npm install --save-dev cypress\n</code></pre> </li> <li> <p>Selenium (for Django):</p> <p>Selenium is a tool for automating web browsers. It can be used for integration testing of Django applications by simulating user interactions with the browser. The Django project itself provides tools like django-selenium to simplify integration with Selenium.</p> <pre><code>pip install selenium\n</code></pre> </li> </ol>"},{"location":"more/tech-stack.html#testing-django-and-react-together","title":"Testing Django and React Together:","text":"<ol> <li> <p>Django Rest Framework Test (for API testing):</p> <p>If your React frontend communicates with a Django backend through a RESTful API, you can use Django Rest Framework Test for testing your API endpoints.</p> </li> <li> <p>TestCafe (for end-to-end testing):</p> <p>TestCafe is a JavaScript end-to-end testing framework that allows you to test web applications in various browsers. It can be used to test the interaction between your React frontend and Django backend.</p> <pre><code>npm install -g testcafe\n</code></pre> </li> <li> <p>Jest-Django (for Jest and Django integration):</p> <p>Jest-Django is a Jest transformer and utility functions for working with Django. It helps when writing tests for JavaScript code that interacts with Django templates or uses Django's static files.</p> <pre><code>npm install --save-dev jest-django\n</code></pre> </li> </ol>"},{"location":"more/tech-stack.html#configuration","title":"Configuration","text":"<p>After installation, you may need to configure the testing frameworks according to your project structure. For example, setting up Jest configurations in a jest.<code>config.js</code> file or configuring pytest with <code>pytest.ini</code>.</p> <p>Remember to consult the official documentation for each testing framework for more detailed configuration and usage instructions. Additionally, make sure your project's dependencies and versions are compatible with the chosen testing tools.</p> Jest Configuration (jest.config.js)pytest Configuration (pytest.ini) <p>Create a <code>jest.config.js</code> file in the root of your project. This file is used to configure Jest. Here's a simple example:</p> jest.config.js<pre><code>module.exports = {\n// Set the test environment (browser-like)\ntestEnvironment: \"jsdom\",\n\n// Extend Jest with testing-library assertions\nsetupFilesAfterEnv: [\"@testing-library/jest-dom/extend-expect\"],\n\n// Ignore specific paths during tests\ntestPathIgnorePatterns: [\"/node_modules/\", \"/build/\"],\n\n// Add more configuration options as needed\n};\n</code></pre> <p>Create a <code>pytest.ini</code> file in the root of your project. This file is used to configure pytest. Here's a basic example:</p> <pre><code>[pytest]\n\n# Set the Django settings module\nDJANGO_SETTINGS_MODULE = your_project.settings\n\n# Enable code coverage for your Django app\naddopts = --cov=your_app_name\n\n# Specify the file naming convention for test files\npython_files = tests.py test_*.py *_tests.py\n</code></pre> <p>Make sure to replace <code>your_project</code> and <code>your_app_name</code> with your actual Django project and app names.</p> <p>These configurations are just starting points, and you might need to customize them based on your project structure and specific needs. Consult the official documentation for Jest and pytest for more advanced configuration options and details.</p>"},{"location":"more/tech-stack.html#additional-tips","title":"Additional Tips:","text":"<p>Jest Configuration for React Projects:</p> <p>If you're working on a React project, you might want to extend Jest to work with Babel for transpiling JSX and ES6 code. Install the necessary packages:</p> <pre><code>npm install --save-dev babel-jest @babel/preset-env @babel/preset-react\n</code></pre> jest.config.jspytest.ini <p>Then, update your <code>jest.config.js</code>:</p> jest.config.js<pre><code>module.exports = {\n// ...other configurations\ntransform: {\n    \"^.+\\\\.jsx?$\": \"babel-jest\", // Transform JSX with Babel\n},\n// ...other configurations\n};\n</code></pre> <p>Pytest Configuration for Django:</p> <p>If you're using pytest with Django, you might want to add additional configurations for Django-related testing:</p> pytest.ini<pre><code>[pytest]\nDJANGO_SETTINGS_MODULE = your_project.settings\n\n# Specify Django settings module during tests\naddopts = --cov=your_app_name --ds=your_project.settings\n\npython_files = tests.py test_*.py *_tests.py\n</code></pre> <p>Adjust the file names and paths according to your project structure.</p> <p>Remember to install the necessary Python packages for pytest and code coverage:</p> <pre><code>pip install pytest pytest-django pytest-cov\n</code></pre> <p>Customize these configurations based on your project's needs, and consult the documentation for Jest and pytest for more in-depth details and options.</p> <p>Notes</p> <p>When setting up testing for a project, it's essential to consider the specific requirements and preferences of your team. The mentioned frameworks and libraries are widely used and well-documented, making them good choices for testing React and Django applications.</p>"},{"location":"more/tech-stack.html#reference","title":"Reference","text":"<ul> <li>django stack</li> </ul>"},{"location":"more/books/pocket-devops.html","title":"Pocker Devops","text":""},{"location":"more/books/pocket-devops.html#devops","title":"Devops","text":""},{"location":"more/books/pocket-devops.html#running-hello-world-in-docker","title":"Running Hello World in Docker","text":"<p>Problem</p> <p>You have access to a Docker host and want to run your first container. You want to learn the various life cycles of a container. As an example, you want to run a container and echo Hello World in it.</p> <p>Solution</p> <p>Typing docker at the prompt returns the usage of the docker command:</p> <p><code>$ docker</code></p> <p>Usage: <code>docker [OPTIONS] COMMAND [arg...]</code></p> <p>A self-sufficient runtime for linux containers.</p> <pre><code>Unable to find image 'busybox' locally\nbusybox:latest: The image you are pulling has been verified\n511136ea3c5a: Pull complete\ndf7546f9f060: Pull complete\ne433a6c5b276: Pull complete\ne72ac664f4f0: Pull complete\nStatus: Downloaded newer image for busybox:latest\nhello world\n</code></pre> <p>Containers are based on images. An image needs to be passed to the <code>docker run</code> command. In the preceding example, you specify an image called busybox. Docker does not have this image locally and pulls it from a public registry. A registry is a catalog of Docker images that the Docker client can communicate with and download images from. Once the image is pulled, Docker starts a container and executes the echo hello world command. Congratulations\u2014you ran your first container.</p>"},{"location":"more/books/pocket-devops.html#knowing-the-difference-between-containers-and-virtual-machines","title":"Knowing the Difference Between Containers and Virtual Machines","text":"<p>In comparison, with <code>containers</code>, the sharing of the host OS\u2019s kernel with the application means that the overhead of an additional OS is removed.</p>"},{"location":"more/books/pocket-devops.html#dockerfile","title":"Dockerfile","text":"<p>A Dockerfile is a set of instructions that tells Docker how to build an image. A typical Dockerfile is made up of the following:</p> <ul> <li>A <code>FROM</code> instruction that tells Docker what the base image is</li> <li>An <code>ENV</code> instruction to pass an environment variable.</li> <li>A <code>RUN</code> instruction to run some shell commands (for example, install-dependent programs not available in the base image).</li> <li>A <code>CMD</code> or an <code>ENTRYPOINT</code> instruction that tells Docker which executable to run when a container is started.</li> </ul>"},{"location":"more/books/pocket-devops.html#docker-image","title":"Docker Image","text":"<p><code>Docker image</code> is a read-only template that forms the foundation of your application Docker images are created using a <code>series of commands</code>, known as instructions, in the <code>Dockerfile</code>. </p> <p>Breakdown of a <code>.Dockerfile</code></p> <ul> <li>A Docker image starts with a base image, such as Ubuntu.</li> <li>On top of this image, we can add build our application stack adding the packages as and when required.</li> </ul> <p>Notes:</p> <p>On the advanced scale, to keep the image size as low as possible, we can also start with slim packages, such as <code>Alpine</code> or even Scratch, which is Docker\u2019s reserved, minimal starting image for building other images.</p> <p>Every Docker image has an <code>associated tag</code>. Tags typically include <code>names</code> and <code>version labels</code>. While it is not mandatory to associate a version tag with a Docker image name, these tags make it easier to roll back to previous versions. Without a tag name, Docker must fetch the image with the latest tag. You can also provide a tag name to force-fetch a tagged image.</p>"},{"location":"more/books/pocket-devops.html#docker-container","title":"Docker Container","text":"<p>A Docker image, when it\u2019s run in a host computer, spawns a process with its own namespace, known as a Docker container.</p> <p>The <code>main difference between</code> a Docker <code>image</code> and a <code>container</code> is the presence of a thin read/write layer known as the container layer. Any changes to the filesystem of a container, such as writing new files or modifying existing files, are done to this writable container layer than the lower layers.</p> <p>An important aspect to grasp is that when a container is running, the changes are applied to the container layer and when the container is stopped/killed, the container layer is not saved. Hence, all changes are lost. </p> <p>This aspect of containers is not understood very well and for this reason, stateful applications and those requiring persistent data were initially not recommended as containerized applications. However, with <code>Docker Volumes</code>, there are ways to get around this limitation.</p>"},{"location":"more/books/pocket-devops.html#bind-mounts-and-volumes","title":"Bind Mounts and Volumes","text":"<p>Docker provides different ways to mount data into a container from the Docker host: </p> <ul> <li>volumes,</li> <li>bind mounts, &amp; </li> <li>tmpfs volumes.</li> </ul> <p>While <code>tmpfs volumes</code> are stored in the host system\u2019s memory only, <code>bind mounts</code> and <code>volumes</code> are stored in the host filesystem</p>"},{"location":"more/books/pocket-devops.html#docker-engine","title":"Docker Engine","text":"<p>Docker Engine is the core part of Docker. Docker Engine is a client-server application that provides the platform, the runtime, and the tooling for building and managing Docker images, Docker containers, and more. Docker Engine provides the following:</p> <ul> <li>Docker daemon</li> <li>Docker CLI</li> <li>Docker API</li> </ul>"},{"location":"more/books/pocket-devops.html#docker-daemon","title":"Docker Daemon","text":"<p>The Docker daemon is a <code>service</code> that runs in the background of the host computer and handles the heavy lifting of most of the Docker commands. The daemon listens for API requests for creating and managing Docker objects, such as <code>containers</code>, <code>networks</code>, and <code>volumes</code>.</p>"},{"location":"more/books/pocket-devops.html#docker-cli","title":"Docker CLI","text":"<p>Docker CLI is the primary way that you will interact with Docker. Docker CLI exposes a set of commands that you can provide. The Docker CLI forwards the request to Docker daemon, which then performs the necessary work.</p> <p>While the Docker CLI includes a huge variety of commands and sub-commands, the most common commands that we will work with in this book are as mentioned:</p> bash<pre><code>$ docker build\n$ docker pull\n$ docker run\n$ docker exec\n</code></pre>"},{"location":"more/books/pocket-devops.html#docker-api","title":"Docker API","text":"<p>Docker also provides an API for interacting with the Docker Engine. This is particularly useful if there\u2019s a need to create or manage containers from within applications. </p>"},{"location":"more/books/pocket-devops.html#docker-compose","title":"Docker Compose","text":"<p>Docker Compose is a tool for defining and <code>running multi-container applications</code>. Much like how Docker allows you to build an image for your application and run it in your container, Compose use the same images in combination with a definition file (known as the compose file) to build, launch, and run multi-container applications, including dependent and linked containers.</p> <p>The most common use case for Docker Compose is to run applications and their dependent services (such as databases and caching providers) in the same simple, streamlined manner as running a single container application.</p>"},{"location":"more/books/pocket-devops.html#volume","title":"Volume","text":"<p>Docker volumes are the current recommended method of persisting data stored in containers. Volumes are completely managed by Docker and have many advantages over bind mounts:</p>"},{"location":"more/books/pocket-devops.html#docker-volume-subcommands","title":"Docker Volume Subcommands","text":"<p>Docker exposes the Volume API as a series of subcommands.</p> bash<pre><code>$ docker volume create\n\n$ docker volume inspect\n\n$ docker volume ls\n\n$ docker volume prune\n\n$ docker volume rm\n</code></pre>"},{"location":"more/books/pocket-devops.html#hands-on-docker-commands","title":"Hands on Docker <code>Commands</code>","text":"bash<pre><code># Make sure the docke in installed\n$ docker info\n\n# Working with Docker Images\n# listing of the images available locally\n$ docker image ls\n\n# docker inspect command provides a lot of information about the image\n$ docker image inspect hello-world\n\n# Of importance are the image properties Env, Cmd, and Layers,\n# which tell us about these environment variables.\n\n# Env\n$ docker image inspect hello-world | jq .[].Config.Env\n\n# startup command on the container\n$ docker image inspect hello-world | jq .[].Config.Cmd\n\n# layers associated with the image\n$ docker image inspect hello-world | jq .[].RootFS.Layers\n\n#\n$ docker image inspect nginx | jq .[].Config.ExposedPorts\n</code></pre>"},{"location":"more/books/tech-books.html","title":"Tech Books","text":""},{"location":"more/books/tech-books.html#technology-books","title":"Technology Books","text":""},{"location":"more/books/tech-books.html#self-help-books","title":"Self help books","text":"<p>Make life worthwhile </p>"},{"location":"more/books/tech-books.html#reference","title":"Reference","text":"<ul> <li>Tech Books :github.com</li> <li>E-Books Directory</li> <li>FreeComputerBooks.com</li> </ul>"},{"location":"more/certification/python-certification.html","title":"Certification","text":"<p>PCEP\u2122 \u2013 Certified Entry-Level Python Programmer</p> <p></p> <p>...</p>"},{"location":"more/certification/python-certification.html#reference","title":"Reference","text":"<ul> <li>python certification: pcep</li> </ul>"},{"location":"more/linux/debian.html","title":"Debian","text":"<p>What is a daemon?</p> <p>A daemon (pronounced <code>DAY-MAN</code>, <code>DAY-MON</code> or sometimes <code>DEE-MON</code>) is a background process that runs on the Linux OS continuously. When we say background, we mean that the program runs without any user interaction. It runs \u201cbehind the scenes\u201c so to speak.</p>"},{"location":"more/linux/debian.html#basic","title":"Basic","text":"<ul> <li> <p>To see which <code>kernel version</code> is running on your system:</p> <p>The command \u201c<code>uname</code>\u201d stands for \u201cUnix name\u201d and tells you about the operating system kernel that\u2019s running.</p> <pre><code># display the operating system kernel that\u2019s running:\n$ uname\n\n# display the kernel version number (the \u201crelease\u201d):\n$ uname -r\n\n# display the machine hardware name:\n$ uname -m\n\n# display all available information:\n$ uname -a\n</code></pre> </li> <li> <p>To Open New Terminal in Ubuntu:</p> <p>Ctrl+Alt+T</p> </li> </ul>"},{"location":"more/linux/debian.html#white-belt","title":"White belt","text":"<ul> <li> <p>To see the hostname:</p> <pre><code>$ hostname\n\n# pwd or Print Working Directory\n$ pwd\n</code></pre> </li> <li> <p>To see your assigned <code>user id</code> and <code>group id</code>, simply issue the <code>id</code> command:</p> <pre><code>$ id\n</code></pre> </li> </ul>"},{"location":"more/linux/debian.html#black-belt","title":"Black Belt","text":"<ul> <li> <p><code>Tmux</code>: Secret Background Windows</p> <p><code>tmux</code> or <code>Terminal Multiplexer</code> is a piece of software used to manage terminal sessions. In addition, it can spin up long-standing terminals in the background of the Linux operating system that can be saved and recalled later.</p> <p>Tmux cancaome in handy for when you are doing work on a Linux system remotely via SSH and need to keep a session open and to come back to later.</p> bash<pre><code># install\n$ apt-get install tmux\n</code></pre> </li> </ul>"},{"location":"more/linux/debian.html#cat-commands","title":"Cat Commands","text":"<p>Cat means <code>concatenate</code> frequently used command in Linux. It can read data from the file and gives the content as output. It can help us to <code>create</code>, <code>view</code> and <code>concatenate</code> files. </p> <p>So let us see frequently used <code>cat</code> commands.</p> <pre><code># TO VIEW A SINGLE FILE:\n$ cat filename\n\n# TO VIEW MULTIPLE FILES\n$ cat filename1 filename2\n\n# TO VIEW THE CONTENTS OF A FILE PRECEDING WITH LINE NUMBERS:\n$ cat -n filename\n\n# TO CREATE A FILE\n$ cat &gt; new_file\n</code></pre> <p>Ubuntu Important Commands</p> <pre><code># It gives information about how long the system has been running in one line.\n$ uptime\n\n# It displays detailed information about the users who are logged in the system currently.\n$ w\n\n# Using DNS Tools\n# 1. It display information about the domain name, IP address &amp; DNS server\n$ nslookup www.google.com\n\n# 2. It display information about the domain name &amp; IP Addresss\n$ host www.google.com\n\n# 3. dig is a more advanced DNS tool\n$ dig www.google.com\n</code></pre>"},{"location":"more/linux/debian.html#types-of-packages","title":"Types of Packages","text":"<p>The two most popular packages</p> <ol> <li> <p>Debian (<code>.deb</code>) packages:</p> <p>Debian packages are used for distributions like Debian, Ubuntu, and Linux Mint. </p> </li> <li> <p>Red Hat (<code>.rpm</code>):</p> <p>Red Hat packages are used in Fedora, CentOS, RHEL, Suse, and others.</p> </li> </ol>"},{"location":"more/linux/debian.html#package-manager","title":"Package Manager","text":"<ol> <li> <p>Debian package tool (dpkg): DPKG - The True Hero</p> <p><code>Dpkg</code> is a tool that APT is using behind the scenes to install packages. <code>Dpkg</code> doesn\u2019t install dependencies. If we have a <code>.deb</code> package on our system, we can install it easily with dpkg:</p> <pre><code># install\n$ dpkg -i my_package_to_be_installed.deb\n\n# remove\n$ dpkg -r my_package_to_be_removed.deb\n\n# list\n$ dpkg -l\n</code></pre> </li> <li> <p>apt-get</p> <pre><code># syntax\n$ apt-get install &lt;package-name&gt;\n\n$ apt-get install nmap\n</code></pre> </li> <li> <p>Advanced Package Tool (apt)</p> <p><code>apt</code> was introduced to be a bit more user-friendly than <code>apt-get</code>. APT builds on dpkg and adds some special features like managing dependencies, upgrades and searching for package</p> <pre><code># Keeping Software Up to Date\n$ sudo apt update\n</code></pre> </li> <li> <p>Snap (.snap)</p> <p>Snap, a <code>package management system</code> developed by Canonical, Ltd. Unlike <code>apt</code> packages, <code>snap</code> bundles all of the dependencies for a package into a single <code>.snap</code> file.  </p> <p>This ensures that the software package is self-contained with its own copy of all of the libraries and assets needed to run. This avoids the potential conflicts of packages relying on different versions of the same shared assets and libraries. The Snap system also allows different versions of the same packages to be installed in parallel.</p> <pre><code># Basic Snap Commands\n\n$ snap list\n$ snap install remmina\n$ snap remove remmina\n$ snap find vlc\n$ snap info remmina\n</code></pre> </li> </ol>"},{"location":"more/linux/debian.html#tar-tape-archive","title":"Tar (Tape Archive)","text":"<p>Tar is a powerful archiving utility used to compress and backup files in the Linux operating system. It is popular tool for creating <code>archives</code> of files and directories.</p> <pre><code># To create a tar archive\n$ tar -cvf archive.tar directory/\n\n# To view the contents of a tar archive\n$ tar -tvf archive.tar\n\n# To extract the contents of a tar archive\n$ tar -xvf archive.tar\n</code></pre> <ul> <li>\u2018<code>c</code>\u2019 flag stands for <code>create</code></li> <li>\u2018<code>x</code>\u2019 flag stands for <code>extract</code></li> <li>\u2018<code>t</code>\u2019 flag stands for <code>list</code></li> <li>\u2018<code>v</code>\u2019 stands for <code>verbose</code></li> <li>\u2018<code>f</code>\u2019 stands for <code>file</code></li> </ul>"},{"location":"more/linux/debian.html#file-permissions-and-ownership","title":"File Permissions and Ownership","text":"<p>In Linux, every file and directory has an owner and a set of permissions that determine who can access and modify the file.</p> <p>File Permissions</p> <p>Each file on a Linux system has <code>three</code> types of permissions:</p> <ul> <li>read <code>r</code>, </li> <li>write <code>w</code>, </li> <li>execute <code>x</code></li> </ul> bash<pre><code>$ ls -l &lt;file-or-folder&gt;\n</code></pre> <p>Changing File Permissions</p> <p>The <code>chmod</code> command is used to change the permissions for a file. </p> bash<pre><code>$ chmod mode &lt;file-or-folder&gt;\n</code></pre> <p>There are two ways to specify the mode: </p> <ul> <li>using a <code>numeric value</code>, or </li> <li>using <code>symbolic values</code>.</li> </ul>"},{"location":"more/linux/debian.html#reference","title":"Reference","text":"<ul> <li>Shell Samurai by Stetson Blake</li> <li>Linux Mastery: 100+ Exercises for Building Your Skills by Frank Anemaet</li> </ul>"},{"location":"more/mkdocs/01-advanced-mkdocs.html","title":"Basic","text":""},{"location":"more/mkdocs/01-advanced-mkdocs.html#mkdocs","title":"Mkdocs","text":""},{"location":"more/mkdocs/01-advanced-mkdocs.html#installation","title":"Installation","text":"<pre><code>$ pip install mkdocs\n$ mkdocs new my-project\n$ cd my-project\n$ mkdocs serve\n</code></pre>"},{"location":"more/mkdocs/01-advanced-mkdocs.html#theming-our-documentation","title":"Theming our documentation","text":"<pre><code>site_name: MkLorum\nsite_url: https://example.com/\nnav:\n  - Home: index.md\n  - About: about.md\ntheme: readthedocs\n</code></pre>"},{"location":"more/mkdocs/01-advanced-mkdocs.html#building-the-site","title":"Building the site","text":"<pre><code>$ mkdocs build\n</code></pre>"},{"location":"more/mkdocs/01-advanced-mkdocs.html#deploying-your-docs","title":"Deploying your docs","text":"<pre><code>my-project/\n    mkdocs.yml\n    docs/\norgname.github.io/\n\n$ cd ../orgname.github.io/\n$ mkdocs gh-deploy --config-file ../my-project/mkdocs.yml --remote-branch master\n</code></pre>"},{"location":"more/mkdocs/01-advanced-mkdocs.html#material-theme","title":"Material theme","text":"<pre><code># Installing theme only\n$ pip install mkdocs-material\n\n# Next, install the theme and its dependencies with:\n$ pip install -e mkdocs-material\n\n# mkdocs.yml\ntheme:\n  name: material\n\n# glightbox\n$ pip install mkdocs-glightbox\n\n# Add plugin in your mkdocs.yml\nplugins:\n   - glightbox\n</code></pre>"},{"location":"more/mkdocs/01-advanced-mkdocs.html#reference","title":"Reference","text":"<ul> <li>mkdocs official site</li> <li>mkdocs material theme</li> <li>mkdocs-glightbox</li> </ul>"},{"location":"more/mkdocs/02-advanced-mkdocs.html","title":"Advanced","text":""},{"location":"more/mkdocs/02-advanced-mkdocs.html#advanced-mkdocs","title":"Advanced Mkdocs","text":""},{"location":"more/mkdocs/02-advanced-mkdocs.html#configure-pages-and-navigation","title":"Configure Pages and Navigation","text":"<pre><code>// A minimal navigation configuration could look like this:\n\nnav:\n  - 'index.md'\n  - 'about.md'\n</code></pre> <pre><code>// override the title in the nav setting add a title right before the filename\n\nnav:\n  - Home: 'index.md'\n  - About: 'about.md'\n</code></pre> <pre><code>// Navigation sub-sections can be created by listing related pages together under a section title\n\nnav:\n  - Home: 'index.md'\n  - 'User Guide':\n    - 'Writing your docs': 'writing-your-docs.md'\n    - 'Styling your docs': 'styling-your-docs.md'\n  - About:\n    - 'License': 'license.md'\n    - 'Release Notes': 'release-notes.md'\n</code></pre>"},{"location":"more/mkdocs/02-advanced-mkdocs.html#formatting","title":"Formatting","text":"<p>Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code># Configuration\n\nmarkdown_extensions:\n  - pymdownx.critic\n  - pymdownx.caret\n  - pymdownx.keys\n  - pymdownx.mark\n  - pymdownx.tilde\n</code></pre>"},{"location":"more/mkdocs/02-advanced-mkdocs.html#highlighting-text","title":"Highlighting Text","text":"<p>When Critic is enabled, Critic Markup can be used, which adds the ability to highlight suggested changes, as well as add inline comments to a document:</p> <pre><code># Text with highlighting\n- ==This was marked==\n- ^^This was inserted^^\n- ~~This was deleted~~\n\n#  Long Highlight \n\n# Sub- and superscripts\n- H~2~O\n- A^T^A\n\n# Keyboard keys\n++ctrl+alt+del++\n</code></pre>"},{"location":"more/mkdocs/02-advanced-mkdocs.html#lists","title":"Lists","text":"<pre><code># Configuration\n\nmarkdown_extensions:\n  - def_list\n  - pymdownx.tasklist:\n      custom_checkbox: true\n</code></pre> <p>When Tasklist is enabled, unordered list items can be prefixed with <code>[ ]</code> to render an unchecked checkbox or <code>[x]</code> to render a checked checkbox, allowing for the definition of task lists:</p> <pre><code># Definition list\n`Lorem ipsum dolor sit amet`\n\n:   Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus\n    tellus non sem sollicitudin, quis rutrum leo facilisis.\n\n# TaskList\n- [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n- [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [ ] Praesent sed risus massa\n- [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n</code></pre> <ul> <li>mkdocs navigation configuration</li> <li>mkdocs-glightbox</li> <li>mkdocs-pdf</li> </ul>"},{"location":"more/research/fast-api.html","title":"Fast API","text":"<p>FastAPI targets development of web APIs. FastAPI was mainly designed to build APIs, and its default input is <code>JSON</code>. FastAPI itself does not include a web server but recommends <code>Uvicorn</code>.</p> <pre><code>$ pip install fastapi uvicorn\n</code></pre> <p>You can start <code>Uvicorn</code> and the FastAPI web application in two ways:</p> <ol> <li>externally (or)</li> <li>internally</li> </ol>"},{"location":"more/research/fast-api.html#1-to-start-uvicorn-externally-via-the-command-line","title":"1. To start Uvicorn externally, via the command line","text":"<pre><code># Start Uvicorn with the command line\n$ uvicorn hello:app --reload\n\n# The hello refers to the hello.py file, and app is the FastAPI variable name within it.\n</code></pre>"},{"location":"more/research/fast-api.html#2-to-start-uvicorn-internally-in-the-application-itself","title":"2. To start Uvicorn internally in the application itself","text":"<pre><code># Start Uvicorn internally\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/hi\")\ndef greet():\n  return \"Hello? World?\"\n\nif __name__ == \"__main__\":\n  import uvicorn\n  uvicorn.run(\"hello:app\", reload=True)\n</code></pre> <p>In either case, that reload tells Uvicorn to restart the web server if hello.py changes.</p>"},{"location":"more/research/fast-api.html#test-fastapi-after-installing","title":"Test FastAPI after Installing","text":"<p>To make sure the installation worked, we can open a Python interactive shell and try to import the <code>FastAPI</code> package:</p> <pre><code>$ python\n\n&gt;&gt;&gt; from fastapi import FastAPI\n</code></pre>"},{"location":"more/research/fast-api.html#installing-the-httpie-command-line-utility","title":"Installing the HTTPie command-line utility","text":"<ul> <li><code>FastAPI</code> automatic documentation (we'll talk about this later in the book)</li> <li><code>Postman</code>, a GUI tool to perform HTTP requests</li> <li><code>cURL</code>, the well-known and widely used command-line tool to perform   network requests</li> <li><code>HTTPie</code>, a command-line tool aimed at making HTTP   requests with an intuitive syntax, JSON support, and syntax highlighting.</li> </ul> <pre><code># GET\n$ http GET https://603cca51f4333a0017b68509.mockapi.io/todos\n\n#POST\n$ http -v POST https://603cca51f4333a0017b68509.mockapi.io/todos text=\"My new task\"\n\n#\n$ http -v GET https://603cca51f4333a0017b68509.mockapi.io/todos \"My-Header: My-Header-Value\"\n</code></pre>"},{"location":"more/research/fast-api.html#web-tools","title":"Web Tools","text":"<p>The main Python web tools (FastAPI):</p> <ul> <li><code>FastAPI</code>: The web framework itself</li> <li><code>Uvicorn</code>: An asynchronous web server</li> <li><code>HTTPie</code>: A text web client, similar to curl</li> <li><code>Requests</code>: A synchronous web client package</li> <li><code>HTTPX</code>: A synchronous/asynchronous web client package</li> </ul>"},{"location":"more/research/fast-api.html#sqlalchemy","title":"SQLAlchemy","text":"<p>SQLAlchemy is the most popular ORM library and can establish communication between any Python-based application and database platform.</p> <p>This ORM is a boilerplated interface that aims to create a database-agnostic data layer that can connect to any database engine. But compared to other ORMs, SQLAlchemy is DBA-friendly because it can generate optimized native SQL statements.</p> <pre><code>pip install SQLAlchemy\n</code></pre>"},{"location":"more/research/fast-api.html#installing-the-database-driver","title":"Installing the database driver","text":"<p>SQLAlchemy will not work without the required database driver. It is mandatory to install the <code>psycopg2</code> dialect since the database of choice is PostgreSQL:</p> <pre><code>pip install psycopg2\n</code></pre>"},{"location":"more/research/fast-api.html#reference","title":"Reference","text":"<ul> <li>FastAPI: Modern Python Web Development by Bill Lubanovic</li> </ul>"},{"location":"more/research/js-prevent-default.html","title":"prevent default","text":"<p>The <code>e.preventDefault()</code> method is a common practice in JavaScript when handling events, especially form submissions. It is used to prevent the default behavior associated with an event.</p> <p>In the context of a form submission:</p> <ul> <li> <p>Without e.preventDefault(): If you don't prevent the default behavior of a form submission, the browser will perform its default action, which usually involves sending a request to the server, causing a page reload or navigation.</p> </li> <li> <p>With e.preventDefault(): By calling <code>e.preventDefault()</code> within an event handler, you stop the default action associated with that event. In the case of a form submission, it prevents the browser from navigating away from the current page or triggering a full page reload.</p> </li> </ul> <pre><code>const handleSubmit = (e) =&gt; {\n  e.preventDefault(); // Prevent the default form submission behavior\n\n  // Your custom logic for handling the form submission goes here\n};\n</code></pre>"},{"location":"more/research/micro-frontend.html","title":"Micro-Frontend","text":""},{"location":"more/research/micro-frontend.html#installation","title":"Installation","text":"<pre><code>npm install --global create-single-spa\n\n# or\n\nyarn global add create-single-spa\n</code></pre> <p>Then run the following:</p> <p>create-single-spa</p> <pre><code>npm init single-spa\n\n# \nnpm init single-spa\n\n# or\n\nnpx create-single-spa\n\n# or\n\nyarn create single-spa\n</code></pre>"},{"location":"more/research/micro-frontend.html#reference","title":"Reference","text":""},{"location":"more/research/rabbitmq-celery.html","title":"Rabbitmq & Celery","text":"<p>Yes, you can definitely use RabbitMQ and Celery together without Redis or any other additional message broker. RabbitMQ is a powerful message broker that works seamlessly with Celery.</p> <p>What is pyamqp. Do i need to install it ?</p> <p>The pyamqp in the Celery configuration URL (pyamqp://...) refers to the protocol used by Celery to communicate with message brokers that support the Advanced Message Queuing Protocol (AMQP). AMQP is a messaging standard that allows applications to communicate with each other via message queues.</p> <p>pyamqp is actually a library that Celery uses to handle the AMQP protocol. It's part of the Celery dependencies, and you don't need to install it separately. When you install Celery using pip install celery, it automatically installs the required dependencies, including pyamqp.</p> <p>So, in your Celery configuration, when you see pyamqp://..., it specifies the use of the AMQP protocol for communication between Celery and the RabbitMQ message broker. The pyamqp library is included with Celery, and you don't need to explicitly install it.</p> <p>Here are the steps to use RabbitMQ and Celery:</p>"},{"location":"more/research/rabbitmq-celery.html#step-1-install-celery-and-rabbitmq","title":"Step 1: Install Celery and RabbitMQ","text":"<pre><code>pip install celery\n</code></pre> <p>Install RabbitMQ by following the instructions on the official RabbitMQ website: RabbitMQ Installation Guide</p>"},{"location":"more/research/rabbitmq-celery.html#step-2-configure-django-settings","title":"Step 2: Configure Django Settings","text":"<p>In your Django project's settings.py, configure Celery to use RabbitMQ:</p> <pre><code># settings.py\n\n# Celery configuration\n# CELERY_BROKER_URL = 'pyamqp://guest:guest@localhost//'  # Replace with your RabbitMQ URL\n# using rabbit mq URL\nCELERY_BROKER_URL = 'pyamqp://guest:guest@localhost:5672/#/'\nCELERY_RESULT_BACKEND = 'rpc://'\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'UTC'\n</code></pre> <p>Replace the <code>CELERY_BROKER_URL</code> with your RabbitMQ connection details.</p>"},{"location":"more/research/rabbitmq-celery.html#step-3-create-a-celery-instance","title":"Step 3: Create a Celery Instance","text":"<p>Create a file named <code>celery.py</code> in your Django project directory:</p> <pre><code># celery.py\n\nfrom __future__ import absolute_import, unicode_literals\nimport os\nfrom celery import Celery\n\n# Set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project.settings')\n\n# Create a Celery instance and configure it using the settings from Django.\napp = Celery('your_project')\n\n# Load task modules from all registered Django app configs.\napp.config_from_object('django.conf:settings', namespace='CELERY')\n\n# Auto-discover tasks in all installed apps\napp.autodiscover_tasks()\n</code></pre>"},{"location":"more/research/rabbitmq-celery.html#step-4-create-celery-tasks","title":"Step 4: Create Celery Tasks","text":"<p>Create a <code>tasks.py</code> file in one of your Django apps and define the tasks you want to execute asynchronously.</p> <pre><code># your_app/tasks.py\n\nfrom celery import shared_task\nfrom time import sleep\n\n@shared_task\ndef example_task(seconds):\n    sleep(seconds)\n    return f'Task completed after {seconds} seconds'\n</code></pre>"},{"location":"more/research/rabbitmq-celery.html#step-5-use-celery-in-django-views-or-models-additional","title":"Step 5: Use Celery in Django Views or Models (ADDITIONAL)","text":"<p>Now, you can use the Celery task in your Django views, models, or other parts of your application</p> <pre><code># views.py\n\nfrom django.shortcuts import render\nfrom your_app.tasks import example_task\n\ndef my_view(request):\n    # Trigger the Celery task\n    result = example_task.delay(10)  # Run the task asynchronously\n\n    return render(request, 'your_template.html', {'result_id': result.id})\n</code></pre>"},{"location":"more/research/rabbitmq-celery.html#step-6-run-celery-worker","title":"Step 6: Run Celery Worker","text":"<p>Open a terminal and run the Celery worker:</p> <pre><code>celery -A your_project worker -l info\n</code></pre>"},{"location":"more/research/rabbitmq-celery.html#step-7-start-django-development-server-additional","title":"Step 7: Start Django Development Server (ADDITIONAL)","text":"<p>Run your Django development server:</p> <pre><code>python manage.py runserver\n</code></pre> <p>Now, when you access the view that triggers the Celery task, the task will be processed by the Celery worker in the background.</p> <p>Remember to refer to the official documentation for Celery (https://docs.celeryproject.org/) for more advanced configurations and options.</p> <p>NOTES</p> <p>Replace <code>your_project</code> with the actual name of your Django project.</p> <p>Now, you can use Celery as described in your Django views, models, or other parts of your application. Tasks will be processed by the Celery worker, and messages will be exchanged through RabbitMQ.</p> <p>Remember to refer to the official documentation for Celery and RabbitMQ for more advanced configurations and options:</p> <ul> <li>Celery Documentation</li> <li>RabbitMQ Documentation</li> </ul> <ul> <li>Building Scalable Applications with Django, Celery, and RabbitMQ</li> </ul>"},{"location":"more/research/rabbitmq.html","title":"Rabbitmq","text":""},{"location":"more/research/rabbitmq.html#rabbitmq","title":"RabbitMQ","text":""},{"location":"more/research/rabbitmq.html#introduction","title":"Introduction","text":"<p>What is RabbitMQ?</p> <p>\u201cRabbitMQ is a message broker: it accepts and forwards messages. You can think about it as a post office: when you put the mail that you want posting in a post box, you can be sure that the letter carrier will eventually deliver the mail to your recipient. In this analogy, RabbitMQ is a post box, a post office, and a letter carrier.\u201d (1)</p> <p>It has developed by Erlang open source langua</p> <p></p> <p>Why we need to use RabbitMQ?</p> <p>Now that you know what RabbitMQ is, the next question is: why should you use a queue instead of directly sending data from one microservice to the other one. There are a couple of reasons why using a queue instead of directly sending data is better (2)</p> <ul> <li>Higher availability and better error handling</li> <li>Better scalability</li> <li>Share data with whoever wants/needs it</li> <li>Better user experience due to asynchronous processing</li> </ul> <p>As for usage areas, it will make our job much easier to perform tasks that do not need to be synchronized, such as sending mail, basket operations after adding an order on our e-commerce page, and export (excel, csv) data. (Generally \u201cMessage brokers\u201d).</p> <p></p> <p>The main parts of the rabbitmq:</p> <ul> <li>A <code>producer</code> is a user application that sends messages.</li> <li>A <code>queue</code> is a buffer that stores messages.</li> <li>A <code>consumer</code> is a user application that receives message</li> </ul>"},{"location":"more/research/rabbitmq.html#setup","title":"Setup","text":"<pre><code>// Installation\n$ choco install rabbitmq\n\n// install without any\n$ choco install rabbitmq --yes\n\n// rabbitmqctl \u2014 tool for managing RabbitMQ nodes\n# rabbitmqctl status\n</code></pre> <pre><code>// Windows \u2013 RabbitMQ has Nodedown Error (Solved)\n\n1. Run RabbitMQ sbin command prompt as administrator.\n2. Run \"rabbitmq-service remove\"\n3. Run \"rabbitmq-service install\"\n</code></pre>"},{"location":"more/research/rabbitmq.html#rabbitmq-enable-web-management-plugin","title":"RabbitMQ Enable Web Management Plugin","text":"<p>To enable a rabbitmq web management plugin on windows, we need to start <code>RabbitMQ</code> Command Prompt with administrator privilege, enter the command \u201c<code>rabbitmq-plugins enable rabbitmq_management</code>\u201d and execute it.</p> <pre><code>$ rabbitmq-plugins enable rabbitmq_management\n\n// open a url\nhttp://localhost:15672\n\n\n// To access rabbitmq web management dashboard, the default Username and password of  is \u201cguest\u201d (Username: \u201cguest\u201d | Password: \u201cguest\u201d).\nUsername: guest\nPassword: guest\n</code></pre>"},{"location":"more/research/rabbitmq.html#reference","title":"Reference","text":"<ul> <li>rabbitmq install using choco</li> <li>RabbitMQ Installation on Windows</li> <li>RabbitMQ - Installation: Tutorial</li> <li>Rabbit MQ - Publish/Subscribe</li> <li>RabbitMQ Producer and Consumer Solution with Docker in .net Core</li> <li>Part 1: RabbitMQ for beginners - What is RabbitMQ?</li> <li>rabbitmqctl - guide</li> <li>How to Use RabbitMQ in ASP.NET Core</li> <li>How do I verify my version of RabbitMQ?</li> </ul>"},{"location":"more/research/rabbitmq.html#solved","title":"Solved","text":"<ul> <li>Unable to perform an operation on node rabbitmq</li> </ul>"},{"location":"more/research/redis.html","title":"Redis","text":""},{"location":"more/research/redis.html#redis","title":"Redis","text":""},{"location":"more/research/redis.html#reference","title":"Reference","text":"<p>redis - outdated</p> <p>redis</p>"},{"location":"more/research/reference.html","title":"Reference","text":"<p>Reference</p>"},{"location":"more/research/reference.html#npm-packages","title":"npm packages","text":"<ul> <li>react-number-format - npm</li> <li>emoji-picker-react - npm</li> <li>react-scroll-up -npm</li> <li>react-accessible-treeview</li> <li>react-social-login-buttons</li> <li>react-use-is-online</li> <li>react-youtube</li> <li>react-infinite-scroll-component: github</li> <li>react-input-emoji: github</li> </ul>"},{"location":"more/research/reference.html#docs","title":"Docs","text":"<ul> <li>devdocs.io</li> <li>Design system repo</li> <li>tinymce.Editor</li> <li>react component library</li> </ul>"},{"location":"more/research/reference.html#guide","title":"Guide","text":"<ul> <li>How to setup Infinite Scroll in your react component? </li> <li>Math.sign() - JavaScript | MDN</li> <li>Check if Value is Negative or Positive Number in JavaScript</li> <li>Javascript Program to Check if a number is Positive, Negative, or Zero</li> <li>How to Create Register and Login API using Django Rest Framework and Token Authentication</li> <li>Login and Register User \u2014 Django Rest Framework</li> <li>User Registration, Login, Logout API using Django Rest Framework</li> <li>Django REST Framework Basics</li> <li>Official Django REST Framework Tutorial - A Beginners Guide</li> <li>beautiful-react-hooks - github</li> <li>How to Make Ant Design Table (AntD) in React JS</li> <li>How To Debug React Apps With VS Code</li> <li>15 Useful Lodash Methods for Everyday Coding (Part-1)</li> <li>How do i get rid of the yesterday, today stuff in folders </li> <li>7 Best Steps For Writing Good Software Technical Documentation</li> <li> create-mf-app</li> <li>Micro Frontend Architecture Approach Selection Framework</li> <li>Micro Frontend by Module Federation with react-router-dom v6 - stackoverflow</li> <li>Why React Router is excellent for Micro-Frontends </li> <li>Micro Frontend Architecture and Challenges: Decision Framework</li> <li>The State of Micro Frontends</li> <li>Breaking down the last Monolith - Micro Frontends</li> <li>Reverse Chat Messages List Infinite Scroll - sandbox</li> <li>inverse infinite scroll react: sandbox</li> <li>25+ Slack slash commands every power user needs to know</li> <li>25+ Slash Commands to Help You be More Productive on Slack</li> <li>How to Develop Microfrontends Using React: Step-by-Step Guide</li> </ul>"},{"location":"more/research/reference.html#microfrontend","title":"Microfrontend","text":"<ul> <li> react-micro-frontend: github repo</li> <li>Microfrontends using React: The Complete Guide</li> <li>single-spa</li> <li>Building Micro Frontends With React</li> <li>Mastering Microfrontends: Routing and Communication</li> <li>Micro-Frontends With React &amp; Vite Module Federation</li> <li>Module Federation in Production</li> </ul>"},{"location":"more/research/reference.html#best","title":"BEST","text":"<ul> <li>How to Implement Tokenization using JWT and Django Rest Framework</li> <li>How to Use JWT Authentication with Django REST Framework</li> <li>How to use different git emails for personal and work repositories on the same machine</li> <li>How to configure Git with multiple emails?</li> <li>The React Handbook</li> </ul>"},{"location":"more/research/reference.html#short-book","title":"Short Book","text":"<ul> <li>useEffect By Exampl by Max Rozen</li> <li>Building Micro-Frontends by Luca Mezzalira</li> </ul>"},{"location":"more/research/reference.html#issue-solved","title":"Issue Solved","text":"<ul> <li>How to disable git gpg signing</li> <li>How To Debug React Apps With VS Code</li> </ul>"},{"location":"more/research/reference.html#youtube","title":"Youtube","text":"<ul> <li>How To NOT Get Screwed As A Software Engineer</li> <li>We Sold Our Startup &amp; Filmed Everything!</li> <li>Micro Frontends - Routing between remotes - youtube</li> </ul>"},{"location":"more/research/reference.html#best-notes","title":"BEST NOTES","text":"<ul> <li>How to Implement Tokenization using JWT and Django Rest Framework</li> <li>How to Use JWT Authentication with Django REST Framework</li> <li>How to use different git emails for personal and work repositories on the same machine</li> <li> <p>How to configure Git with multiple emails?</p> </li> <li> <p>How to Develop Microfrontends Using React: Step-by-Step Guide</p> </li> </ul>"},{"location":"more/research/tricks.html","title":"Tips & Tricks","text":""},{"location":"more/research/tricks.html#on-linux","title":"On Linux","text":"<p>python3 -m venv venv &amp;&amp; source venv/bin/activate</p>"},{"location":"more/research/tricks.html#on-windows","title":"On Windows","text":"<p>.\\venv\\Scripts\\activate</p>"},{"location":"more/research/tricks.html#python","title":"Python","text":"<pre><code>$ python manage.py shell\n\n# create the object using the model\n\n&gt; from geeks.models import GeeksModel\n&gt; GeeksModel.objects.create(title=\"title1\",description=\"description1\").save()\n&gt; GeeksModel.objects.create(title=\"title2\",description=\"description2\").save()\n</code></pre>"},{"location":"more/research/tricks.html#_1","title":"Tips & Tricks","text":"<p>https://semver.org/</p>"},{"location":"more/research/tricks.html#youtube","title":"Youtube","text":""},{"location":"more/research/tricks.html#learning-and-growing","title":"Learning and Growing","text":"<p>You should be reading (or watching or listening to) technical content every single weekday.</p> <ol> <li>Read Every Day: The Practice of Study</li> </ol>"},{"location":"more/research/tricks.html#javascript-methods-categorized-based-on-their-purpose","title":"JavaScript methods categorized based on their purpose:","text":"<ol> <li> <p>Manipulation Methods:</p> <ul> <li>Array Manipulation: Methods that modify arrays, like <code>push()</code>, <code>pop()</code>, <code>shift()</code>, <code>unshift()</code>, <code>splice()</code>, <code>sort()</code>, <code>reverse()</code>, <code>fill()</code>, <code>copyWithin()</code>.</li> <li>String Manipulation: Methods that modify strings, like <code>concat()</code>, <code>slice()</code>, <code>substring()</code>, <code>replace()</code>, <code>trim()</code>, <code>toUpperCase()</code>, <code>toLowerCase()</code>.</li> </ul> </li> <li> <p>Access Methods:</p> <ul> <li>Array Access: Methods to access array elements, like <code>indexOf()</code>, <code>lastIndexOf()</code>, <code>includes()</code>, <code>find()</code>, <code>findIndex()</code>.</li> <li>String Access: Methods to access string properties, like <code>charAt()</code>, <code>charCodeAt()</code>, <code>substring()</code>.</li> </ul> </li> <li> <p>Iteration Methods:</p> <ul> <li>Array Iteration: Methods to iterate over arrays, like <code>forEach()</code>, <code>map()</code>, <code>filter()</code>, <code>reduce()</code>, <code>some()</code>, <code>every()</code>.</li> <li>String Iteration: Methods to iterate over strings, like <code>charAt()</code>, <code>charCodeAt()</code>, <code>substring()</code>.</li> </ul> </li> <li> <p>Comparison Methods:</p> <ul> <li>Equality Comparison: Methods to compare values, like <code>===</code>, <code>!==</code>.</li> <li>Sorting Comparison: Methods to define sorting order, like <code>sort()</code>.</li> </ul> </li> <li> <p>Conversion Methods:</p> <ul> <li>Type Conversion: Methods to convert between different data types, like <code>toString()</code>, <code>parseInt()</code>, <code>parseFloat()</code>.</li> <li>Format Conversion: Methods to convert data format, like <code>JSON.stringify()</code>, <code>JSON.parse()</code>.</li> </ul> </li> <li> <p>Validation Methods:</p> <ul> <li>Data Validation: Methods to validate data, like <code>isNaN()</code>, <code>isFinite()</code>.</li> <li>String Validation: Methods to validate strings, like <code>startsWith()</code>, <code>endsWith()</code>, <code>includes()</code>.</li> </ul> </li> <li> <p>Utility Methods:</p> <ul> <li>Math Utility: Methods for mathematical operations, like <code>Math.abs()</code>, <code>Math.max()</code>, <code>Math.min()</code>, <code>Math.round()</code>.</li> <li>Time Utility: Methods for time-related operations, like <code>setTimeout()</code>, <code>setInterval()</code>, <code>Date.now()</code>.</li> </ul> </li> </ol> <p>These categories help in understanding the purpose of different methods in JavaScript and how they can be used to achieve specific tasks in programming.</p>"},{"location":"more/roadmap/study-technique.html","title":"Roadmap","text":""},{"location":"more/roadmap/study-technique.html#study-technique","title":"Study technique","text":"<ol> <li>Spaced Repetition    Spaced repetition, sometimes called <code>spaced practice</code>, <code>interleaved practice</code>, or <code>spaced retrieval</code>, is a study method that involves separating your study sessions into spaced intervals.</li> </ol> <p>One of the most popular examples of spaced repetition algorithms is <code>Anki</code>, based on another popular algorithm, <code>SuperMemo</code>.</p> <p></p>"},{"location":"more/roadmap/study-technique.html#space-repetition","title":"space-repetition","text":""},{"location":"more/roadmap/study-technique.html#reference","title":"Reference","text":"<ul> <li>The 7 Best Study Methods for All Types of Students</li> </ul>"},{"location":"more/tools/git.html","title":"Git","text":""},{"location":"more/tools/git.html#git","title":"Git","text":"bash<pre><code>$ mkdir ~/my_website\n$ cd ~/my_website\n\n# the option -b followed by a default branch named main\n$ git init -b main\n\n# or you can intialize empty repo and add files later\n$ git init -b main ~/my_website\n$ cd ~/my_website\n$ echo 'My awesome website!' &gt; index.html\n</code></pre> <p>The <code>git init</code> command creates a hidden directory called .git at the root level of your project. All revision information along with supporting metadata and Git extensions are stored in this top-level, hidden .git folder.</p>"},{"location":"more/tools/git.html#configuration-files","title":"Configuration Files","text":"<p>Git configuration files are all simple text files in the style of .ini files. The configuration files are used to store preferences and settings used by multiple git commands.</p> <p>Hierarchy of configuration files</p> <ul> <li> <p><code>.git/config</code></p> <p>Repository-specific configuration settings manipulated with the <code>--file</code> option or by default. You can also write to this file with the <code>--local</code> option. These settings have the highest precedence.</p> </li> <li> <p><code>~/.gitconfig</code></p> <p>User-specific configuration settings manipulated with the <code>--global</code> option.</p> </li> <li> <p><code>/etc/gitconfig</code></p> <p>System-wide configuration settings manipulated with the <code>--system</code> option if you have proper Unix file write permissions on the gitconfig file. These settings have the lowest precedence. Depending on your installation, the system settings file might be somewhere else (perhaps in <code>/usr/local/etc</code> gitconfig) or may be absent entirely.</p> </li> </ul>"},{"location":"more/tools/git.html#notes","title":"Notes","text":"<pre><code># opens a git .config file\n\n$ git config --global -e\n</code></pre>"},{"location":"more/tools/git.html#reference","title":"Reference","text":"<ul> <li>Version Control with Git 3rd edition by Prem Kumar Ponuthorai &amp; Jon Loeliger</li> </ul>"},{"location":"more/tools/gitlab.html","title":"Gitlab","text":"<p>gitlab</p> <p>Containerization is an OS-level virtualization method used to deploy and run distributed applications without launching an entire Virtual Machine (VM) for each application.</p> <p>It is a kind of OS virtualization where we run our applications in a separate <code>user space</code> called containers.</p>"},{"location":"more/tools/gitlab.html#docker-networking","title":"Docker Networking","text":"<p>By default, during installation, the Docker Engine creates three networks for you:</p> bash<pre><code>$ docker network ls\n</code></pre> <p>When Docker spins up a new container, by default, it creates a network stack for the container and attaches to the default bridge network. However, optionally, you could attach the container to the host or none network.</p> <p>Docker provides a <code>docker inspect</code> subcommand, which is as handy as a Swiss Army knife, to dive deep into the low-level details of the Docker <code>container</code> or <code>image</code>.</p>"},{"location":"more/tools/gitlab.html#reference","title":"Reference","text":""},{"location":"more/tools/tmux.html","title":"tmux","text":"<p>tmux is short for [t]erminal [mu]ltiple[x]er. A multiplexer is simply a fancy way of describing an application that lets you easily manage multiple terminal windows within one screen.</p> <p>tmux runs a server/client architecture.</p> <pre><code># tmux prefix command\n&lt;Ctrl&gt; and b\n</code></pre> <p></p>"},{"location":"more/tools/tmux.html#installation","title":"Installation","text":"bash<pre><code>$ sudo apt install tmux\n</code></pre>"},{"location":"more/tools/tmux.html#sessions","title":"Sessions","text":"bash<pre><code># To list all sessions (from outside tmux)\n$ tmux ls\n\n# To create new session\n$ tmux new-session -s work\n\n# To detach the session: (d for detach)\n&lt;Prefix&gt;, d\n\n# To rename a session\n$ tmux rename-session -t  old_name  new_name\n\n# To select a session\n:choose-session\n\n# Move to next session\n&lt;P&gt;, (\n\n# Move to previous session\n&lt;P&gt;, )\n\n# To kill a session\n# You can type exit within a session to destroy the session\nexit\n#or\n\u200btmux\u200b \u200bkill-session \u200b \u200b-t\u200b \u200b basic \u200b\ntmux\u200b \u200bkill-session \u200b \u200b-t\u200b \u200b second_session\n\n# Kill the tmux server and, as a result, every session\n$ tmux kill-server\u200b\n</code></pre>"},{"location":"more/tools/tmux.html#windows","title":"Windows","text":"bash<pre><code># To create new window: (c for create)\n&lt;Prefix&gt;, c\n\n# To rename a window\n&lt;Prefix&gt; ,\n\n# To move between windows\n# By default, windows in tmux each have a number, starting at 0\n&lt;Prefix&gt;, 0\n&lt;Prefix&gt;, 1\n\n# To find a window \n&lt;Prefix&gt;, f\n\n# To display a visual menu of your windows \n&lt;Prefix&gt;, w\n\n# To close a window\ntype exit\n# or\n&lt;Prefix&gt;, &amp;\n</code></pre>"},{"location":"more/tools/tmux.html#panes","title":"Panes","text":"bash<pre><code># To split the window vertically\n&lt;Prefix&gt;, %\n\n# To split the pane horizontally\n# &lt;Prefix&gt;, \"\n\n# To kill pane\n&lt;Prefix&gt;, x\n\n# To zoom the pane\n&lt;Prefix&gt;, z\n\n# To move the cursor to the pane to the right, left, down, or up\n&lt;Prefix&gt; and the right arrow key,\n&lt;Prefix&gt; and the left arrow key,\n&lt;Prefix&gt; and the down arrow key,\n&lt;Prefix&gt; and the up arrow key\n\n# Pane Layouts\n# To cycle through these layouts by pressing &lt;PREFIX&gt; SPACEBAR \n&lt;PREFIX&gt; SPACEBAR \n</code></pre>"},{"location":"more/tools/tmux.html#manipulating-text","title":"Manipulating Text","text":"<p>There are two important components of tmux</p> <ul> <li>Copy mode</li> <li>paste buffers</li> </ul> <p>Explaining the Window history</p> <p>In order to work its magic and keep everything in a single terminal window, tmux has to hide all of the text that won't fit in the currently viewed pane. It keeps all of this text stored in something called Window history.</p> <pre><code># copy mode\n# To enter copy mode\n&lt;Prefix&gt;, [\n\n# To copy text into the paste buffer. \n# This sets the start point of the selection.\n\npress Ctrl + Space bar (Space bar)\n\n# When you are satisfied with your selection,\nsimply press Meta + w (Enter) \n# to copythe text and you will leave Copy mode immediately\n</code></pre> <p>Interacting with the paste buffer</p> <p>The paste buffer is a holding bucket for all of the text you will copy. It is actually a stack, so each item copied from Copy mode is added at the top of the stack.</p> <pre><code># Pasting text from the paste buffer\n&lt;Prefix&gt;, ]\n\n# Choosing items from the paste buffer\n&lt;Prefix&gt;, =\n</code></pre> <p>Explaining the different tmux modes</p> <ul> <li> <p>Default mode:</p> <p>You are in <code>Default mode</code> by default, and if you go into any other mode and then exit it, you'll end up back in Default mode.</p> </li> <li> <p>Copy mode:</p> <p>This allows us to access the Window history and <code>copy/paste</code> contents from that history.</p> </li> <li> <p>Command mode:</p> <p>This mode is used to enter arbitrary tmux commands. It is similar to the vi mode of the same name and can be accessed by <code>&lt;Prefix&gt;, :</code>.</p> </li> <li> <p>Clock mode:</p> <p>This mode shows the current time and is more of a novelty utility than an actual mode, like the rest. It can be accessed by <code>&lt;Prefix&gt;, t</code>.</p> </li> <li> <p>Control mode:</p> <p>This mode allows third-party applications to interact with tmux through a text-only protocol.</p> </li> </ul>"},{"location":"more/tools/tmux.html#-shorcuts-alias","title":"- Shorcuts <code>alias</code>","text":"bash<pre><code>\u200b$ tmux\u200b \u200blist-sessions\n# alias\n$ \u200btmux\u200b \u200bls \n\n\u200b$ tmux\u200b \u200bnew-session \u200b \u200b-s \u200b \u200bbasic\u200b\n# alias\n$ \u200btmux\u200b \u200bnew\u200b \u200b-s \u200b \u200bbasic\n\n# By using the -n flag, we tell tmux to name the first window so we can identify it easily.\n\u200b$ tmux\u200b \u200bnew\u200b \u200b-s \u200b \u200bwindows \u200b \u200b-n \u200b \u200bshell \n\n$ tmux rename-session -t old_name new_name\n# alias\n$ tmux rename -t old_name new_name.\u200b\n</code></pre>"},{"location":"more/tools/tmux.html#-easter-eggs","title":"- Easter Eggs","text":"bash<pre><code># To display clock on the screen.\n&lt;Prefix&gt;, t\n\n\n# list of sessions and select any of them.\n&lt;Prefix&gt;, s \n\n# To attach last session, after you detach session\n$ tmux attach\n\n# display tmux keyboard shortcuts\n&lt;Prefix&gt;, ?\n</code></pre>"},{"location":"more/tools/tmux.html#-commands","title":"- Commands","text":"<p>Default Commands for Sessions, Windows, and Panes</p> <pre><code>&lt;Prefix&gt;, n: Moves to the next window.\n&lt;Prefix&gt;, p: Moves to the previous window.\n\n&lt;Prefix&gt;, 0 ... 9:Selects windows by number.\n\n&lt;Prefix&gt;, w: Displays a selectable list of windows in the current session.\n&lt;Prefix&gt;, &amp;: Closes the current window after prompting for confirmation.\n\n&lt;Prefix&gt;, q: Momentarily displays pane numbers in each pane.\n&lt;Preix&gt;, x: Closes the current pane after prompting for confirmation.\n\n&lt;Prefix&gt;, space: Cycles through the various pane layouts.\n</code></pre> <p>Sessions Commands</p> <pre><code>Prefix + (  Switch to the previous session\nPrefix + )  Switch to the next session\nPrefix + s  Display an interactive session list\nPrefix + d  detach from the current session\nPrefix + $  rename a session in tmux\nPrefix + L  Select the most recently used session (or the last session).\n\n# List all available sessions\ntmux ls\n\n# Destroy all sessions and kill all processes\ntmux kill-server\n</code></pre> <p>Windows Commands</p> <pre><code>Prefix + c  Create a new window\nPrefix + p  Switch to the previous window\nPrefix + n  Switch to the next window\n\nPrefix + 0-9    Switch to a window using it\u2019s index number\n\nPrefix + w  Choose a window from an interactive list\n\nPrefix + &amp;  Force kill-all processes in an unresponsive window\nPrefix + %  Split windows horizontally\nPrefix + \u201c  Split windows vertically\n\nexit    Close a window\n</code></pre> <p>Getting Help with tmux by Reviewing Keyboard Shortcuts</p> <pre><code>Prefix + ?\n</code></pre> <p></p>"},{"location":"more/tools/tmux.html#reference","title":"Reference","text":"<p>Site Reference</p> <ul> <li>tmux</li> </ul> <p>Books</p> <ul> <li> <p>Getting Started with tmux by Victor Quinn, J.D.</p> </li> <li> <p>tmux Taster by Mark McDonnell</p> </li> <li> <p>tmux 2: Productive Mouse-Free Development by Brian P. Hogan</p> </li> </ul>"},{"location":"more/tools/vite.html","title":"Vite","text":""},{"location":"more/tools/vite.html#env-variables-and-modes","title":"Env Variables and Modes","text":""},{"location":"more/tools/vite.html#env-variables","title":"Env Variables","text":"<p>Vite exposes env variables on the special import.meta.env object. Some built-in variables are available in all cases:</p> <ul> <li><code>import.meta.env.MODE</code></li> <li><code>import.meta.env.BASE_URL</code></li> <li><code>import.meta.env.PROD</code></li> <li><code>import.meta.env.DEV</code></li> <li><code>import.meta.env.SSR</code></li> </ul> <pre><code># .env.production\n\nVITE_APP_TITLE=My App\n\n# App.js\n\nconsole.log(import.meta.env.VITE_APP_TITLE)\n</code></pre> <p>This code should be added inside eslintConfig:</p> <pre><code>\"rules\": {\n    \"no-unused-vars\": \"off\"\n}\n</code></pre>"},{"location":"more/tools/vite.html#reference","title":"Reference","text":"<ul> <li>Env Variables and Modes : Vite</li> <li>Vue: disable no-unused-vars error: the simplest fix</li> </ul>"}]}