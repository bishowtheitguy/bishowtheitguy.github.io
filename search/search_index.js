var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#deploying-your-docs","title":"Deploying your docs","text":"<pre><code>my-project/\n    mkdocs.yml\n    docs/\norgname.github.io/\n\n$ cd ../orgname.github.io/\n$ mkdocs gh-deploy --config-file ../&lt;your-repo&gt;/mkdocs.yml --remote-branch &lt;master&gt;\n</code></pre>"},{"location":"index.html#plugins-used","title":"Plugins Used","text":"<ol> <li>MkDocs</li> <li>Material for MkDocs</li> <li>MkDocs GLightbox</li> <li>MkDocs Video</li> </ol>"},{"location":"index.html#suggestion","title":"Suggestion","text":"<ul> <li>best MkDocs plugins</li> <li>Uick Guide: setup essentials</li> </ul>"},{"location":"backend/django-form.html","title":"django form","text":""},{"location":"backend/django-form.html#django-form","title":"Django Form","text":""},{"location":"backend/django-middleware.html","title":"django middleware","text":"<p>Middleware is a framework of hooks into Django\u2019s request/response processing. It\u2019s a light, low-level \u201cplugin\u201d system for globally altering Django\u2019s input or output.</p>"},{"location":"backend/django-middleware.html#reference","title":"Reference","text":"<ul> <li>Django Middleware</li> </ul>"},{"location":"backend/django-view.html","title":"django views","text":"<p>As per Django Documentation,</p> <p>A view function is a Python function that takes a Web request and returns a Web response. This response can be the HTML contents of a Web page, or a redirect, or a 404 error, or an XML document, or an image, anything that a web browser can display.</p> <p></p> <p>Django views roughly correspond to controllers in MVC, and Django templates to views in MVC.</p> <p></p> <p></p>"},{"location":"backend/django-view.html#reference","title":"Reference","text":"<ul> <li>Django Tutorial - geeksforgeeks</li> <li>Django w3schools</li> <li>Django javatpoint</li> <li>Django crud: function based views</li> <li>Django crud: class based views</li> <li>Django project MVT structure</li> <li>Django Tutorial: realPython</li> </ul>"},{"location":"backend/drf-functionbasedviews.html","title":"drf fbv","text":"<p>Django has two types of views;</p> <ul> <li>function-based views (FBVs), &amp;</li> <li>class-based views (CBVs)</li> </ul> <p>Django originally started out with only FBVs, but then added CBVs as a way to templatize functionality so that you didn\u2019t have to write boilerplate (i.e. the same code) code over and over again.</p>"},{"location":"backend/drf-functionbasedviews.html#function-based-views-fbvs","title":"Function-based views (FBVs)","text":"<p>FBVs code here:</p> <p>Todo App (using FBVs)</p> <p>Let's look at how a simple todo application that allows CRUD operations would be written using only FBVs.</p> <pre><code># todo/views.py\n\nfrom django.shortcuts import render, get_object_or_404, redirect\n\nfrom .forms import TaskForm, ConfirmForm\nfrom .models import Task\n\n\ndef task_list_view(request):\n    return render(request, 'todo/task_list.html', {\n        'tasks': Task.objects.all(),\n    })\n\n\ndef task_create_view(request):\n    if request.method == 'POST':\n        form = TaskForm(data=request.POST)\n        if form.is_valid():\n            form.save()\n            return HttpResponseRedirect(reverse('task-list'))\n\n    return render(request, 'todo/task_create.html', {\n        'form': TaskForm(),\n    })\n\n\ndef task_detail_view(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    return render(request, 'todo/task_detail.html', {\n        'task': task,\n    })\n\n\ndef task_update_view(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n\n    if request.method == 'POST':\n        form = TaskForm(instance=task, data=request.POST)\n        if form.is_valid():\n            form.save()\n            return HttpResponseRedirect(reverse('task-detail', args={pk: pk}))\n\n    return render(request, 'todo/task_update.html', {\n        'task': task,\n        'form': TaskForm(instance=task),\n    })\n\n\ndef task_delete_view(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n\n    if request.method == 'POST':\n        form = ConfirmForm(data=request.POST)\n        if form.is_valid():\n            task.delete()\n            return HttpResponseRedirect(reverse('task-list'))\n\n    return render(request, 'todo/task_delete.html', {\n        'task': task,\n        'form': ConfirmForm(),\n    })\n\n</code></pre> <p>You can get the full source code on GitHub.</p>"},{"location":"backend/drf-functionbasedviews.html#class-based-views-cbvs","title":"Class-based views (CBVs)","text":"<p>CBVs code here:</p> <p></p> <p>Todo App (using CBVs)</p> <p>Now, let's rewrite our todo application to only use CBVs:</p> <pre><code># todo/views.py\n\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.views import View\n\nfrom .forms import TaskForm, ConfirmForm\nfrom .models import Task\n\n\nclass TaskListView(View):\n\n    def get(self, request, *args, **kwargs):\n        return render(request, 'todo/task_list.html', {\n            'tasks': Task.objects.all(),\n        })\n\n\nclass TaskCreateView(View):\n\n    def get(self, request, *args, **kwargs):\n        return render(request, 'todo/task_create.html', {\n            'form': TaskForm(),\n        })\n\n    def post(self, request, *args, **kwargs):\n        form = TaskForm(data=request.POST)\n        if form.is_valid():\n            task = form.save()\n            return redirect('task-detail', pk=task.pk)\n\n        return self.get(request)\n\n\nclass TaskDetailView(View):\n\n    def get(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n\n        return render(request, 'todo/task_detail.html', {\n            'task': task,\n        })\n\n\nclass TaskUpdateView(View):\n\n    def get(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        return render(request, 'todo/task_update.html', {\n            'task': task,\n            'form': TaskForm(instance=task),\n        })\n\n    def post(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        form = TaskForm(instance=task, data=request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('task-detail', pk=task.pk)\n\n        return self.get(request, pk)\n\n\nclass TaskDeleteView(View):\n\n    def get(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        return render(request, 'todo/task_confirm_delete.html', {\n            'task': task,\n            'form': ConfirmForm(),\n        })\n\n    def post(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        form = ConfirmForm(data=request.POST)\n        if form.is_valid():\n            task.delete()\n            return redirect('task-list')\n\n        return self.get(request, pk)\n\n</code></pre> <p>Also, let's not forget to make our urls.py call <code>as_view()</code>:</p> <pre><code># todo/urls.py\n\nfrom django.urls import path\n\nfrom .views import TaskListView, TaskDetailView, TaskCreateView, TaskUpdateView, TaskDeleteView\n\n\nurlpatterns = [\n    path('', TaskListView.as_view(), name='task-list'),\n    path('create/', TaskCreateView.as_view(), name='task-create'),\n    path('&lt;int:pk&gt;/', TaskDetailView.as_view(), name='task-detail'),\n    path('update/&lt;int:pk&gt;/', TaskUpdateView.as_view(), name='task-update'),\n    path('delete/&lt;int:pk&gt;/', TaskDeleteView.as_view(), name='task-delete'),\n]\n\n</code></pre> <p>You can get the full source code on Github</p>"},{"location":"backend/drf-functionbasedviews.html#djangos-generic-cbvs","title":"Django's Generic CBVs","text":"<p>Django's generic CBVs are great for solving common problems like retrieving, creating, modifying, and deleting objects as well as pagination and archive views. They speed up the development process too.</p> <pre><code>from django.views.generic import CreateView\n\n\nclass TaskCreateView(CreateView):\n    model = Task\n    context_object_name = 'task'\n    fields = ('name', 'description', 'is_done')\n    template_name = 'todo/task_create.html'\n\n</code></pre>"},{"location":"backend/drf-functionbasedviews.html#djangos-built-in-cbv-types","title":"Django's Built-in CBV Types","text":""},{"location":"backend/drf-functionbasedviews.html#reference","title":"Reference","text":"<ul> <li>Django : Class Based Views vs Function Based Views</li> <li>Class Based vs Function Based Views \u2013 Which One is Better to Use in Django?</li> <li>Class-based vs Function-based Views in Django</li> <li>What Are Django\u2019s Class-Based Views and How to Use Them Effectively</li> </ul>"},{"location":"backend/drf-viewsets.html","title":"drf viewsets","text":""},{"location":"backend/drf-viewsets.html#djangorestframework","title":"djangorestframework","text":""},{"location":"backend/drf-viewsets.html#drf-views","title":"DRF Views","text":"<p>The essential component of DRF views is the <code>APIView</code> class, which subclasses Django's <code>View</code> class.</p> <p><code>APIView</code> class is a base for all the views that you might choose to use in your DRF application.</p> <p>Whether it be-</p> <ul> <li>function-based views</li> <li>class-based views</li> <li>mixins</li> <li>generic view classes</li> <li>viewsets</li> </ul> <p>they all use the <code>APIView</code> class.</p> <p></p>"},{"location":"backend/drf-viewsets.html#class-based-views","title":"Class-based Views","text":"<p>Class-based views extend the <code>APIView</code> class. With them, you determine how requests will be handled and which policy attributes you're going to use.</p> <pre><code>from rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass DeleteAllItems(APIView):\n    def delete(self, request):\n        Item.objects.all().delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n</code></pre>"},{"location":"backend/drf-viewsets.html#policy-attributes","title":"Policy Attributes","text":"<p>If you want to override the default settings for your class-based views, you can use <code>policy attributes</code>.</p> <p>In the following example, we changed the permissions and how a response is rendered with the <code>permission_classes</code> and <code>renderer_classes</code> policy attributes:</p> <pre><code>from rest_framework.permissions import IsAuthenticated\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass ItemsNotDone(APIView):\n\n    permission_classes = [IsAuthenticated]  # policy attribute\n    renderer_classes = [JSONRenderer]       # policy attribute\n\n    def get(self, request):\n\n        user_count = Item.objects.filter(done=False).count()\n        content = {'not_done': user_count}\n\n        return Response(content)\n</code></pre>"},{"location":"backend/drf-viewsets.html#function-based-views","title":"Function-based Views","text":"<p>There are two ways to directly implement <code>APIView</code>: With a function or with a class. If you're writing a view in the form of a function, you'll need to use the <code>@api_view</code> decorator.</p> <p><code>@api_view</code> is a decorator that converts a <code>function-based</code> view into an APIView subclass (thus providing the <code>Response</code> and <code>Request</code> classes). It takes a list of allowed methods for the view as an argument.</p> <pre><code>from rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\n@api_view(['DELETE'])\ndef delete_all_items(request):\n    Item.objects.all().delete()\n    return Response(status=status.HTTP_200_OK)\n</code></pre>"},{"location":"backend/drf-viewsets.html#policy-decorators","title":"Policy Decorators","text":"<p>If you want to override the default settings for your function-based view, you can use policy decorators. You can use one or multiple of the following</p> <ul> <li><code>@renderer_classes</code></li> <li><code>@parser_classes</code></li> <li><code>@authentication_classes</code></li> <li><code>@throttle_classes</code></li> <li><code>@permission_classes</code></li> </ul> <p>Those decorators correspond to APIView subclasses. Because the <code>@api_view</code> decorator checks if any of the following decorators are used, they need to be added below the <code>api_view</code> decorator.</p> <pre><code>from rest_framework.decorators import api_view, permission_classes, renderer_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.response import Response\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])  # policy decorator\n@renderer_classes([JSONRenderer])       # policy decorator\ndef items_not_done(request):\n    user_count = Item.objects.filter(done=False).count()\n    content = {'not_done': user_count}\n\n    return Response(content)\n</code></pre>"},{"location":"backend/drf-viewsets.html#viewsets","title":"ViewSets","text":"<p>A ViewSet class is simply a type of <code>class-based View</code>.</p> <p>There are four types of ViewSets, from the most basic to the most powerful:</p> <ol> <li>ViewSet</li> <li>GenericViewSet</li> <li>ReadOnlyModelViewSet</li> <li>ModelViewSet</li> </ol>"},{"location":"backend/drf-viewsets.html#reference","title":"Reference","text":"<ul> <li>Django REST Framework Views - ViewSets</li> <li>viewsets - django-rest-framework.org</li> </ul>"},{"location":"backend/jwt-guide.html","title":"jwt installation","text":""},{"location":"backend/jwt-guide.html#jwt","title":"jwt","text":""},{"location":"backend/jwt-guide.html#virtual-env","title":"Virtual env","text":"<pre><code>$ python -m venv venv\n$ cd venv/Scripts\n$ activate\n</code></pre>"},{"location":"backend/jwt-guide.html#installation","title":"Installation","text":"<pre><code>$ pip install django\n\n$ pip install djangorestframework\n$ pip install markdown\n$ pip install django-filter\n\n$ pip install djangorestframework-simplejwt\n\n# pip install python-dotenv\n\n$ pip install mysqlclient\n</code></pre>"},{"location":"backend/jwt-guide.html#installed-apps","title":"Installed apps","text":"<pre><code>INSTALLED_APPS = [\n    ...'\n    'rest_framework',\n    'rest_framework_simplejwt',\n    ...\n]\n</code></pre>"},{"location":"backend/jwt-guide.html#env-example","title":".env example","text":"<pre><code>SECRET_KEY=\"\"\nDB_NAME=django_db\nDB_USER=root\nDB_PASS=\nDB_HOST=localhost\nDB_PORT=3308\n</code></pre>"},{"location":"backend/jwt-guide.html#project-settings","title":"Project Settings","text":"<pre><code># settings.py\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\nSECRET_KEY = os.environ.get('SECRET_KEY')\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': os.environ.get('DB_NAME'), #here\n        'USER': os.environ.get('DB_USER'), #here\n        'PASSWORD': os.environ.get('DB_PASS'), #here\n        'HOST': '127.0.0.1',\n        'PORT': '3306',\n        'OPTIONS': {'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\"},\n    }\n}\n\n# Add\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n}\n</code></pre>"},{"location":"backend/jwt-guide.html#reference","title":"Reference","text":"<ul> <li>Django Environment - python-dotenv</li> <li>python-dotenv</li> <li>Generating Secret key in django app</li> <li>mkdocs dropdown - github</li> <li>mkdocs dropdown - stackoverflow </li> </ul>"},{"location":"backend/jwt-installation.html","title":"jwt guide","text":""},{"location":"backend/jwt-installation.html#jwt","title":"JWT","text":""},{"location":"backend/jwt-installation.html#django","title":"Django","text":"<pre><code>// Installation\n\n$ pip install django\n</code></pre>"},{"location":"backend/jwt-installation.html#django-rest-framework","title":"Django REST framework","text":"<pre><code>// Installation\n\n$ pip install djangorestframework\n$ pip install markdown\n$ pip install django-filter \n\n$ pip install djangorestframework, markdown, django-filter\n</code></pre>"},{"location":"backend/jwt-installation.html#installed-apps","title":"Installed Apps","text":"<pre><code>// you have to add 'rest_framework' to your INSTALLED_APPS setting.\n\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n]\n</code></pre>"},{"location":"backend/jwt-installation.html#simple-jwt","title":"Simple JWT","text":"<p>Simple JWT provides a JSON Web Token authentication backend for the Django REST Framework. A JSON Web Token authentication plugin for the Django REST Framework.</p>"},{"location":"backend/jwt-installation.html#_1","title":"jwt guide","text":"<pre><code>// Installation\n\n$ pip install djangorestframework-simplejwt\n</code></pre> <pre><code>// add rest_framework_simplejwt to INSTALLED_APPS.\n\nINSTALLED_APPS = [\n    ...\n    'rest_framework_simplejwt',\n    ...\n]\n</code></pre>"},{"location":"backend/jwt-installation.html#project-configuration","title":"Project Configuration","text":"<p>Then, your django project must be configured to use the library. In <code>settings.py</code>, add <code>rest_framework_simplejwt.authentication.JWTAuthentication</code> to the list of authentication classes:</p> <pre><code>REST_FRAMEWORK = {\n    ...\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        ...\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n    ...\n}\n</code></pre> <p>Also, in your root <code>urls.py</code> file (or any other url config), include routes for Simple JWT\u2019s <code>TokenObtainPairView</code> and <code>TokenRefreshView</code> views:</p> <pre><code>from rest_framework_simplejwt.views import (\n    TokenObtainPairView,\n    TokenRefreshView,\n)\n\nurlpatterns = [\n    ...\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    ...\n]\n</code></pre> <ul> <li>Simple JWT</li> </ul>"},{"location":"backend/python-dotenv.html","title":"python dotenv","text":""},{"location":"backend/python-dotenv.html#python-dotenv","title":"Python-dotenv","text":"<p>Python-dotenv reads key-value pairs from a .env file and can set them as environment variables</p> <pre><code>$ pip install python-dotenv\n</code></pre> <pre><code>// .env.example\n\n\n</code></pre> <ul> <li>python-dotenv</li> </ul>"},{"location":"backend/python-microservices.html","title":"python microservices","text":""},{"location":"backend/python-microservices.html#python-questions","title":"Python Questions","text":""},{"location":"backend/python-microservices.html#topics","title":"Topics","text":"<ul> <li>What are Microservices?</li> <li>Project Introduction</li> <li>Django Setup</li> <li>Adding Docker Files</li> <li>Connect Django with MySQL with Docker</li> <li>Models &amp; Serializers</li> <li>Rest APIs with ViewSets</li> <li>User Endpoint with APIView</li> <li>Flask Setup with Docker</li> <li>Connect Flask with Mysql</li> <li>Models</li> <li>Flask Migrations</li> <li>RabbitMQ</li> <li>Django Producer and Consumer</li> <li>Flask Producer and Consumer</li> <li>Queue Service</li> <li>Data Consistency</li> <li>Internal Http Requests</li> <li>Finishing the python apps</li> <li>React Setup</li> <li>Products CRUD</li> <li>Completing the Main App</li> </ul> <ul> <li>Learn About Python Microservices - freecodecamp</li> <li>Python Microservices Web App - Full Course (youtube)</li> <li>Microservices in Python: Django, RabbitMQ and Pika</li> <li>Building Scalable Applications with Django, Celery, and RabbitMQ: A Step-by-Step Guide</li> </ul>"},{"location":"backend/python-mysqlclient.html","title":"mysqlclient","text":""},{"location":"backend/python-mysqlclient.html#_1","title":"mysqlclient","text":"<pre><code>$ pip install mysqlclient\n</code></pre> <ul> <li>mysqlclient </li> </ul>"},{"location":"backend/slides.html","title":"Backend","text":""},{"location":"backend/slides.html#presentation","title":"Presentation","text":""},{"location":"books/tech-books.html","title":"tech books","text":""},{"location":"books/tech-books.html#technology-books","title":"Technology Books","text":""},{"location":"books/tech-books.html#reference","title":"Reference","text":"<ul> <li>Tech Books :github.com</li> </ul>"},{"location":"certification/python-certification.html","title":"python pcep","text":"<p>PCEP\u2122 \u2013 Certified Entry-Level Python Programmer</p> <p></p>"},{"location":"certification/python-certification.html#reference","title":"Reference","text":"<ul> <li>python certification: pcep</li> </ul>"},{"location":"frontend/guides.html","title":"react guides","text":""},{"location":"frontend/guides.html#reference","title":"Reference","text":"<p>LinkedIn React Post</p>"},{"location":"frontend/react-hooks.html","title":"react hooks","text":""},{"location":"frontend/react-hooks.html#reference","title":"Reference","text":"<ul> <li>Learn core Redux \u2014 The easiest way you can imagine</li> <li> <p>Redux Toolkit \u2014 The cheat sheet for Redux development</p> </li> <li> <p>React Hooks cheat sheet: Best practices with examples</p> </li> <li> <p>React Hooks Cheat Sheet</p> </li> <li> <p>React Hooks Cheatsheet \u2014 Most commonly used hooks in ReactJS</p> </li> <li> <p>The React Cheatsheet for 2021 (+ Real-World Examples)</p> </li> </ul>"},{"location":"frontend/react-router.html","title":"react router","text":""},{"location":"frontend/react-router.html#router","title":"Router","text":"<pre><code>// Installation\n\n$ pnpm install react-router-dom\n</code></pre>"},{"location":"frontend/react-router.html#how-to-install-react-router","title":"How to Install React Router?","text":"<p>React router contains 3 different packages for routing.</p> <ul> <li><code>react-router</code>: contains most of the core functionality of React Router including the route matching algorithm and most of the core components and react hooks</li> <li><code>react-router-native</code>: It is designed for mobile applications.</li> <li><code>react-router-dom</code>: It is designed for web applications.</li> </ul>"},{"location":"frontend/react-router.html#components-in-react-router","title":"Components in React Router","text":"<p>React router components are divided into 3 main categories -</p> <ul> <li><code>Routers</code> - for instance, <code>&lt;BrowserRouter&gt;</code> and <code>&lt;HashRouter&gt;</code> components</li> <li><code>Route matchers</code> - for instance, <code>&lt;Routes&gt;</code> and <code>&lt;Route&gt;</code> components</li> <li><code>Navigation</code> \u2013 for instance, <code>&lt;Link&gt;</code> and <code>&lt;NavLink&gt;</code> components</li> </ul> <p></p>"},{"location":"frontend/react-router.html#code","title":"Code","text":"<pre><code>import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    &lt;Router&gt;\n      &lt;Navbar /&gt;\n      &lt;Switch&gt;\n        &lt;Route exact path=\"/\" component={Home} /&gt;\n        &lt;Route path=\"/about\" component={About} /&gt;\n      &lt;/Switch&gt;\n    &lt;/Router&gt;\n  );\n}\n</code></pre>"},{"location":"frontend/react-router.html#redirect-component","title":"Redirect Component","text":"<pre><code>import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    &lt;Router&gt;\n      &lt;Switch&gt;\n        &lt;Route exact path=\"/\" component={Home} /&gt;\n        &lt;PrivateRoute path=\"/hidden\" component={Hidden} /&gt;\n      &lt;/Switch&gt;\n    &lt;/Router&gt;\n  );\n}\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n  // useAuth is some custom hook to get the current user's auth state\n  const isAuth = useAuth();\n\n  return (\n    &lt;Route\n      {...rest}\n      render={(props) =&gt;\n        isAuth ? &lt;Component {...props} /&gt; : &lt;Redirect to=\"/\" /&gt;\n      }\n    /&gt;\n  );\n}\n\nfunction Home() {\n  return &lt;&gt;home&lt;/&gt;;\n}\n\nfunction Hidden() {\n  return &lt;&gt;hidden&lt;/&gt;;\n}\n</code></pre> <p>The redirect component is very simple to use, very declarative, and allows us to see the great benefit of React Router DOM being component-based, just like everything in React.</p>"},{"location":"frontend/react-router.html#react-router-hooks","title":"React Router Hooks","text":"<ul> <li>useHistory Hook</li> <li>useLocation Hook</li> <li>useParams Hook + Dynamic Routes</li> <li>useRouteMatch Hook</li> </ul> <pre><code>import { useHistory } from \"react-router-dom\";\n\n\nfunction About() {\n  const history = useHistory();\n\n  console.log(history.location.pathname); // '/about'\n\n  return (\n    &lt;&gt;\n     &lt;h1&gt;The about page is on: {history.location.pathname}&lt;/h1&gt;\n     &lt;button onClick={() =&gt; history.push('/')}&gt;Go to home page&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"frontend/react-router.html#upgrading-fro-v5-to-v6","title":"Upgrading fro <code>v5</code> to <code>v6</code>","text":"<ul> <li>Upgrade all <code>&lt;Switch&gt;</code> elements to <code>&lt;Routes&gt;</code></li> <li>Use <code>useNavigate</code> instead of <code>useHistory</code></li> <li>Replace <code>useRouteMatch</code> with <code>useMatch</code></li> </ul> <p>Replacing Switch component with Routes</p> <pre><code>// old with Switch\n\nexport function App() {\n  return (\n    &lt;div&gt;\n      &lt;Switch&gt;\n        &lt;Route path=\"/about\"&gt;\n          &lt;AboutPage /&gt;\n        &lt;/Route&gt;\n        &lt;Route exact path=\"/profile\"&gt;\n          &lt;ProfilePage /&gt;\n        &lt;/Route&gt;\n        &lt;Route path=\"/profile/:id\"&gt;\n          &lt;ProfileUserPage /&gt;\n        &lt;/Route&gt;\n      &lt;/Switch&gt;\n    &lt;/div&gt;\n  )\n}\n\n// new with Routes\n\nexport function App() {\n  return (\n    &lt;div&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/about\" element={&lt;AboutPage /&gt;} /&gt;\n        &lt;Route exact path=\"/profile\" element={&lt;ProfilePage /&gt;} /&gt;\n        &lt;Route path=\"/profile/:id\" element={&lt;ProfileUserPage /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/div&gt;\n  )\n}\n\n</code></pre> <p>Internal changes &amp; path evaluation (no more needed exact prop) For V5 we needed to put the exact prop on the component to go for that specific route we want</p> <pre><code>// old\n\nexport function App() {\n  return (\n    &lt;div&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/about\" element={&lt;AboutPage /&gt;} /&gt;\n        &lt;Route exact path=\"/profile\" element={&lt;ProfilePage /&gt;} /&gt;\n        &lt;Route path=\"/profile/:id\" element={&lt;ProfileUserPage /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/div&gt;\n  )\n}\n\n// new\nexport function App() {\n  return (\n    &lt;div&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/about\" element={&lt;AboutPage /&gt;} /&gt;\n        &lt;Route path=\"/profile\" element={&lt;ProfilePage /&gt;} /&gt;\n        &lt;Route path=\"/profile/:id\" element={&lt;ProfileUserPage /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"frontend/react-router.html#history","title":"History","text":"<pre><code>$ npm i history\n</code></pre> <p>There are three types of history</p> <ul> <li>browser</li> <li>hash</li> <li>memory</li> </ul> <pre><code>import {\n  createBrowserHistory,\n  createHashHistory,\n  createMemoryHistory\n} from 'history'\n</code></pre> <p>If you are using React Router, it can automatically create history objects for you, so you may never have to actually interact with history directly. Still, it is important to understand the differences between each type of history so that you can determine which one is right for your project.</p>"},{"location":"frontend/react-router.html#reference","title":"Reference","text":"<ul> <li>React router overview</li> <li>React Router - Types, Mechanism, Installation And Examples</li> <li>The React Router Cheatsheet \u2013 Everything You Need to Know - (BEST)</li> <li>Using Hashrouter With React - Definitive Guide</li> <li>What is Hash Routing?</li> <li>upgrading v5 - v6: oficial doc</li> <li>React router V6: Some of the new changes </li> <li>A little bit of history - npm</li> <li>history - npm</li> </ul>"},{"location":"frontend/redux-middleware.html","title":"redux middleware","text":"<p>Redux Middleware is code that lets us intercept redux actions before they reach the reducer. <code>redux-thunk</code> is an example of Redux Middleware, along with other popular <code>redux</code> libraries like <code>redux-logger</code> , <code>redux-promise-middleware</code> , and <code>redux-saga</code> (an alternative to <code>redux-thunk</code> ).</p> <p></p>"},{"location":"frontend/redux-middleware.html#redux-thunk-gives-redux-side-effects","title":"Redux Thunk Gives Redux Side-Effects","text":"<p>In <code>redux</code>, actions creators are functions that return an action, which is a plain javascript objects with a <code>type</code> property.</p> <ul> <li><code>redux-thunk</code> is a Redux Middleware that lets your action creators return a function called a thunk, instead of an action. </li> <li>This thunk can return an action when invoked but it also has access to the Redux store's <code>dispatch</code> function, meaning it can also dispatch other actions. </li> <li>Typically, API calls are invoked inside these thunks and different actions are dispatched depending on these API responses.</li> </ul> <p>For example, below are two action creators, the first returns a plain redux action. The second returns a <code>thunk</code>, thanks to <code>redux-thunk</code>.</p> <pre><code>// action creators\n\n// Action Creator returns action\nloadUser = (userData) =&gt; ({\n  type: \"LOAD_USER_DATA\", userData\n})\n\n/* \n  Action Creator which returns function which dispatches other actions\n*/\nfetchUser = (usersUrl) =&gt; (dispatch) =&gt; {\n  dispatch({ type: \"DISPLAY_LOADING_SCREEN\" })\n\n  return fetch(usersUrl)\n    .then(response =&gt; response.json())\n    .then((json) =&gt; {\n      if (json.success) {\n        dispatch({ type: \"LOAD_USER_DATA\", json.userData })\n      } else {\n        dispatch({ type: \"LOAD_USER_FAILED\" })\n      }\n    })\n}\n</code></pre>"},{"location":"frontend/redux-middleware.html#summary","title":"Summary","text":"<ul> <li><code>redux-thunk</code> lets us create actions which are functions that can dispatch other functions instead of just objects.</li> <li><code>redux-thunk</code> is an example of Redux Middleware and as such, needs to adhere to the Redux Middleware signature of <code>validMiddleware =&gt; (store) =&gt; (next) =&gt; (action)</code></li> <li>The core logic of <code>redux-thunk</code> is essentially a simple if statement that checks if the action is a thunk (ie. a function) and invokes it if it is. By default, it exports the Middleware with no <code>extraArgument</code> but it then attaches the <code>createThunkMiddleware</code> function onto the exported Middleware to be used if needed.</li> </ul>"},{"location":"frontend/redux-middleware.html#reference","title":"Reference","text":"<ul> <li>Understanding redux thunk</li> <li>What is the use of middleware Redux thunk ?</li> </ul>"},{"location":"frontend/rtk-guide.html","title":"rtk guide","text":"<ul> <li>official redux rtk</li> <li>Understanding Redux Toolkit</li> <li>reduxt toolkit</li> </ul>"},{"location":"frontend/slides.html","title":"Frontend","text":""},{"location":"frontend/slides.html#presentation","title":"Presentation","text":""},{"location":"frontend/typescript-compiler.html","title":"compiler","text":""},{"location":"frontend/typescript-compiler.html#typescript-compiler","title":"TypeScript Compiler","text":"<p>TypeScript is transpiled into JavaScript using a compiler.</p> <p>TypeScript being converted into JavaScript means it runs anywhere that JavaScript runs!</p>"},{"location":"frontend/typescript-compiler.html#installing-the-compiler","title":"Installing the Compiler","text":"<p>TypeScript has an official compiler which can be installed through npm.</p> <p>Within your npm project, run the following command to install the compiler:</p> <p>npm install typescript --save-dev</p> <p>You can then run the TypeScript compiler using one of the following commands:</p> <p>npx tsc</p> <p>yarn tsc</p> <p>pnpm tsc</p>"},{"location":"frontend/typescript-compiler.html#globally-installing-typescript","title":"Globally Installing TypeScript","text":"<p>npm install -g typescript</p>"},{"location":"frontend/typescript-compiler.html#configuring-the-compiler","title":"Configuring the compiler","text":"<p>You can have TypeScript create <code>tsconfig.json</code> with the recommended settings with:</p> <p>npx tsc --init</p> <p>Here is an example of more things you could add to the <code>tsconfig.json</code> file:</p> <pre><code>{\n  \"include\": [\"src\"],\n  \"compilerOptions\": {\n    \"outDir\": \"./build\"\n  }\n}\n</code></pre>"},{"location":"frontend/typescript-compiler.html#working-with-typescript-compatible-transpilers","title":"Working with TypeScript-compatible transpilers","text":"<p>There are other tools which convert TypeScript files to JavaScript files</p> <ol> <li>Babel: Babel is a very popular JavaScript transpiler which supports TypeScript files via the plugin @babel/plugin-transform-typescript.</li> <li>swc: swc is a fast transpiler created in Rust which supports many of Babel's features including TypeScript.</li> <li>Sucrase: Sucrase is a Babel fork focused on speed for using in development mode. Sucrase supports TypeScript natively.</li> </ol>"},{"location":"frontend/typescript-compiler.html#reference","title":"Reference","text":"<ul> <li>TypeScript Compiler :w3chools.com</li> </ul>"},{"location":"frontend/typescript-installation.html","title":"installation","text":""},{"location":"frontend/typescript-installation.html#typescript","title":"Typescript","text":""},{"location":"frontend/typescript-installation.html#what-is-typescript","title":"What is TypeScript?","text":"<p>TypeScript is JavaScript with added syntax for types.</p> <p>TypeScript is a syntactic superset of JavaScript which adds static typing.</p> <p>This basically means that TypeScript adds syntax on top of JavaScript, allowing developers to add types.</p> <p>TypeScript being a \"Syntactic Superset\" means that it shares the same base syntax as JavaScript, but adds something to it.</p>"},{"location":"frontend/typescript-installation.html#how-do-i-use-typescript","title":"How do I use TypeScript?","text":"<p>A common way to use TypeScript is to use the official TypeScript compiler, which transpiles TypeScript code into JavaScript.</p> <p>The next section shows how to get the compiler setup for a local project.</p> <p>Some popular code editors, such as Visual Studio Code, have built-in TypeScript support and can show errors as you write code!</p> <p>TypeScript uses compile time type checking. Which means it checks if the specified types match before running the code, not while running the code.</p> <p>TypeScript allows developers to add types to JavaScript.</p>"},{"location":"frontend/typescript-installation.html#reference","title":"Reference","text":"<ul> <li>TypeScript Tutorial: w3schools.com</li> </ul>"},{"location":"interviewquestion/django.html","title":"DJANO Interview Question","text":""},{"location":"interviewquestion/javascript.html","title":"JavaScript","text":"<p>Core Begineer</p>"},{"location":"interviewquestion/javascript.html#1-difference-between-defer-and-async-attributes-in-javascript","title":"1. Difference between <code>defer</code> and <code>async</code> attributes in JavaScript?","text":"<p>The main difference between defer and async is the order of execution.</p> <p>Defer attribute</p> <p>A <code>&lt;script&gt;</code> element with a <code>defer</code> attribute, it will continue to load the HTML page and render it while the script is being downloaded. The script is executed after the HTML page has been completely parsed. <code>defer</code> scripts maintain their order in the document.</p> <pre><code>&lt;script defer src=\"script1.js\"&gt;&lt;/script&gt;\n&lt;script defer src=\"script2.js\"&gt;&lt;/script&gt;\n</code></pre> <p>In the example above, <code>script1.js</code> will be executed before <code>script2.js</code>. The browser will download both scripts in parallel, but <code>script1.js</code> will be executed after the HTML page has been parsed and <code>script2.js</code> will be executed after script1.js has been executed.</p> <p>Async attribute</p> <p>On the other hand, A <code>&lt;script&gt;</code> element with an <code>async</code> attribute, it will pause the HTML parser and execute the script immediately after it has been downloaded. The HTML parsing will resume after the script has been executed.</p> <pre><code>&lt;script async src=\"script1.js\"&gt;&lt;/script&gt;\n&lt;script async src=\"script2.js\"&gt;&lt;/script&gt;\n</code></pre> <p>In the example above, the browser will download both scripts in parallel, and execute them as soon as they are downloaded. The order of execution is not guaranteed.</p> <p>To know more you can check this diagram from us that explains the difference between <code>defer</code> and <code>async</code> in a visual way.</p>"},{"location":"interviewquestion/javascript.html#2-is-it-possible-to-run-javascript-outside-the-browser","title":"2. Is it possible to run JavaScript outside the browser?","text":"<p>Yes, it is possible to run JavaScript outside the browser. There are several ways to run JavaScript outside the browser. You can use Node.js, Deno, Bun, or any other JavaScript runtime environment.</p>"},{"location":"interviewquestion/javascript.html#3-how-to-parse-json-in-javascript","title":"3. How to parse JSON in JavaScript?","text":"<p>In order to parse JSON, you can use the <code>JSON.parse()</code> method. It parses a JSON string and returns the JavaScript equivalent.</p> <pre><code>const json = '{\"name\":\"JavaScript\",\"year\":1995}';\nconst roadmap = JSON.parse(json);\n\nconsole.log(roadmap.name); // JavaScript\nconsole.log(roadmap.year); // 1995\n</code></pre> <p>Core\u00b7Intermediate</p>"},{"location":"interviewquestion/javascript.html#1-what-is-ternary-operator-in-javascript","title":"1. What is ternary operator in JavaScript?","text":"<p>The ternary operator is a conditional operator that takes three operands. It is frequently used as a shortcut for the if statement.</p> <pre><code>console.log(condition ? true : false);\n</code></pre>"},{"location":"interviewquestion/javascript.html#2-does-map-method-mutate-the-original-array","title":"2. Does <code>map()</code> method mutate the original array?","text":"<p>No, the <code>map() method</code> does not mutate the original array. It returns a new array with the results of calling a provided function on every element in the calling array.</p> <pre><code>const roadmaps = ['JavaScript', 'React', 'Node.js'];\n\nconst renamedRoadmaps = roadmaps.map((roadmap) =&gt; {\n  return `${roadmap} Roadmap`;\n});\n\nconsole.log(roadmaps); // ['JavaScript', 'React', 'Node.js']\nconsole.log(renamedRoadmaps); // ['JavaScript Roadmap', 'React Roadmap', 'Node.js Roadmap']\n</code></pre>"},{"location":"interviewquestion/javascript.html#3-what-is-the-difference-between-map-and-foreach-methods","title":"3. What is the difference between <code>map()</code> and <code>forEach()</code> methods?","text":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in the calling array. </p> <p>Whereas, the <code>forEach()</code> method executes a provided function once for each array element.</p>"},{"location":"interviewquestion/javascript.html#4-does-foreach-method-return-a-new-array","title":"4. Does <code>forEach()</code> method return a new array?","text":"<p>No, the <code>forEach()</code> method does not return a new array. It simply calls a provided function on each element in the array.</p> <pre><code>const roadmaps = ['JavaScript', 'React', 'Node.js'];\n\nroadmaps.forEach((roadmap) =&gt; {\n  console.log(roadmap);\n});\n</code></pre>"},{"location":"interviewquestion/javascript.html#5-what-is-the-difference-between-map-and-reduce-methods","title":"5. What is the difference between <code>map()</code> and <code>reduce()</code> methods?","text":"<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in the calling array. </p> <p>Whereas,  the <code>reduce()</code> method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.</p>"},{"location":"interviewquestion/javascript.html#6-how-to-use-reduce-method","title":"6. How to use <code>reduce()</code> method?","text":"<p>You can use the <code>reduce()</code> method to reduce an array to a single value. The <code>reduce()</code> method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.</p> <p>Syntax</p> <pre><code>array.reduce((accumulator, currentValue) =&gt; {\n  // ...\n}, initialValue);\n</code></pre> <p>Example</p> <p>You can use the <code>reduce()</code> method to sum all the numbers in an array.</p> <pre><code>const numbers = [1, 2, 3, 4, 5, 6];\n\nconst sum = numbers.reduce((accumulator, currentValue) =&gt; {\n  return accumulator + currentValue;\n}, 0);\n\nconsole.log(numbers); // [1, 2, 3, 4, 5, 6]\nconsole.log(sum); // 21\n</code></pre>"},{"location":"interviewquestion/javascript.html#7-can-you-merge-multiple-arrays-in-javascript","title":"7. Can you merge multiple arrays in JavaScript?","text":"<p>Yes, you can merge multiple arrays into one array using the <code>concat()</code> method, or the spread operator <code>....</code></p> <p>concat()</p> <p>The <code>concat()</code> method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.</p> <pre><code>const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\n\nconst arr3 = arr1.concat(arr2);\nconsole.log(arr3); // [1, 2, 3, 4, 5, 6]\n</code></pre> <p>Spread operator</p> <p>The spread operator <code>...</code> is used to expand an iterable object into the list of arguments.</p> <pre><code>const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\n\nconst arr3 = [...arr1, ...arr2];\nconsole.log(arr3); // [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"interviewquestion/javascript.html#8-what-is-the-spread-operator-in-javascript","title":"8. What is the spread operator in JavaScript?","text":"<p>The spread operator in JavaScript is represented by three dots (...). It allows the elements of an array or properties of an object to be expanded or \"spread\" into individual elements or properties. This can be useful in various contexts, such as when passing elements as function arguments, cloning arrays and objects, or merging arrays and objects.</p> <pre><code>const roadmaps = ['JavaScript', 'React', 'Node.js'];\nconst bestPractices = ['AWS', 'API Security'];\n\nconst resources = [...roadmaps, ...bestPractices];\nconsole.log(resources); \n// ['JavaScript', 'React', 'Node.js', 'AWS', 'API Security']\n</code></pre> <pre><code>const roadmap = {\n  name: 'JavaScript',\n  type: 'dynamic',\n};\n\nconst roadmapClone = { ...roadmap }; // shallow copy\nconsole.log(roadmapClone); // { name: 'JavaScript', type: 'dynamic' }\n</code></pre> <p>Core Advanced</p>"},{"location":"interviewquestion/javascript.html#1-garbage-collection-in-javascript","title":"1. Garbage collection in JavaScript?","text":"<p>The JavaScript engine uses automatic garbage collection.  JavaScript automatically manages memory by freeing up space used by objects no longer needed.  This algorithm is called Mark and Sweep, which is performed periodically by the JavaScript engine.</p>"},{"location":"interviewquestion/javascript.html#2-what-are-heap-and-stack-in-javascript","title":"2. What are Heap and Stack in JavaScript?","text":"<p>The Heap and Stack in JavaScript Engine are two different data structures that store data in different ways.</p> <p>Stack</p> <p>The Stack is a small, organized region of memory. It is where primitive values, function calls, and local variables are stored. It follows a \"Last In, First Out\" (LIFO) order, meaning that the last item added to the stack is the first one to be removed. Each function invocation creates a new stack frame, which contains the function's local variables, return address, and other contextual data.</p> <p>Heap</p> <p>The Heap is a large, mostly unstructured region of memory. It is where <code>objects</code>, <code>arrays</code>, and <code>functions</code> are stored. Variables from the Stack (e.g., in functions) point to locations in the Heap for these dynamically allocated structures.</p> <p>When you declare a primitive type (like a number or boolean), it's usually managed in the stack. But when you create an object, array, or function, it's stored in the heap, and the stack will hold a reference to that location in the heap.</p> <p>For example:</p> <pre><code>// Stored on the stack\nconst name = 'JavaScript'; \n\n// `roadmap` reference on the stack, actual object { name: 'JS' } in the heap\nconst roadmap = { name: 'JS' }; \n</code></pre> <p>In the code above, the primitive value <code>JavaScript</code> for variable <code>name</code> is directly stored on the stack. For the object assigned to <code>roadmap</code>, its actual data resides in the heap, and the reference to this data (a memory address pointer) is held on the stack.</p> <p>Function Advanced</p>"},{"location":"interviewquestion/javascript.html#1-what-is-iife-in-javascript","title":"1. What is IIFE in JavaScript?","text":"<p>The IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined.</p> <pre><code>(function () {\n  console.log('Hello Roadmap!');\n})();\n</code></pre> <p>The IIFE is frequently used to create a new scope to avoid variable hoisting from within blocks.</p> <pre><code>(function () {\n  var roadmap = 'JavaScript';\n  console.log(roadmap);\n})();\n\nconsole.log(roadmap); // ReferenceError: name is not defined\n</code></pre> <p>Operator Beginner</p>"},{"location":"interviewquestion/javascript.html#1-what-is-nullish-coalescing-operator","title":"1. What is Nullish Coalescing Operator?","text":"<p>The Nullish Coalescing Operator (<code>??</code>) returns the right operand if the left one is <code>null</code> or <code>undefined</code>, otherwise, it returns the left operand. It's useful for setting default values without considering falsy values like <code>0</code> or <code>''</code> as absent.</p> <pre><code>console.log(null ?? 'hello'); // hello\nconsole.log(undefined ?? 'hello'); // hello\nconsole.log('' ?? 'hello'); // ''\nconsole.log(0 ?? 'hello'); // \n</code></pre> <p>DOM Beginner</p>"},{"location":"interviewquestion/javascript.html#1-how-to-measure-dimensions-of-an-element","title":"1. How to measure dimensions of an Element?","text":"<p>You can use <code>getBoundingClientRect</code> method to get the dimensions of an element.</p> <pre><code>const roadmapWrapper = document.querySelector('.roadmap-wrapper');\nconst dimensions = roadmapWrapper.getBoundingClientRect();\n\nconsole.log(dimensions); \n// DOMRect { x: 8, y: 8, width: 784, height: 784, top: 8, right: 792, bottom: 792, left: 8 }\n</code></pre>"},{"location":"interviewquestion/javascript.html#2-how-to-get-viewport-dimensions-in-javascript","title":"2. How to get viewport dimensions in JavaScript?","text":"<p>You can use <code>window.innerWidth</code> and <code>window.innerHeight</code> to get the viewport dimensions.</p>"},{"location":"interviewquestion/javascript.html#3-how-to-scroll-to-the-top-of-the-page-using-javascript","title":"3. How to scroll to the top of the page using JavaScript?","text":"<p>In order to scroll to the top of the page, we can use the <code>scrollTo</code> method.</p> <pre><code>window.scrollTo(0, 0);\n</code></pre>"},{"location":"interviewquestion/javascript.html#reference","title":"Reference","text":"<ul> <li>roadmap.sh/questions/javascript</li> </ul>"},{"location":"interviewquestion/react.html","title":"React","text":"<p>Core Advanced</p>"},{"location":"interviewquestion/react.html#1-what-is-reconciliation-in-react","title":"1. What is Reconciliation in React ?","text":"<p>Reconciliation is the process through which React updated the DOM by comparing the newly returned elements with the previously rendered ones.</p> <p>React updates the DOM when a component's state changes.</p>"},{"location":"interviewquestion/react.html#2-what-is-react-fiber","title":"2. What is React Fiber ?","text":"<p>React Fiber is the reconciliation engine that replaced the core algorithm in React v16.</p> <p>It is a rewrite of the core algorighm, responsible for scheduling what get rendered on screen.</p> <p>It is a set of algorithms for efficiently updating the UI.</p>"},{"location":"interviewquestion/react.html#3-explain-the-concept-of-error-boundaries-in-react","title":"3. Explain the concept of error boundaries in React.","text":"<p>Error boundaries are special React components that catch JavaScript errors during rendering, in lifecycle methods, and during the constructor of whole tree below them.</p> <p>You can use <code>react-error-boundary</code> package to create error boundaries in your application.</p> <pre><code># Installation\n$ npm i react-error-boundary\n</code></pre> <p>Core Intermediate</p>"},{"location":"interviewquestion/react.html#1-what-is-the-high-order-components-hocs","title":"1. What is the High-Order Components (HOCs)?","text":"<p>A High-Order Components (HOCs) is a function that takes a component and returns a new component.</p> <p>Basically, it's a pattern that is derived from React Compositional nature.</p> <p>High-order components are not part of the React API. They are the pattern that emerges from React Compositional nature.</p>"},{"location":"interviewquestion/react.html#2-how-react-virtual-dom-works","title":"2. How React Virtual DOM works?","text":"<p>Virtual DOM works in this steps:</p> <ul> <li>Whenever any underlying data changes, new virtual DOM representation will be created.</li> <li>Then the difference between the previous DOM representation and the new one is calculated.</li> <li>Once the calculations are done, the real DOM will be updated with only the things that have actually changed.</li> </ul>"},{"location":"interviewquestion/react.html#3-what-is-the-purpose-of-the-useeffect-hook-in-react","title":"3. What is the purpose of the <code>useEffect</code> hook in React?","text":"<p>The useEffect hook in React is used for performing side effects in functional components. Side effects can include data fetching, DOM manipulation, and subscribing to external data sources.</p> <p>Core Beginner</p>"},{"location":"interviewquestion/react.html#1-what-is-the-naming-convention-for-react-components","title":"1. What is the naming convention for React components?","text":"<p>In React, the naming convention for components is to use PascalCase, meaning the first letter of each word in the component's name should be capitalized. </p> <p>For example, <code>UserProfile</code>, <code>SidebarItem</code>, or <code>NavigationMenu</code>. This convention differentiates custom React components from regular HTML tags in JSX, as React treats elements starting with a lowercase letter as DOM tags and those starting with a capital letter as custom components.</p>"},{"location":"interviewquestion/react.html#2-what-is-the-difference-between-class-components-and-function-components","title":"2. What is the difference between class components and function components?","text":"<p>Class components let you define your components with the help of classes. You can extend from <code>React.Component</code> class to create a component. Class components also allow you to define component level lifecycle methods. </p> <p>Functional components are the preferred way to write React components. There are no lifecycle methods similar to class components available in functional components; you can use React hooks instead to manage the component lifecycle.</p>"},{"location":"interviewquestion/react.html#3-can-we-change-the-state-of-the-component-directly","title":"3. Can we change the state of the component directly?","text":"<p>No, we can't change the state of the component directly. State can only be changed by using <code>setState()</code> method. Changing the state variable directly won't re-render the component.</p>"},{"location":"interviewquestion/react.html#4-what-is-the-purpose-of-key-attribute-in-react","title":"4. What is the purpose of <code>key</code> attribute in React?","text":"<p>The string attribute <code>key</code> is a special attribute you need to include when rendering an array of elements. Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity.</p>"},{"location":"interviewquestion/react.html#5-how-to-render-html-in-react","title":"5. How to render HTML in React?","text":"<p>You can use <code>dangerouslySetInnerHTML</code> prop to render HTML in React. It is used to set HTML directly from React. You should be careful while using this property as it can cause XSS attacks.</p>"},{"location":"interviewquestion/react.html#6-how-to-render-a-list-in-react","title":"6. How to render a list in React?","text":"<p>In React, you can render a list by using the JavaScript map function to iterate over an array of items and return a JSX element for each item. It's important to provide a unique key prop to each element in the list for React's diffing algorithm to function efficiently during re-renders. Here's a basic example:</p> <pre><code>const items = ['Apple', 'Banana', 'Cherry'];\n\nfunction FruitList() {\n  return (\n    &lt;ul&gt;\n      {items.map((fruit, index) =&gt; (\n        &lt;li key={index}&gt;{fruit}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre> <p>Note: While using the index as a key can work in some cases, it's generally not recommended for dynamic lists where items can be added, removed, or reordered.</p>"},{"location":"interviewquestion/react.html#7-what-is-the-difference-between-stateful-and-stateless-components","title":"7. What is the difference between stateful and stateless components?","text":"<p>The main difference between stateful and stateless components is one has state and the other doesn't. </p> <p>Stateful components keep track of changes to their state and re-render themselves when the state changes. </p> <p>Stateless components, on the other hand, render whatever is passed to them via <code>props</code> or always render the same thing.</p>"},{"location":"interviewquestion/react.html#8-whats-the-components-lifecycle-in-react","title":"8. What's the component's lifecycle in React?","text":"<p>In React functional components, lifecycle-like behaviors are achieved using hooks:</p> <p>Mounting and Unmounting</p> <p>Utilizing the useEffect hook with an empty dependency array ([]) ensures the hook runs after the component mounts to the DOM.</p> <pre><code>useEffect(() =&gt; {\n  // do something after component mounts\n  return () =&gt; {\n    // do something before component unmounts\n  };\n}, []);\n</code></pre> <p>The <code>cleanup function</code> returned within the useEffect callback offers a mechanism for handling tasks when the component is about to unmount.</p> <p>Updates</p> <p>The useEffect hook, when invoked without a dependency array or with specific dependencies, executes after every render or when specified prop/state changes are detected.</p> <pre><code>useEffect(() =&gt; {\n  // do something after every render\n});\n</code></pre> <pre><code>useEffect(() =&gt; {\n  // do something after specific prop/state changes\n}, [state1, state2]);\n</code></pre> <p>Performance\u00b7Beginner</p>"},{"location":"interviewquestion/react.html#why-you-shouldnt-use-index-as-a-key-in-react-lists-and-iterators","title":"Why you shouldn't use <code>index</code> as a key in React lists and iterators?","text":"<p>Using <code>index</code> as a key can negatively impact performance and may cause issues with the component state.  When the list items change due to additions, deletions, or reordering, using indexes can lead to unnecessary re-renders or even incorrect UI updates. React uses keys to identify elements in the list, and if the key is just an index, it might reuse component instances and state inappropriately. Especially in cases where the list is dynamic or items can be reordered, it's recommended to use unique and stable identifiers as keys to ensure consistent behavior.</p> <p>Performance\u00b7Intermediate</p>"},{"location":"interviewquestion/react.html#what-is-the-purpose-of-the-usememo-hook-in-react","title":"What is the purpose of the <code>useMemo</code> hook in React?","text":"<p>The <code>useMemo hook</code> is used to memoize the result of a computationally expensive operation in a functional component. It helps optimize performance by caching the result of the operation and returning the cached result on subsequent renders if the dependencies have not changed. This can prevent unnecessary calculations.</p> <p>State\u00b7Intermediate</p>"},{"location":"interviewquestion/react.html#what-is-the-purpose-of-the-usecontext-hook-in-react","title":"What is the purpose of the <code>useContext</code> hook in React?","text":"<p>The <code>useContext hook</code> is used to access and consume context values in functional components. It provides a way to access context data without the need for a context consumer. useContext is particularly useful when you want to access context values in nested components without having to pass props through intermediate components.</p>"},{"location":"interviewquestion/react.html#reference","title":"Reference","text":"<ul> <li>roadmap.sh/questions/react</li> <li>reactjs interview question : github</li> </ul>"},{"location":"interviewquestion/terminology.html","title":"Terminology","text":""},{"location":"interviewquestion/terminology.html#reactive-programming","title":"Reactive Programming","text":"<ul> <li>Reactive Programming is a paradigm based on asynchronus data streams that propagate changes during the application lifcycle. [pg-11]</li> <li>Another important concept on Reactive Programming is the way we are communication within objects. [pg-12]</li> <li>Reactive porgarmming is used for handling the propagation of data during the life cycle of an application. []</li> </ul>"},{"location":"interviewquestion/terminology.html#solid-principle","title":"Solid Principle","text":"<p>SOLID is a set of principles created by Uncle Bob.</p> <p>S - Single-responsibility principle</p> <p>O - open-closed principle</p> <p>L - Liskov Substitution principle</p> <p>I - Interface Segregation principle</p> <p>D - Dependency Inversion principle</p>"},{"location":"interviewquestion/terminology.html#reference","title":"Reference","text":"<ul> <li>Front End Reactive Architecture</li> </ul>"},{"location":"mkdocs/01-advanced-mkdocs.html","title":"Basic","text":""},{"location":"mkdocs/01-advanced-mkdocs.html#mkdocs","title":"Mkdocs","text":""},{"location":"mkdocs/01-advanced-mkdocs.html#installation","title":"Installation","text":"<pre><code>$ pip install mkdocs\n$ mkdocs new my-project\n$ cd my-project\n$ mkdocs serve\n</code></pre>"},{"location":"mkdocs/01-advanced-mkdocs.html#theming-our-documentation","title":"Theming our documentation","text":"<pre><code>site_name: MkLorum\nsite_url: https://example.com/\nnav:\n  - Home: index.md\n  - About: about.md\ntheme: readthedocs\n</code></pre>"},{"location":"mkdocs/01-advanced-mkdocs.html#building-the-site","title":"Building the site","text":"<pre><code>$ mkdocs build\n</code></pre>"},{"location":"mkdocs/01-advanced-mkdocs.html#deploying-your-docs","title":"Deploying your docs","text":"<pre><code>my-project/\n    mkdocs.yml\n    docs/\norgname.github.io/\n\n$ cd ../orgname.github.io/\n$ mkdocs gh-deploy --config-file ../my-project/mkdocs.yml --remote-branch master\n</code></pre>"},{"location":"mkdocs/01-advanced-mkdocs.html#material-theme","title":"Material theme","text":"<pre><code># Installing theme only\n$ pip install mkdocs-material\n\n# Next, install the theme and its dependencies with:\n$ pip install -e mkdocs-material\n\n# mkdocs.yml\ntheme:\n  name: material\n\n# glightbox\n$ pip install mkdocs-glightbox\n\n# Add plugin in your mkdocs.yml\nplugins:\n   - glightbox\n</code></pre>"},{"location":"mkdocs/01-advanced-mkdocs.html#reference","title":"Reference","text":"<ul> <li>mkdocs official site</li> <li>mkdocs material theme</li> <li>mkdocs-glightbox</li> </ul>"},{"location":"mkdocs/02-advanced-mkdocs.html","title":"Advanced","text":""},{"location":"mkdocs/02-advanced-mkdocs.html#advanced-mkdocs","title":"Advanced Mkdocs","text":""},{"location":"mkdocs/02-advanced-mkdocs.html#configure-pages-and-navigation","title":"Configure Pages and Navigation","text":"<pre><code>// A minimal navigation configuration could look like this:\n\nnav:\n  - 'index.md'\n  - 'about.md'\n</code></pre> <pre><code>// override the title in the nav setting add a title right before the filename\n\nnav:\n  - Home: 'index.md'\n  - About: 'about.md'\n</code></pre> <pre><code>// Navigation sub-sections can be created by listing related pages together under a section title\n\nnav:\n  - Home: 'index.md'\n  - 'User Guide':\n    - 'Writing your docs': 'writing-your-docs.md'\n    - 'Styling your docs': 'styling-your-docs.md'\n  - About:\n    - 'License': 'license.md'\n    - 'Release Notes': 'release-notes.md'\n</code></pre> <ul> <li>mkdocs navigation configuration</li> <li>mkdocs-glightbox</li> </ul>"},{"location":"research/antd.html","title":"antd","text":"<pre><code>$ pnpm add antd\n$ pnpm add @ant-design/icons\n</code></pre>"},{"location":"research/antd.html#reference","title":"Reference","text":""},{"location":"research/js-prevent-default.html","title":"prevent default","text":"<p>The <code>e.preventDefault()</code> method is a common practice in JavaScript when handling events, especially form submissions. It is used to prevent the default behavior associated with an event.</p> <p>In the context of a form submission:</p> <ul> <li> <p>Without e.preventDefault(): If you don't prevent the default behavior of a form submission, the browser will perform its default action, which usually involves sending a request to the server, causing a page reload or navigation.</p> </li> <li> <p>With e.preventDefault(): By calling <code>e.preventDefault()</code> within an event handler, you stop the default action associated with that event. In the case of a form submission, it prevents the browser from navigating away from the current page or triggering a full page reload.</p> </li> </ul> <pre><code>const handleSubmit = (e) =&gt; {\n  e.preventDefault(); // Prevent the default form submission behavior\n\n  // Your custom logic for handling the form submission goes here\n};\n</code></pre>"},{"location":"research/micro-frontend.html","title":"Micro-Frontend","text":""},{"location":"research/micro-frontend.html#installation","title":"Installation","text":"<pre><code>npm install --global create-single-spa\n\n# or\n\nyarn global add create-single-spa\n</code></pre> <p>Then run the following:</p> <p>create-single-spa</p> <pre><code>npm init single-spa\n\n# \nnpm init single-spa\n\n# or\n\nnpx create-single-spa\n\n# or\n\nyarn create single-spa\n</code></pre>"},{"location":"research/micro-frontend.html#reference","title":"Reference","text":""},{"location":"research/notes.html","title":"Notes","text":""},{"location":"research/notes.html#best","title":"BEST","text":"<ul> <li>How to Implement Tokenization using JWT and Django Rest Framework</li> <li>How to Use JWT Authentication with Django REST Framework</li> <li>How to use different git emails for personal and work repositories on the same machine</li> <li> <p>How to configure Git with multiple emails?</p> </li> <li> <p>How to Develop Microfrontends Using React: Step-by-Step Guide</p> </li> </ul>"},{"location":"research/rabbitmq.html","title":"Rabbitmq","text":""},{"location":"research/rabbitmq.html#rabbitmq","title":"RabbitMQ","text":""},{"location":"research/rabbitmq.html#introduction","title":"Introduction","text":"<p>What is RabbitMQ?</p> <p>\u201cRabbitMQ is a message broker: it accepts and forwards messages. You can think about it as a post office: when you put the mail that you want posting in a post box, you can be sure that the letter carrier will eventually deliver the mail to your recipient. In this analogy, RabbitMQ is a post box, a post office, and a letter carrier.\u201d (1)</p> <p>It has developed by Erlang open source langua</p> <p></p> <p>Why we need to use RabbitMQ?</p> <p>Now that you know what RabbitMQ is, the next question is: why should you use a queue instead of directly sending data from one microservice to the other one. There are a couple of reasons why using a queue instead of directly sending data is better (2)</p> <ul> <li>Higher availability and better error handling</li> <li>Better scalability</li> <li>Share data with whoever wants/needs it</li> <li>Better user experience due to asynchronous processing</li> </ul> <p>As for usage areas, it will make our job much easier to perform tasks that do not need to be synchronized, such as sending mail, basket operations after adding an order on our e-commerce page, and export (excel, csv) data. (Generally \u201cMessage brokers\u201d).</p> <p></p> <p>The main parts of the rabbitmq:</p> <ul> <li>A <code>producer</code> is a user application that sends messages.</li> <li>A <code>queue</code> is a buffer that stores messages.</li> <li>A <code>consumer</code> is a user application that receives message</li> </ul>"},{"location":"research/rabbitmq.html#setup","title":"Setup","text":"<pre><code>// Installation\n$ choco install rabbitmq\n\n// install without any\n$ choco install rabbitmq --yes\n\n// rabbitmqctl \u2014 tool for managing RabbitMQ nodes\n# rabbitmqctl status\n</code></pre> <pre><code>// Windows \u2013 RabbitMQ has Nodedown Error (Solved)\n\n1. Run RabbitMQ sbin command prompt as administrator.\n2. Run \"rabbitmq-service remove\"\n3. Run \"rabbitmq-service install\"\n</code></pre>"},{"location":"research/rabbitmq.html#rabbitmq-enable-web-management-plugin","title":"RabbitMQ Enable Web Management Plugin","text":"<p>To enable a rabbitmq web management plugin on windows, we need to start <code>RabbitMQ</code> Command Prompt with administrator privilege, enter the command \u201c<code>rabbitmq-plugins enable rabbitmq_management</code>\u201d and execute it.</p> <pre><code>$ rabbitmq-plugins enable rabbitmq_management\n\n// open a url\nhttp://localhost:15672\n\n\n// To access rabbitmq web management dashboard, the default Username and password of  is \u201cguest\u201d (Username: \u201cguest\u201d | Password: \u201cguest\u201d).\nUsername: guest\nPassword: guest\n</code></pre>"},{"location":"research/rabbitmq.html#reference","title":"Reference","text":"<ul> <li>rabbitmq install using choco</li> <li>RabbitMQ Installation on Windows</li> <li>RabbitMQ - Installation: Tutorial</li> <li>Rabbit MQ - Publish/Subscribe</li> <li>RabbitMQ Producer and Consumer Solution with Docker in .net Core</li> <li>Part 1: RabbitMQ for beginners - What is RabbitMQ?</li> <li>rabbitmqctl - guide</li> <li>How to Use RabbitMQ in ASP.NET Core</li> <li>How do I verify my version of RabbitMQ?</li> </ul>"},{"location":"research/rabbitmq.html#solved","title":"Solved","text":"<ul> <li>Unable to perform an operation on node rabbitmq</li> </ul>"},{"location":"research/reference.html","title":"Reference","text":""},{"location":"research/reference.html#reference","title":"Reference","text":""},{"location":"research/reference.html#npm-packages","title":"npm packages","text":"<ul> <li>react-number-format - npm</li> <li>emoji-picker-react - npm</li> <li>react-scroll-up -npm</li> <li>react-accessible-treeview</li> <li>react-social-login-buttons</li> <li>react-use-is-online</li> <li>react-youtube</li> <li>react-infinite-scroll-component: github</li> <li>react-input-emoji: github</li> </ul>"},{"location":"research/reference.html#docs","title":"Docs","text":"<ul> <li>devdocs.io</li> <li>Design system repo</li> <li>tinymce.Editor</li> <li>react component library</li> </ul>"},{"location":"research/reference.html#guide","title":"Guide","text":"<ul> <li>How to setup Infinite Scroll in your react component? </li> <li>Math.sign() - JavaScript | MDN</li> <li>Check if Value is Negative or Positive Number in JavaScript</li> <li>Javascript Program to Check if a number is Positive, Negative, or Zero</li> <li>How to Create Register and Login API using Django Rest Framework and Token Authentication</li> <li>Login and Register User \u2014 Django Rest Framework</li> <li>User Registration, Login, Logout API using Django Rest Framework</li> <li>Django REST Framework Basics</li> <li>Official Django REST Framework Tutorial - A Beginners Guide</li> <li>beautiful-react-hooks - github</li> <li>How to Make Ant Design Table (AntD) in React JS</li> <li>How To Debug React Apps With VS Code</li> <li>15 Useful Lodash Methods for Everyday Coding (Part-1)</li> <li>How do i get rid of the yesterday, today stuff in folders </li> <li>7 Best Steps For Writing Good Software Technical Documentation</li> <li> create-mf-app</li> <li>Micro Frontend Architecture Approach Selection Framework</li> <li>Micro Frontend by Module Federation with react-router-dom v6 - stackoverflow</li> <li>Why React Router is excellent for Micro-Frontends </li> <li>Micro Frontend Architecture and Challenges: Decision Framework</li> <li>The State of Micro Frontends</li> <li>Breaking down the last Monolith - Micro Frontends</li> <li>Reverse Chat Messages List Infinite Scroll - sandbox</li> <li>inverse infinite scroll react: sandbox</li> <li>25+ Slack slash commands every power user needs to know</li> <li>25+ Slash Commands to Help You be More Productive on Slack</li> <li>How to Develop Microfrontends Using React: Step-by-Step Guide</li> </ul>"},{"location":"research/reference.html#microfrontend","title":"Microfrontend","text":"<ul> <li> react-micro-frontend: github repo</li> <li>Microfrontends using React: The Complete Guide</li> <li>single-spa</li> <li>Building Micro Frontends With React</li> <li>Mastering Microfrontends: Routing and Communication</li> <li>Micro-Frontends With React &amp; Vite Module Federation</li> <li>Module Federation in Production</li> </ul>"},{"location":"research/reference.html#best","title":"BEST","text":"<ul> <li>How to Implement Tokenization using JWT and Django Rest Framework</li> <li>How to Use JWT Authentication with Django REST Framework</li> <li>How to use different git emails for personal and work repositories on the same machine</li> <li>How to configure Git with multiple emails?</li> <li>The React Handbook</li> </ul>"},{"location":"research/reference.html#short-book","title":"Short Book","text":"<ul> <li>useEffect By Exampl by Max Rozen</li> <li>Building Micro-Frontends by Luca Mezzalira</li> </ul>"},{"location":"research/reference.html#issue-solved","title":"Issue Solved","text":"<ul> <li>How to disable git gpg signing</li> <li>How To Debug React Apps With VS Code</li> </ul>"},{"location":"research/reference.html#youtube","title":"Youtube","text":"<ul> <li>How To NOT Get Screwed As A Software Engineer</li> <li>We Sold Our Startup &amp; Filmed Everything!</li> <li>Micro Frontends - Routing between remotes - youtube</li> </ul>"},{"location":"research/tricks.html","title":"Tips & Tricks","text":""},{"location":"research/tricks.html#on-linux","title":"On Linux","text":"<p>python3 -m venv venv &amp;&amp; source venv/bin/activate</p>"},{"location":"research/tricks.html#on-windows","title":"On Windows","text":"<p>.\\venv\\Scripts\\activate</p>"},{"location":"research/tricks.html#python","title":"Python","text":"<pre><code>$ python manage.py shell\n\n# create the object using the model\n\n&gt; from geeks.models import GeeksModel\n&gt; GeeksModel.objects.create(title=\"title1\",description=\"description1\").save()\n&gt; GeeksModel.objects.create(title=\"title2\",description=\"description2\").save()\n</code></pre>"},{"location":"research/tricks.html#_1","title":"Tips & Tricks","text":"<p>https://semver.org/</p>"},{"location":"research/videos.html","title":"Youtube","text":""},{"location":"roadmap/space-repetition.html","title":"Space Repetition","text":""},{"location":"roadmap/time-period-for-learning.html","title":"Time period for Learning","text":""},{"location":"tools/git.html","title":"Git","text":""},{"location":"tools/git.html#git","title":"Git","text":"<pre><code># opens a git .config file\n\n$ git config --global -e\n</code></pre>"},{"location":"tools/vite.html","title":"Vite","text":""},{"location":"tools/vite.html#env-variables-and-modes","title":"Env Variables and Modes","text":""},{"location":"tools/vite.html#env-variables","title":"Env Variables","text":"<p>Vite exposes env variables on the special import.meta.env object. Some built-in variables are available in all cases:</p> <ul> <li><code>import.meta.env.MODE</code></li> <li><code>import.meta.env.BASE_URL</code></li> <li><code>import.meta.env.PROD</code></li> <li><code>import.meta.env.DEV</code></li> <li><code>import.meta.env.SSR</code></li> </ul> <pre><code># .env.production\n\nVITE_APP_TITLE=My App\n\n# App.js\n\nconsole.log(import.meta.env.VITE_APP_TITLE)\n</code></pre> <p>This code should be added inside eslintConfig:</p> <pre><code>\"rules\": {\n    \"no-unused-vars\": \"off\"\n}\n</code></pre>"},{"location":"tools/vite.html#reference","title":"Reference","text":"<ul> <li>Env Variables and Modes : Vite</li> <li>Vue: disable no-unused-vars error: the simplest fix</li> </ul>"}]}